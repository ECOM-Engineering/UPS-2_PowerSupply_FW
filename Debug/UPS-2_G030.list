
UPS-2_G030.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000433c  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000334  080043f4  080043f4  000143f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004728  08004728  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004728  08004728  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004728  08004728  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004728  08004728  00014728  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800472c  0800472c  0001472c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004730  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000324  20000070  080047a0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000394  080047a0  00020394  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bd17  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d25  00000000  00000000  0003bdaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000d5b0  00000000  00000000  0003fad4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e48  00000000  00000000  0004d088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ea0  00000000  00000000  0004ded0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019872  00000000  00000000  0004ed70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000182e6  00000000  00000000  000685e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00094668  00000000  00000000  000808c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00114f30  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000027b4  00000000  00000000  00114f84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000070 	.word	0x20000070
 80000d8:	00000000 	.word	0x00000000
 80000dc:	080043dc 	.word	0x080043dc

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000074 	.word	0x20000074
 80000fc:	080043dc 	.word	0x080043dc

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__gnu_thumb1_case_shi>:
 8000110:	b403      	push	{r0, r1}
 8000112:	4671      	mov	r1, lr
 8000114:	0849      	lsrs	r1, r1, #1
 8000116:	0040      	lsls	r0, r0, #1
 8000118:	0049      	lsls	r1, r1, #1
 800011a:	5e09      	ldrsh	r1, [r1, r0]
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	448e      	add	lr, r1
 8000120:	bc03      	pop	{r0, r1}
 8000122:	4770      	bx	lr

08000124 <__udivsi3>:
 8000124:	2200      	movs	r2, #0
 8000126:	0843      	lsrs	r3, r0, #1
 8000128:	428b      	cmp	r3, r1
 800012a:	d374      	bcc.n	8000216 <__udivsi3+0xf2>
 800012c:	0903      	lsrs	r3, r0, #4
 800012e:	428b      	cmp	r3, r1
 8000130:	d35f      	bcc.n	80001f2 <__udivsi3+0xce>
 8000132:	0a03      	lsrs	r3, r0, #8
 8000134:	428b      	cmp	r3, r1
 8000136:	d344      	bcc.n	80001c2 <__udivsi3+0x9e>
 8000138:	0b03      	lsrs	r3, r0, #12
 800013a:	428b      	cmp	r3, r1
 800013c:	d328      	bcc.n	8000190 <__udivsi3+0x6c>
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d30d      	bcc.n	8000160 <__udivsi3+0x3c>
 8000144:	22ff      	movs	r2, #255	; 0xff
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	ba12      	rev	r2, r2
 800014a:	0c03      	lsrs	r3, r0, #16
 800014c:	428b      	cmp	r3, r1
 800014e:	d302      	bcc.n	8000156 <__udivsi3+0x32>
 8000150:	1212      	asrs	r2, r2, #8
 8000152:	0209      	lsls	r1, r1, #8
 8000154:	d065      	beq.n	8000222 <__udivsi3+0xfe>
 8000156:	0b03      	lsrs	r3, r0, #12
 8000158:	428b      	cmp	r3, r1
 800015a:	d319      	bcc.n	8000190 <__udivsi3+0x6c>
 800015c:	e000      	b.n	8000160 <__udivsi3+0x3c>
 800015e:	0a09      	lsrs	r1, r1, #8
 8000160:	0bc3      	lsrs	r3, r0, #15
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x46>
 8000166:	03cb      	lsls	r3, r1, #15
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b83      	lsrs	r3, r0, #14
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x52>
 8000172:	038b      	lsls	r3, r1, #14
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b43      	lsrs	r3, r0, #13
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x5e>
 800017e:	034b      	lsls	r3, r1, #13
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b03      	lsrs	r3, r0, #12
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x6a>
 800018a:	030b      	lsls	r3, r1, #12
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0ac3      	lsrs	r3, r0, #11
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x76>
 8000196:	02cb      	lsls	r3, r1, #11
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a83      	lsrs	r3, r0, #10
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x82>
 80001a2:	028b      	lsls	r3, r1, #10
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a43      	lsrs	r3, r0, #9
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x8e>
 80001ae:	024b      	lsls	r3, r1, #9
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a03      	lsrs	r3, r0, #8
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x9a>
 80001ba:	020b      	lsls	r3, r1, #8
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	d2cd      	bcs.n	800015e <__udivsi3+0x3a>
 80001c2:	09c3      	lsrs	r3, r0, #7
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xa8>
 80001c8:	01cb      	lsls	r3, r1, #7
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0983      	lsrs	r3, r0, #6
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xb4>
 80001d4:	018b      	lsls	r3, r1, #6
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0943      	lsrs	r3, r0, #5
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xc0>
 80001e0:	014b      	lsls	r3, r1, #5
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0903      	lsrs	r3, r0, #4
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xcc>
 80001ec:	010b      	lsls	r3, r1, #4
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	08c3      	lsrs	r3, r0, #3
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xd8>
 80001f8:	00cb      	lsls	r3, r1, #3
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0883      	lsrs	r3, r0, #2
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xe4>
 8000204:	008b      	lsls	r3, r1, #2
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0843      	lsrs	r3, r0, #1
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xf0>
 8000210:	004b      	lsls	r3, r1, #1
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	1a41      	subs	r1, r0, r1
 8000218:	d200      	bcs.n	800021c <__udivsi3+0xf8>
 800021a:	4601      	mov	r1, r0
 800021c:	4152      	adcs	r2, r2
 800021e:	4610      	mov	r0, r2
 8000220:	4770      	bx	lr
 8000222:	e7ff      	b.n	8000224 <__udivsi3+0x100>
 8000224:	b501      	push	{r0, lr}
 8000226:	2000      	movs	r0, #0
 8000228:	f000 f8f0 	bl	800040c <__aeabi_idiv0>
 800022c:	bd02      	pop	{r1, pc}
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_uidivmod>:
 8000230:	2900      	cmp	r1, #0
 8000232:	d0f7      	beq.n	8000224 <__udivsi3+0x100>
 8000234:	e776      	b.n	8000124 <__udivsi3>
 8000236:	4770      	bx	lr

08000238 <__divsi3>:
 8000238:	4603      	mov	r3, r0
 800023a:	430b      	orrs	r3, r1
 800023c:	d47f      	bmi.n	800033e <__divsi3+0x106>
 800023e:	2200      	movs	r2, #0
 8000240:	0843      	lsrs	r3, r0, #1
 8000242:	428b      	cmp	r3, r1
 8000244:	d374      	bcc.n	8000330 <__divsi3+0xf8>
 8000246:	0903      	lsrs	r3, r0, #4
 8000248:	428b      	cmp	r3, r1
 800024a:	d35f      	bcc.n	800030c <__divsi3+0xd4>
 800024c:	0a03      	lsrs	r3, r0, #8
 800024e:	428b      	cmp	r3, r1
 8000250:	d344      	bcc.n	80002dc <__divsi3+0xa4>
 8000252:	0b03      	lsrs	r3, r0, #12
 8000254:	428b      	cmp	r3, r1
 8000256:	d328      	bcc.n	80002aa <__divsi3+0x72>
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d30d      	bcc.n	800027a <__divsi3+0x42>
 800025e:	22ff      	movs	r2, #255	; 0xff
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	ba12      	rev	r2, r2
 8000264:	0c03      	lsrs	r3, r0, #16
 8000266:	428b      	cmp	r3, r1
 8000268:	d302      	bcc.n	8000270 <__divsi3+0x38>
 800026a:	1212      	asrs	r2, r2, #8
 800026c:	0209      	lsls	r1, r1, #8
 800026e:	d065      	beq.n	800033c <__divsi3+0x104>
 8000270:	0b03      	lsrs	r3, r0, #12
 8000272:	428b      	cmp	r3, r1
 8000274:	d319      	bcc.n	80002aa <__divsi3+0x72>
 8000276:	e000      	b.n	800027a <__divsi3+0x42>
 8000278:	0a09      	lsrs	r1, r1, #8
 800027a:	0bc3      	lsrs	r3, r0, #15
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x4c>
 8000280:	03cb      	lsls	r3, r1, #15
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b83      	lsrs	r3, r0, #14
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x58>
 800028c:	038b      	lsls	r3, r1, #14
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b43      	lsrs	r3, r0, #13
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x64>
 8000298:	034b      	lsls	r3, r1, #13
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b03      	lsrs	r3, r0, #12
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x70>
 80002a4:	030b      	lsls	r3, r1, #12
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0ac3      	lsrs	r3, r0, #11
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x7c>
 80002b0:	02cb      	lsls	r3, r1, #11
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a83      	lsrs	r3, r0, #10
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x88>
 80002bc:	028b      	lsls	r3, r1, #10
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a43      	lsrs	r3, r0, #9
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x94>
 80002c8:	024b      	lsls	r3, r1, #9
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a03      	lsrs	r3, r0, #8
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0xa0>
 80002d4:	020b      	lsls	r3, r1, #8
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	d2cd      	bcs.n	8000278 <__divsi3+0x40>
 80002dc:	09c3      	lsrs	r3, r0, #7
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xae>
 80002e2:	01cb      	lsls	r3, r1, #7
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0983      	lsrs	r3, r0, #6
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xba>
 80002ee:	018b      	lsls	r3, r1, #6
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0943      	lsrs	r3, r0, #5
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xc6>
 80002fa:	014b      	lsls	r3, r1, #5
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0903      	lsrs	r3, r0, #4
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xd2>
 8000306:	010b      	lsls	r3, r1, #4
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	08c3      	lsrs	r3, r0, #3
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xde>
 8000312:	00cb      	lsls	r3, r1, #3
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0883      	lsrs	r3, r0, #2
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xea>
 800031e:	008b      	lsls	r3, r1, #2
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0843      	lsrs	r3, r0, #1
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xf6>
 800032a:	004b      	lsls	r3, r1, #1
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	1a41      	subs	r1, r0, r1
 8000332:	d200      	bcs.n	8000336 <__divsi3+0xfe>
 8000334:	4601      	mov	r1, r0
 8000336:	4152      	adcs	r2, r2
 8000338:	4610      	mov	r0, r2
 800033a:	4770      	bx	lr
 800033c:	e05d      	b.n	80003fa <__divsi3+0x1c2>
 800033e:	0fca      	lsrs	r2, r1, #31
 8000340:	d000      	beq.n	8000344 <__divsi3+0x10c>
 8000342:	4249      	negs	r1, r1
 8000344:	1003      	asrs	r3, r0, #32
 8000346:	d300      	bcc.n	800034a <__divsi3+0x112>
 8000348:	4240      	negs	r0, r0
 800034a:	4053      	eors	r3, r2
 800034c:	2200      	movs	r2, #0
 800034e:	469c      	mov	ip, r3
 8000350:	0903      	lsrs	r3, r0, #4
 8000352:	428b      	cmp	r3, r1
 8000354:	d32d      	bcc.n	80003b2 <__divsi3+0x17a>
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d312      	bcc.n	8000382 <__divsi3+0x14a>
 800035c:	22fc      	movs	r2, #252	; 0xfc
 800035e:	0189      	lsls	r1, r1, #6
 8000360:	ba12      	rev	r2, r2
 8000362:	0a03      	lsrs	r3, r0, #8
 8000364:	428b      	cmp	r3, r1
 8000366:	d30c      	bcc.n	8000382 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d308      	bcc.n	8000382 <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d304      	bcc.n	8000382 <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	d03a      	beq.n	80003f2 <__divsi3+0x1ba>
 800037c:	1192      	asrs	r2, r2, #6
 800037e:	e000      	b.n	8000382 <__divsi3+0x14a>
 8000380:	0989      	lsrs	r1, r1, #6
 8000382:	09c3      	lsrs	r3, r0, #7
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x154>
 8000388:	01cb      	lsls	r3, r1, #7
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0983      	lsrs	r3, r0, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x160>
 8000394:	018b      	lsls	r3, r1, #6
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0943      	lsrs	r3, r0, #5
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x16c>
 80003a0:	014b      	lsls	r3, r1, #5
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0903      	lsrs	r3, r0, #4
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x178>
 80003ac:	010b      	lsls	r3, r1, #4
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	08c3      	lsrs	r3, r0, #3
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x184>
 80003b8:	00cb      	lsls	r3, r1, #3
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0883      	lsrs	r3, r0, #2
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x190>
 80003c4:	008b      	lsls	r3, r1, #2
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	d2d9      	bcs.n	8000380 <__divsi3+0x148>
 80003cc:	0843      	lsrs	r3, r0, #1
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d301      	bcc.n	80003d6 <__divsi3+0x19e>
 80003d2:	004b      	lsls	r3, r1, #1
 80003d4:	1ac0      	subs	r0, r0, r3
 80003d6:	4152      	adcs	r2, r2
 80003d8:	1a41      	subs	r1, r0, r1
 80003da:	d200      	bcs.n	80003de <__divsi3+0x1a6>
 80003dc:	4601      	mov	r1, r0
 80003de:	4663      	mov	r3, ip
 80003e0:	4152      	adcs	r2, r2
 80003e2:	105b      	asrs	r3, r3, #1
 80003e4:	4610      	mov	r0, r2
 80003e6:	d301      	bcc.n	80003ec <__divsi3+0x1b4>
 80003e8:	4240      	negs	r0, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d500      	bpl.n	80003f0 <__divsi3+0x1b8>
 80003ee:	4249      	negs	r1, r1
 80003f0:	4770      	bx	lr
 80003f2:	4663      	mov	r3, ip
 80003f4:	105b      	asrs	r3, r3, #1
 80003f6:	d300      	bcc.n	80003fa <__divsi3+0x1c2>
 80003f8:	4240      	negs	r0, r0
 80003fa:	b501      	push	{r0, lr}
 80003fc:	2000      	movs	r0, #0
 80003fe:	f000 f805 	bl	800040c <__aeabi_idiv0>
 8000402:	bd02      	pop	{r1, pc}

08000404 <__aeabi_idivmod>:
 8000404:	2900      	cmp	r1, #0
 8000406:	d0f8      	beq.n	80003fa <__divsi3+0x1c2>
 8000408:	e716      	b.n	8000238 <__divsi3>
 800040a:	4770      	bx	lr

0800040c <__aeabi_idiv0>:
 800040c:	4770      	bx	lr
 800040e:	46c0      	nop			; (mov r8, r8)

08000410 <ecSWTimerInit>:
//
*///////////////////////////////////////////////////////////////////////////////
void ecSWTimerInit(void)
{
	uint8_t i;
	for (i = 0; i < MAX_SW_TIMERS; i++)
 8000410:	2300      	movs	r3, #0
 8000412:	e005      	b.n	8000420 <ecSWTimerInit+0x10>
	{
		gSWTimer[i] = 0;
 8000414:	0059      	lsls	r1, r3, #1
 8000416:	4a04      	ldr	r2, [pc, #16]	; (8000428 <ecSWTimerInit+0x18>)
 8000418:	2000      	movs	r0, #0
 800041a:	5288      	strh	r0, [r1, r2]
	for (i = 0; i < MAX_SW_TIMERS; i++)
 800041c:	3301      	adds	r3, #1
 800041e:	b2db      	uxtb	r3, r3
 8000420:	2b03      	cmp	r3, #3
 8000422:	d9f7      	bls.n	8000414 <ecSWTimerInit+0x4>
	}
}
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)
 8000428:	200000b4 	.word	0x200000b4

0800042c <ecSWTimerStart>:
*///////////////////////////////////////////////////////////////////////////////
void ecSWTimerStart(uint8_t TimerNr, uint16_t Value)
{
	uint32_t controlReg; //prevent irq during SW timer operation
	
	if(TimerNr < MAX_SW_TIMERS)
 800042c:	2803      	cmp	r0, #3
 800042e:	d807      	bhi.n	8000440 <ecSWTimerStart+0x14>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000430:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8000434:	b672      	cpsid	i
		// disallow interrupts
		controlReg = __get_PRIMASK(); //save current irq situation
		__disable_irq();
		
		// Set the Timer
		gSWTimer[TimerNr] = Value;
 8000436:	0040      	lsls	r0, r0, #1
 8000438:	4a02      	ldr	r2, [pc, #8]	; (8000444 <ecSWTimerStart+0x18>)
 800043a:	5281      	strh	r1, [r0, r2]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800043c:	f383 8810 	msr	PRIMASK, r3
		
		__set_PRIMASK(controlReg); //restore irq situation;
	}
}
 8000440:	4770      	bx	lr
 8000442:	46c0      	nop			; (mov r8, r8)
 8000444:	200000b4 	.word	0x200000b4

08000448 <ecSWTimerRead>:
uint16_t ecSWTimerRead(uint8_t TimerNr)
{
	uint32_t controlReg; //prevent irq during SW timer operation
	uint16_t TimerValue;

	if(TimerNr < MAX_SW_TIMERS)
 8000448:	2803      	cmp	r0, #3
 800044a:	d808      	bhi.n	800045e <ecSWTimerRead+0x16>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800044c:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8000450:	b672      	cpsid	i
		// disallow interrupts
		controlReg = __get_PRIMASK(); //save current irq situation
		__disable_irq();

		// get the Timer				
		TimerValue = gSWTimer[TimerNr];
 8000452:	0040      	lsls	r0, r0, #1
 8000454:	4a03      	ldr	r2, [pc, #12]	; (8000464 <ecSWTimerRead+0x1c>)
 8000456:	5a80      	ldrh	r0, [r0, r2]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000458:	f383 8810 	msr	PRIMASK, r3
		return (TimerValue);
	}
	else{
		return(0xFFFF);
	}
}
 800045c:	4770      	bx	lr
		return(0xFFFF);
 800045e:	4802      	ldr	r0, [pc, #8]	; (8000468 <ecSWTimerRead+0x20>)
 8000460:	e7fc      	b.n	800045c <ecSWTimerRead+0x14>
 8000462:	46c0      	nop			; (mov r8, r8)
 8000464:	200000b4 	.word	0x200000b4
 8000468:	0000ffff 	.word	0x0000ffff

0800046c <ecSWTimerClk>:
*///////////////////////////////////////////////////////////////////////////////
void ecSWTimerClk(void)
{
	uint8_t TimerNr;
	// decrement software timers
	for(TimerNr = 0; TimerNr < MAX_SW_TIMERS; TimerNr++)
 800046c:	2300      	movs	r3, #0
 800046e:	e001      	b.n	8000474 <ecSWTimerClk+0x8>
 8000470:	3301      	adds	r3, #1
 8000472:	b2db      	uxtb	r3, r3
 8000474:	2b03      	cmp	r3, #3
 8000476:	d809      	bhi.n	800048c <ecSWTimerClk+0x20>
	{
		if(gSWTimer[TimerNr])
 8000478:	005a      	lsls	r2, r3, #1
 800047a:	4905      	ldr	r1, [pc, #20]	; (8000490 <ecSWTimerClk+0x24>)
 800047c:	5a52      	ldrh	r2, [r2, r1]
 800047e:	2a00      	cmp	r2, #0
 8000480:	d0f6      	beq.n	8000470 <ecSWTimerClk+0x4>
		{
			gSWTimer[TimerNr]--;
 8000482:	0059      	lsls	r1, r3, #1
 8000484:	3a01      	subs	r2, #1
 8000486:	4802      	ldr	r0, [pc, #8]	; (8000490 <ecSWTimerClk+0x24>)
 8000488:	520a      	strh	r2, [r1, r0]
 800048a:	e7f1      	b.n	8000470 <ecSWTimerClk+0x4>
		}
	}
}
 800048c:	4770      	bx	lr
 800048e:	46c0      	nop			; (mov r8, r8)
 8000490:	200000b4 	.word	0x200000b4

08000494 <ecLEDinit>:
  * param[out]		None
  * @retval 		None
  */
void ecLEDinit(void)
{
    gLED[LED_Pi].port =  LED_Pi_GPIO_Port;
 8000494:	4b06      	ldr	r3, [pc, #24]	; (80004b0 <ecLEDinit+0x1c>)
 8000496:	4a07      	ldr	r2, [pc, #28]	; (80004b4 <ecLEDinit+0x20>)
 8000498:	601a      	str	r2, [r3, #0]
	gLED[LED_Pi].pin = LED_Pi_Pin;
 800049a:	2180      	movs	r1, #128	; 0x80
 800049c:	8099      	strh	r1, [r3, #4]
    gLED[LED_Batt].port =  LED_Batt_GPIO_Port;
 800049e:	609a      	str	r2, [r3, #8]
    gLED[LED_Batt].pin = LED_Batt_Pin;
 80004a0:	2280      	movs	r2, #128	; 0x80
 80004a2:	0092      	lsls	r2, r2, #2
 80004a4:	819a      	strh	r2, [r3, #12]
    gLED[LED_Main].port =  LED_Main_GPIO_Port;
 80004a6:	4a04      	ldr	r2, [pc, #16]	; (80004b8 <ecLEDinit+0x24>)
 80004a8:	611a      	str	r2, [r3, #16]
    gLED[LED_Main].pin = LED_Main_Pin;
 80004aa:	4a04      	ldr	r2, [pc, #16]	; (80004bc <ecLEDinit+0x28>)
 80004ac:	829a      	strh	r2, [r3, #20]
//    gLED[LED_NUCLEO].port = LED_GPIO_Port;
//    gLED[LED_NUCLEO].pin = LED_Pin;
    /* ... let compiler set all globals to null*/
}
 80004ae:	4770      	bx	lr
 80004b0:	20000124 	.word	0x20000124
 80004b4:	50000400 	.word	0x50000400
 80004b8:	50000800 	.word	0x50000800
 80004bc:	ffff8000 	.word	0xffff8000

080004c0 <ecSetLED>:
  * @param[in]      blinkPeriod:    max 32s in ms. 0: LED_OFF, 0xFFFF: LED_ON
  * param[out]		None
  * @retval 		state of the requested LED
  */
uint8_t ecSetLED(eLED_t ledNbr, uint16_t blinkPeriod)
{
 80004c0:	b510      	push	{r4, lr}
 80004c2:	0004      	movs	r4, r0
  if(ledNbr < LED_COUNT)
 80004c4:	2803      	cmp	r0, #3
 80004c6:	d80e      	bhi.n	80004e6 <ecSetLED+0x26>
  {
      if(blinkPeriod == LED_ON)
 80004c8:	4b1b      	ldr	r3, [pc, #108]	; (8000538 <ecSetLED+0x78>)
 80004ca:	4299      	cmp	r1, r3
 80004cc:	d013      	beq.n	80004f6 <ecSetLED+0x36>
      {
           gBlinkChangeTime[ledNbr] = LED_ON; //prevents blinking
           gBlinkPeriod[ledNbr] = 0;
           HAL_GPIO_WritePin(gLED[ledNbr].port, gLED[ledNbr].pin,  GPIO_PIN_SET);
      } else if(blinkPeriod == LED_OFF)
 80004ce:	2900      	cmp	r1, #0
 80004d0:	d022      	beq.n	8000518 <ecSetLED+0x58>
          gBlinkChangeTime[ledNbr] = LED_OFF; //prevents blinking
          gBlinkPeriod[ledNbr] = 0;
          HAL_GPIO_WritePin(gLED[ledNbr].port, gLED[ledNbr].pin,  GPIO_PIN_RESET);
      }else
      {
          if(gBlinkPeriod[ledNbr] !=  blinkPeriod ) //do not overwrite if already set
 80004d2:	0043      	lsls	r3, r0, #1
 80004d4:	4a19      	ldr	r2, [pc, #100]	; (800053c <ecSetLED+0x7c>)
 80004d6:	5a9b      	ldrh	r3, [r3, r2]
 80004d8:	428b      	cmp	r3, r1
 80004da:	d004      	beq.n	80004e6 <ecSetLED+0x26>
          {
              gBlinkPeriod[ledNbr] = blinkPeriod;
 80004dc:	0043      	lsls	r3, r0, #1
 80004de:	5299      	strh	r1, [r3, r2]
              gBlinkChangeTime[ledNbr] = blinkPeriod / 2;
 80004e0:	0849      	lsrs	r1, r1, #1
 80004e2:	4a17      	ldr	r2, [pc, #92]	; (8000540 <ecSetLED+0x80>)
 80004e4:	5299      	strh	r1, [r3, r2]
          }
      }
  }
  return HAL_GPIO_ReadPin(gLED[ledNbr].port, gLED[ledNbr].pin);
 80004e6:	4b17      	ldr	r3, [pc, #92]	; (8000544 <ecSetLED+0x84>)
 80004e8:	00e4      	lsls	r4, r4, #3
 80004ea:	191a      	adds	r2, r3, r4
 80004ec:	8891      	ldrh	r1, [r2, #4]
 80004ee:	58e0      	ldr	r0, [r4, r3]
 80004f0:	f002 fa36 	bl	8002960 <HAL_GPIO_ReadPin>
}
 80004f4:	bd10      	pop	{r4, pc}
           gBlinkChangeTime[ledNbr] = LED_ON; //prevents blinking
 80004f6:	0043      	lsls	r3, r0, #1
 80004f8:	4a11      	ldr	r2, [pc, #68]	; (8000540 <ecSetLED+0x80>)
 80004fa:	2101      	movs	r1, #1
 80004fc:	4249      	negs	r1, r1
 80004fe:	5299      	strh	r1, [r3, r2]
           gBlinkPeriod[ledNbr] = 0;
 8000500:	4a0e      	ldr	r2, [pc, #56]	; (800053c <ecSetLED+0x7c>)
 8000502:	2100      	movs	r1, #0
 8000504:	5299      	strh	r1, [r3, r2]
           HAL_GPIO_WritePin(gLED[ledNbr].port, gLED[ledNbr].pin,  GPIO_PIN_SET);
 8000506:	4b0f      	ldr	r3, [pc, #60]	; (8000544 <ecSetLED+0x84>)
 8000508:	00c2      	lsls	r2, r0, #3
 800050a:	1899      	adds	r1, r3, r2
 800050c:	8889      	ldrh	r1, [r1, #4]
 800050e:	58d0      	ldr	r0, [r2, r3]
 8000510:	2201      	movs	r2, #1
 8000512:	f002 fa2c 	bl	800296e <HAL_GPIO_WritePin>
 8000516:	e7e6      	b.n	80004e6 <ecSetLED+0x26>
          gBlinkChangeTime[ledNbr] = LED_OFF; //prevents blinking
 8000518:	0043      	lsls	r3, r0, #1
 800051a:	2200      	movs	r2, #0
 800051c:	4908      	ldr	r1, [pc, #32]	; (8000540 <ecSetLED+0x80>)
 800051e:	525a      	strh	r2, [r3, r1]
          gBlinkPeriod[ledNbr] = 0;
 8000520:	4906      	ldr	r1, [pc, #24]	; (800053c <ecSetLED+0x7c>)
 8000522:	525a      	strh	r2, [r3, r1]
          HAL_GPIO_WritePin(gLED[ledNbr].port, gLED[ledNbr].pin,  GPIO_PIN_RESET);
 8000524:	4b07      	ldr	r3, [pc, #28]	; (8000544 <ecSetLED+0x84>)
 8000526:	00c2      	lsls	r2, r0, #3
 8000528:	1899      	adds	r1, r3, r2
 800052a:	8889      	ldrh	r1, [r1, #4]
 800052c:	58d0      	ldr	r0, [r2, r3]
 800052e:	2200      	movs	r2, #0
 8000530:	f002 fa1d 	bl	800296e <HAL_GPIO_WritePin>
 8000534:	e7d7      	b.n	80004e6 <ecSetLED+0x26>
 8000536:	46c0      	nop			; (mov r8, r8)
 8000538:	0000ffff 	.word	0x0000ffff
 800053c:	20000158 	.word	0x20000158
 8000540:	20000190 	.word	0x20000190
 8000544:	20000124 	.word	0x20000124

08000548 <ecBlinkHandler>:
  * @param[in]		*htim
  * param[out]		None
  * @retval 		None
  */
void ecBlinkHandler(void)
{
 8000548:	b570      	push	{r4, r5, r6, lr}
    eLED_t ledNbr;
    for(ledNbr = 0; ledNbr < LED_COUNT; ledNbr++)
 800054a:	2400      	movs	r4, #0
 800054c:	e00e      	b.n	800056c <ecBlinkHandler+0x24>
        if((gBlinkChangeTime[ledNbr] > 0) && (gBlinkChangeTime[ledNbr] < 0xFFFF))
        {
            gBlinkChangeTime[ledNbr] --;
            if(gBlinkChangeTime[ledNbr] == 1)
            {
                HAL_GPIO_TogglePin(gLED[ledNbr].port, gLED[ledNbr].pin);
 800054e:	4b10      	ldr	r3, [pc, #64]	; (8000590 <ecBlinkHandler+0x48>)
 8000550:	00e2      	lsls	r2, r4, #3
 8000552:	1899      	adds	r1, r3, r2
 8000554:	8889      	ldrh	r1, [r1, #4]
 8000556:	58d0      	ldr	r0, [r2, r3]
 8000558:	f002 fa0f 	bl	800297a <HAL_GPIO_TogglePin>
                gBlinkChangeTime[ledNbr] = gBlinkPeriod[ledNbr] / 2;
 800055c:	0065      	lsls	r5, r4, #1
 800055e:	4b0d      	ldr	r3, [pc, #52]	; (8000594 <ecBlinkHandler+0x4c>)
 8000560:	5aeb      	ldrh	r3, [r5, r3]
 8000562:	085b      	lsrs	r3, r3, #1
 8000564:	4a0c      	ldr	r2, [pc, #48]	; (8000598 <ecBlinkHandler+0x50>)
 8000566:	52ab      	strh	r3, [r5, r2]
    for(ledNbr = 0; ledNbr < LED_COUNT; ledNbr++)
 8000568:	3401      	adds	r4, #1
 800056a:	b2e4      	uxtb	r4, r4
 800056c:	2c03      	cmp	r4, #3
 800056e:	d80d      	bhi.n	800058c <ecBlinkHandler+0x44>
        if((gBlinkChangeTime[ledNbr] > 0) && (gBlinkChangeTime[ledNbr] < 0xFFFF))
 8000570:	0063      	lsls	r3, r4, #1
 8000572:	4a09      	ldr	r2, [pc, #36]	; (8000598 <ecBlinkHandler+0x50>)
 8000574:	5a9b      	ldrh	r3, [r3, r2]
 8000576:	3b01      	subs	r3, #1
 8000578:	b29b      	uxth	r3, r3
 800057a:	4a08      	ldr	r2, [pc, #32]	; (800059c <ecBlinkHandler+0x54>)
 800057c:	4293      	cmp	r3, r2
 800057e:	d8f3      	bhi.n	8000568 <ecBlinkHandler+0x20>
            gBlinkChangeTime[ledNbr] --;
 8000580:	0062      	lsls	r2, r4, #1
 8000582:	4905      	ldr	r1, [pc, #20]	; (8000598 <ecBlinkHandler+0x50>)
 8000584:	5253      	strh	r3, [r2, r1]
            if(gBlinkChangeTime[ledNbr] == 1)
 8000586:	2b01      	cmp	r3, #1
 8000588:	d1ee      	bne.n	8000568 <ecBlinkHandler+0x20>
 800058a:	e7e0      	b.n	800054e <ecBlinkHandler+0x6>
            }
        }
    }
}
 800058c:	bd70      	pop	{r4, r5, r6, pc}
 800058e:	46c0      	nop			; (mov r8, r8)
 8000590:	20000124 	.word	0x20000124
 8000594:	20000158 	.word	0x20000158
 8000598:	20000190 	.word	0x20000190
 800059c:	0000fffd 	.word	0x0000fffd

080005a0 <ecGetCPUTemp>:
 * Works without TS_CAL2, because this is not mentioned in the datasheets of STM32G030 and g070.
 * Even with using TS_CAL2 from STM32g031 / g071 you do possibly not get better results
 *
*/
uint16_t ecGetCPUTemp(uint16_t ADCvalue)
{
 80005a0:	b510      	push	{r4, lr}
 80005a2:	0004      	movs	r4, r0
    uint32_t cal30;
    int16_t temp_10d1;  //resulting temperature
    int32_t adc_0;

    /* calc 30°C reference using VDDA 3.3V */
    cal30 = (TEMP30_CAL * VREF_CAL_10d1 /  VDDA_10d1);                  //ADC at 30° @ VDDA = 3.3V
 80005a4:	4b07      	ldr	r3, [pc, #28]	; (80005c4 <ecGetCPUTemp+0x24>)
 80005a6:	881b      	ldrh	r3, [r3, #0]
 80005a8:	0118      	lsls	r0, r3, #4
 80005aa:	1ac0      	subs	r0, r0, r3
 80005ac:	0040      	lsls	r0, r0, #1
 80005ae:	2121      	movs	r1, #33	; 0x21
 80005b0:	f7ff fe42 	bl	8000238 <__divsi3>

    /* calc ADC value @ 0°C using typical TS slope from datasheet */
    adc_0 =  cal30 - ((REF_TEMP * SLOPE_Y << 12) / VDDA_10d1) / 1000;   //calculate offset @ 0°C
 80005b4:	385d      	subs	r0, #93	; 0x5d

    /* calculate temperature based on TS offset @ 0°C */
    temp_10d1 = (ADCvalue - adc_0) * ((SLOPE_Y_INV * VDDA_10d1) >> 12) / 10;
 80005b6:	1a20      	subs	r0, r4, r0
 80005b8:	0140      	lsls	r0, r0, #5
 80005ba:	210a      	movs	r1, #10
 80005bc:	f7ff fe3c 	bl	8000238 <__divsi3>

    // original formula needs float temp = ((130-30)/(TS_CAL2 - TS_CAL1)) * (TS_DATA * TS_CAL1) + 30
    return temp_10d1;
 80005c0:	b280      	uxth	r0, r0
}
 80005c2:	bd10      	pop	{r4, pc}
 80005c4:	1fff75a8 	.word	0x1fff75a8

080005c8 <ecPortHandleFeedback>:
  * @param[in]  actual Pi state
  * @param[out] new Pi state
  * @retval     None
*/
ePiState_t ecPortHandleFeedback(eKeyPress_t keyPress, ePiState_t piState)
{
 80005c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005ca:	0006      	movs	r6, r0
 80005cc:	1e0d      	subs	r5, r1, #0
    ePiState_t old_piState;
    ePiPortState_t piPortState;
    static ePiPortState_t old_piPortState;

    old_piState = piState;
    if(piState == PI_STATE_UNKNOWN)
 80005ce:	d102      	bne.n	80005d6 <ecPortHandleFeedback+0xe>
        old_piPortState = 0xff;
 80005d0:	4b81      	ldr	r3, [pc, #516]	; (80007d8 <ecPortHandleFeedback+0x210>)
 80005d2:	22ff      	movs	r2, #255	; 0xff
 80005d4:	701a      	strb	r2, [r3, #0]

    /* read both ports in order to evaluate the general state of pi */
    piACK_Port = HAL_GPIO_ReadPin(ACK_IN_GPIO_Port , ACK_IN_Pin);
 80005d6:	2180      	movs	r1, #128	; 0x80
 80005d8:	24a0      	movs	r4, #160	; 0xa0
 80005da:	05e4      	lsls	r4, r4, #23
 80005dc:	0149      	lsls	r1, r1, #5
 80005de:	0020      	movs	r0, r4
 80005e0:	f002 f9be 	bl	8002960 <HAL_GPIO_ReadPin>
 80005e4:	0007      	movs	r7, r0
    piCMD_Port = HAL_GPIO_ReadPin(CMD_OUT_GPIO_Port, CMD_OUT_Pin);
 80005e6:	2180      	movs	r1, #128	; 0x80
 80005e8:	0109      	lsls	r1, r1, #4
 80005ea:	0020      	movs	r0, r4
 80005ec:	f002 f9b8 	bl	8002960 <HAL_GPIO_ReadPin>
 80005f0:	1e02      	subs	r2, r0, #0
    if (piCMD_Port) //check if no spike on this line during startup
 80005f2:	d114      	bne.n	800061e <ecPortHandleFeedback+0x56>
        ecSWTimerStart(DELAY_TIMER,10);
        while(ecSWTimerRead(DELAY_TIMER)); // wait
        piCMD_Port = HAL_GPIO_ReadPin(CMD_OUT_GPIO_Port, CMD_OUT_Pin);
    }

    piPortState = piACK_Port + (piCMD_Port << 1);
 80005f4:	0054      	lsls	r4, r2, #1
 80005f6:	b2e4      	uxtb	r4, r4
 80005f8:	19e4      	adds	r4, r4, r7
 80005fa:	b2e4      	uxtb	r4, r4

    if(keyPress == KEY_NO_PRESS) //supress port changes caused by command
 80005fc:	2e00      	cmp	r6, #0
 80005fe:	d103      	bne.n	8000608 <ecPortHandleFeedback+0x40>
    {
        if(piPortState != old_piPortState)
 8000600:	4b75      	ldr	r3, [pc, #468]	; (80007d8 <ecPortHandleFeedback+0x210>)
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	42a3      	cmp	r3, r4
 8000606:	d11b      	bne.n	8000640 <ecPortHandleFeedback+0x78>
        {
            sprintf(strMessage, "CMD % d ACK %d \r\n",piCMD_Port, piACK_Port );
            old_piPortState = piPortState;
        }
    }
    switch(piPortState)
 8000608:	2c02      	cmp	r4, #2
 800060a:	d05f      	beq.n	80006cc <ecPortHandleFeedback+0x104>
 800060c:	d822      	bhi.n	8000654 <ecPortHandleFeedback+0x8c>
 800060e:	2c00      	cmp	r4, #0
 8000610:	d036      	beq.n	8000680 <ecPortHandleFeedback+0xb8>
 8000612:	2c01      	cmp	r4, #1
 8000614:	d11c      	bne.n	8000650 <ecPortHandleFeedback+0x88>
             }
             break;

        case CMD0_ACK1:

            if(keyPress == KEY_PENDING)
 8000616:	2e01      	cmp	r6, #1
 8000618:	d051      	beq.n	80006be <ecPortHandleFeedback+0xf6>
 800061a:	002c      	movs	r4, r5
 800061c:	e02b      	b.n	8000676 <ecPortHandleFeedback+0xae>
        ecSWTimerStart(DELAY_TIMER,10);
 800061e:	210a      	movs	r1, #10
 8000620:	2000      	movs	r0, #0
 8000622:	f7ff ff03 	bl	800042c <ecSWTimerStart>
        while(ecSWTimerRead(DELAY_TIMER)); // wait
 8000626:	2000      	movs	r0, #0
 8000628:	f7ff ff0e 	bl	8000448 <ecSWTimerRead>
 800062c:	2800      	cmp	r0, #0
 800062e:	d1fa      	bne.n	8000626 <ecPortHandleFeedback+0x5e>
        piCMD_Port = HAL_GPIO_ReadPin(CMD_OUT_GPIO_Port, CMD_OUT_Pin);
 8000630:	2180      	movs	r1, #128	; 0x80
 8000632:	30a0      	adds	r0, #160	; 0xa0
 8000634:	0109      	lsls	r1, r1, #4
 8000636:	05c0      	lsls	r0, r0, #23
 8000638:	f002 f992 	bl	8002960 <HAL_GPIO_ReadPin>
 800063c:	0002      	movs	r2, r0
 800063e:	e7d9      	b.n	80005f4 <ecPortHandleFeedback+0x2c>
            sprintf(strMessage, "CMD % d ACK %d \r\n",piCMD_Port, piACK_Port );
 8000640:	003b      	movs	r3, r7
 8000642:	4966      	ldr	r1, [pc, #408]	; (80007dc <ecPortHandleFeedback+0x214>)
 8000644:	4866      	ldr	r0, [pc, #408]	; (80007e0 <ecPortHandleFeedback+0x218>)
 8000646:	f003 fa99 	bl	8003b7c <siprintf>
            old_piPortState = piPortState;
 800064a:	4b63      	ldr	r3, [pc, #396]	; (80007d8 <ecPortHandleFeedback+0x210>)
 800064c:	701c      	strb	r4, [r3, #0]
 800064e:	e7db      	b.n	8000608 <ecPortHandleFeedback+0x40>
    switch(piPortState)
 8000650:	002c      	movs	r4, r5
 8000652:	e010      	b.n	8000676 <ecPortHandleFeedback+0xae>
 8000654:	2c03      	cmp	r4, #3
 8000656:	d10d      	bne.n	8000674 <ecPortHandleFeedback+0xac>
                    break;

            }
            break;
        case CMD1_ACK1:
            sprintf(strMessage, "RUNNING\r\n");
 8000658:	220a      	movs	r2, #10
 800065a:	4962      	ldr	r1, [pc, #392]	; (80007e4 <ecPortHandleFeedback+0x21c>)
 800065c:	4860      	ldr	r0, [pc, #384]	; (80007e0 <ecPortHandleFeedback+0x218>)
 800065e:	f003 fa47 	bl	8003af0 <memcpy>
            piState = PI_RUNNING;
            ////ecSetLED(LED_NUCLEO, LED_ON);
            ecSetLED(LED_Pi, LED_ON);       //signal Pi ready
 8000662:	4961      	ldr	r1, [pc, #388]	; (80007e8 <ecPortHandleFeedback+0x220>)
 8000664:	2000      	movs	r0, #0
 8000666:	f7ff ff2b 	bl	80004c0 <ecSetLED>

            if(keyPress == KEY_SUPER_LONG_PRESS)
 800066a:	2e04      	cmp	r6, #4
 800066c:	d100      	bne.n	8000670 <ecPortHandleFeedback+0xa8>
 800066e:	e0a3      	b.n	80007b8 <ecPortHandleFeedback+0x1f0>
            piState = PI_RUNNING;
 8000670:	2401      	movs	r4, #1
 8000672:	e000      	b.n	8000676 <ecPortHandleFeedback+0xae>
    switch(piPortState)
 8000674:	002c      	movs	r4, r5
                preparePiPower_off = 1; //prepare power OFF after standby

            break;
    }

    if(piState != old_piState)
 8000676:	42ac      	cmp	r4, r5
 8000678:	d000      	beq.n	800067c <ecPortHandleFeedback+0xb4>
 800067a:	e0a4      	b.n	80007c6 <ecPortHandleFeedback+0x1fe>
    {
        ecTxString(strMessage, strlen(strMessage));

    }
    return piState;
}
 800067c:	0020      	movs	r0, r4
 800067e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
             if(keyPress == KEY_SHORT_PRESS) //toggle Pi power to get it restarted
 8000680:	2e02      	cmp	r6, #2
 8000682:	d001      	beq.n	8000688 <ecPortHandleFeedback+0xc0>
 8000684:	002c      	movs	r4, r5
 8000686:	e7f6      	b.n	8000676 <ecPortHandleFeedback+0xae>
                 HAL_GPIO_WritePin(EN_5V_GPIO_Port,  EN_5V_Pin, GPIO_PIN_RESET); //5V enable = low: power OFF
 8000688:	20a0      	movs	r0, #160	; 0xa0
 800068a:	2200      	movs	r2, #0
 800068c:	2101      	movs	r1, #1
 800068e:	05c0      	lsls	r0, r0, #23
 8000690:	f002 f96d 	bl	800296e <HAL_GPIO_WritePin>
                 ecSWTimerStart(DELAY_TIMER,200);
 8000694:	21c8      	movs	r1, #200	; 0xc8
 8000696:	2000      	movs	r0, #0
 8000698:	f7ff fec8 	bl	800042c <ecSWTimerStart>
                 while(ecSWTimerRead(DELAY_TIMER)); // wait
 800069c:	2000      	movs	r0, #0
 800069e:	f7ff fed3 	bl	8000448 <ecSWTimerRead>
 80006a2:	2800      	cmp	r0, #0
 80006a4:	d1fa      	bne.n	800069c <ecPortHandleFeedback+0xd4>
                 HAL_GPIO_WritePin(EN_5V_GPIO_Port,  EN_5V_Pin, GPIO_PIN_SET); //5V enable = high: power ON
 80006a6:	30a0      	adds	r0, #160	; 0xa0
 80006a8:	2201      	movs	r2, #1
 80006aa:	2101      	movs	r1, #1
 80006ac:	05c0      	lsls	r0, r0, #23
 80006ae:	f002 f95e 	bl	800296e <HAL_GPIO_WritePin>
                 ecSetLED(LED_Pi, 150);
 80006b2:	2196      	movs	r1, #150	; 0x96
 80006b4:	2000      	movs	r0, #0
 80006b6:	f7ff ff03 	bl	80004c0 <ecSetLED>
 80006ba:	002c      	movs	r4, r5
 80006bc:	e7db      	b.n	8000676 <ecPortHandleFeedback+0xae>
                ecSetLED(LED_Pi, 1000);            //signal key press
 80006be:	21fa      	movs	r1, #250	; 0xfa
 80006c0:	0089      	lsls	r1, r1, #2
 80006c2:	2000      	movs	r0, #0
 80006c4:	f7ff fefc 	bl	80004c0 <ecSetLED>
 80006c8:	002c      	movs	r4, r5
 80006ca:	e7d4      	b.n	8000676 <ecPortHandleFeedback+0xae>
            switch(piState)
 80006cc:	2d05      	cmp	r5, #5
 80006ce:	d878      	bhi.n	80007c2 <ecPortHandleFeedback+0x1fa>
 80006d0:	00ab      	lsls	r3, r5, #2
 80006d2:	4a46      	ldr	r2, [pc, #280]	; (80007ec <ecPortHandleFeedback+0x224>)
 80006d4:	58d3      	ldr	r3, [r2, r3]
 80006d6:	469f      	mov	pc, r3
                    sprintf(strMessage, "Pi Shutting down\r\n");
 80006d8:	2213      	movs	r2, #19
 80006da:	4945      	ldr	r1, [pc, #276]	; (80007f0 <ecPortHandleFeedback+0x228>)
 80006dc:	4840      	ldr	r0, [pc, #256]	; (80007e0 <ecPortHandleFeedback+0x218>)
 80006de:	f003 fa07 	bl	8003af0 <memcpy>
                    ecSetLED(LED_Pi, 250);
 80006e2:	21fa      	movs	r1, #250	; 0xfa
 80006e4:	2000      	movs	r0, #0
 80006e6:	f7ff feeb 	bl	80004c0 <ecSetLED>
                    ecSWTimerStart(MESSAGE_TIMER, 2000);
 80006ea:	21fa      	movs	r1, #250	; 0xfa
 80006ec:	00c9      	lsls	r1, r1, #3
 80006ee:	2002      	movs	r0, #2
 80006f0:	f7ff fe9c 	bl	800042c <ecSWTimerStart>
                    break;
 80006f4:	e7bf      	b.n	8000676 <ecPortHandleFeedback+0xae>
                    if(keyPress == KEY_SHORT_PRESS) //toggle Pi power to get it restarted
 80006f6:	2e02      	cmp	r6, #2
 80006f8:	d005      	beq.n	8000706 <ecPortHandleFeedback+0x13e>
                    if(preparePiPower_off)
 80006fa:	4b3e      	ldr	r3, [pc, #248]	; (80007f4 <ecPortHandleFeedback+0x22c>)
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d11b      	bne.n	800073a <ecPortHandleFeedback+0x172>
 8000702:	002c      	movs	r4, r5
 8000704:	e7b7      	b.n	8000676 <ecPortHandleFeedback+0xae>
                        HAL_GPIO_WritePin(EN_5V_GPIO_Port,  EN_5V_Pin, GPIO_PIN_RESET); //5V enable = low: power OFF
 8000706:	20a0      	movs	r0, #160	; 0xa0
 8000708:	2200      	movs	r2, #0
 800070a:	2101      	movs	r1, #1
 800070c:	05c0      	lsls	r0, r0, #23
 800070e:	f002 f92e 	bl	800296e <HAL_GPIO_WritePin>
                        ecSWTimerStart(DELAY_TIMER,200);
 8000712:	21c8      	movs	r1, #200	; 0xc8
 8000714:	2000      	movs	r0, #0
 8000716:	f7ff fe89 	bl	800042c <ecSWTimerStart>
                        while(ecSWTimerRead(DELAY_TIMER)); // wait
 800071a:	2000      	movs	r0, #0
 800071c:	f7ff fe94 	bl	8000448 <ecSWTimerRead>
 8000720:	2800      	cmp	r0, #0
 8000722:	d1fa      	bne.n	800071a <ecPortHandleFeedback+0x152>
                        HAL_GPIO_WritePin(EN_5V_GPIO_Port,  EN_5V_Pin, GPIO_PIN_SET); //5V enable = high: power ON
 8000724:	30a0      	adds	r0, #160	; 0xa0
 8000726:	2201      	movs	r2, #1
 8000728:	2101      	movs	r1, #1
 800072a:	05c0      	lsls	r0, r0, #23
 800072c:	f002 f91f 	bl	800296e <HAL_GPIO_WritePin>
                        ecSetLED(LED_Pi, 150);
 8000730:	2196      	movs	r1, #150	; 0x96
 8000732:	2000      	movs	r0, #0
 8000734:	f7ff fec4 	bl	80004c0 <ecSetLED>
 8000738:	e7df      	b.n	80006fa <ecPortHandleFeedback+0x132>
                         ecSWTimerStart(DELAY_TIMER,3000);
 800073a:	492f      	ldr	r1, [pc, #188]	; (80007f8 <ecPortHandleFeedback+0x230>)
 800073c:	2000      	movs	r0, #0
 800073e:	f7ff fe75 	bl	800042c <ecSWTimerStart>
                         while(ecSWTimerRead(DELAY_TIMER)); //safety  wait, because no information on shutdown finished
 8000742:	2000      	movs	r0, #0
 8000744:	f7ff fe80 	bl	8000448 <ecSWTimerRead>
 8000748:	2800      	cmp	r0, #0
 800074a:	d1fa      	bne.n	8000742 <ecPortHandleFeedback+0x17a>
                         sprintf(strMessage, "Pi Power OFF\r\n");
 800074c:	220f      	movs	r2, #15
 800074e:	492b      	ldr	r1, [pc, #172]	; (80007fc <ecPortHandleFeedback+0x234>)
 8000750:	4823      	ldr	r0, [pc, #140]	; (80007e0 <ecPortHandleFeedback+0x218>)
 8000752:	f003 f9cd 	bl	8003af0 <memcpy>
                         HAL_GPIO_WritePin(EN_5V_GPIO_Port,  EN_5V_Pin, GPIO_PIN_RESET); //5V enable = low = OFF
 8000756:	20a0      	movs	r0, #160	; 0xa0
 8000758:	2200      	movs	r2, #0
 800075a:	2101      	movs	r1, #1
 800075c:	05c0      	lsls	r0, r0, #23
 800075e:	f002 f906 	bl	800296e <HAL_GPIO_WritePin>
                         preparePiPower_off = 0;
 8000762:	4b24      	ldr	r3, [pc, #144]	; (80007f4 <ecPortHandleFeedback+0x22c>)
 8000764:	2200      	movs	r2, #0
 8000766:	701a      	strb	r2, [r3, #0]
                         ecSWTimerStart(DELAY_TIMER,1000);
 8000768:	21fa      	movs	r1, #250	; 0xfa
 800076a:	0089      	lsls	r1, r1, #2
 800076c:	2000      	movs	r0, #0
 800076e:	f7ff fe5d 	bl	800042c <ecSWTimerStart>
                         while(ecSWTimerRead(DELAY_TIMER)); //wait for CMD and ACK lines falling to 0
 8000772:	2000      	movs	r0, #0
 8000774:	f7ff fe68 	bl	8000448 <ecSWTimerRead>
 8000778:	2800      	cmp	r0, #0
 800077a:	d1fa      	bne.n	8000772 <ecPortHandleFeedback+0x1aa>
                         piState = PI_PWR_OFF;
 800077c:	2405      	movs	r4, #5
 800077e:	e77a      	b.n	8000676 <ecPortHandleFeedback+0xae>
                    sprintf(strMessage, "Pi PWR_ON and starting up\r\n");
 8000780:	221c      	movs	r2, #28
 8000782:	491f      	ldr	r1, [pc, #124]	; (8000800 <ecPortHandleFeedback+0x238>)
 8000784:	4816      	ldr	r0, [pc, #88]	; (80007e0 <ecPortHandleFeedback+0x218>)
 8000786:	f003 f9b3 	bl	8003af0 <memcpy>
                    ecSetLED(LED_Pi, 150);
 800078a:	2196      	movs	r1, #150	; 0x96
 800078c:	2000      	movs	r0, #0
 800078e:	f7ff fe97 	bl	80004c0 <ecSetLED>
                    piState = PI_STARTING_UP;
 8000792:	2403      	movs	r4, #3
                    break;
 8000794:	e76f      	b.n	8000676 <ecPortHandleFeedback+0xae>
                    if(ecSWTimerRead(MESSAGE_TIMER) == 0)
 8000796:	2002      	movs	r0, #2
 8000798:	f7ff fe56 	bl	8000448 <ecSWTimerRead>
 800079c:	2800      	cmp	r0, #0
 800079e:	d001      	beq.n	80007a4 <ecPortHandleFeedback+0x1dc>
 80007a0:	002c      	movs	r4, r5
 80007a2:	e768      	b.n	8000676 <ecPortHandleFeedback+0xae>
                         ecSetLED(LED_Pi, LED_OFF);
 80007a4:	2100      	movs	r1, #0
 80007a6:	f7ff fe8b 	bl	80004c0 <ecSetLED>
                         sprintf(strMessage, "Pi standby\r\n");
 80007aa:	220d      	movs	r2, #13
 80007ac:	4915      	ldr	r1, [pc, #84]	; (8000804 <ecPortHandleFeedback+0x23c>)
 80007ae:	480c      	ldr	r0, [pc, #48]	; (80007e0 <ecPortHandleFeedback+0x218>)
 80007b0:	f003 f99e 	bl	8003af0 <memcpy>
                         piState = PI_STBY;
 80007b4:	2404      	movs	r4, #4
 80007b6:	e75e      	b.n	8000676 <ecPortHandleFeedback+0xae>
                preparePiPower_off = 1; //prepare power OFF after standby
 80007b8:	4b0e      	ldr	r3, [pc, #56]	; (80007f4 <ecPortHandleFeedback+0x22c>)
 80007ba:	2201      	movs	r2, #1
 80007bc:	701a      	strb	r2, [r3, #0]
            piState = PI_RUNNING;
 80007be:	2401      	movs	r4, #1
 80007c0:	e759      	b.n	8000676 <ecPortHandleFeedback+0xae>
    switch(piPortState)
 80007c2:	002c      	movs	r4, r5
 80007c4:	e757      	b.n	8000676 <ecPortHandleFeedback+0xae>
        ecTxString(strMessage, strlen(strMessage));
 80007c6:	4d06      	ldr	r5, [pc, #24]	; (80007e0 <ecPortHandleFeedback+0x218>)
 80007c8:	0028      	movs	r0, r5
 80007ca:	f7ff fc99 	bl	8000100 <strlen>
 80007ce:	b2c1      	uxtb	r1, r0
 80007d0:	0028      	movs	r0, r5
 80007d2:	f000 fb65 	bl	8000ea0 <ecTxString>
 80007d6:	e751      	b.n	800067c <ecPortHandleFeedback+0xb4>
 80007d8:	2000008e 	.word	0x2000008e
 80007dc:	080043f4 	.word	0x080043f4
 80007e0:	200001ac 	.word	0x200001ac
 80007e4:	08004458 	.word	0x08004458
 80007e8:	0000ffff 	.word	0x0000ffff
 80007ec:	08004464 	.word	0x08004464
 80007f0:	08004408 	.word	0x08004408
 80007f4:	2000008f 	.word	0x2000008f
 80007f8:	00000bb8 	.word	0x00000bb8
 80007fc:	0800441c 	.word	0x0800441c
 8000800:	0800442c 	.word	0x0800442c
 8000804:	08004448 	.word	0x08004448

08000808 <ecPortExecCommand>:

Long and Superlong button is directly passed via GPIO and serial port.
Short and double click will be compressed and sent as pulses to port.
*/
int ecPortExecCommand(eKeyPress_t keyPress)
{
 8000808:	b510      	push	{r4, lr}

    static eKeyPress_t lastCmd;
    static uint8_t doubleCounter;
    switch(keyPress)
 800080a:	2805      	cmp	r0, #5
 800080c:	d80e      	bhi.n	800082c <ecPortExecCommand+0x24>
 800080e:	0080      	lsls	r0, r0, #2
 8000810:	4b56      	ldr	r3, [pc, #344]	; (800096c <ecPortExecCommand+0x164>)
 8000812:	581b      	ldr	r3, [r3, r0]
 8000814:	469f      	mov	pc, r3
//              if(ecSWTimerRead(MESSAGE_TIMER) == 0)
//              {
//                  HAL_UART_Transmit(&g_huart2, (uint8_t *)"KEY pending\r\n", 13, 20);
//                  ecSWTimerStart(MESSAGE_TIMER, 500);
//              }
              ecSWTimerStart(KEY_TIMER, PORT_SHORT_PULSE); //set minimum pulse time
 8000816:	2164      	movs	r1, #100	; 0x64
 8000818:	2001      	movs	r0, #1
 800081a:	f7ff fe07 	bl	800042c <ecSWTimerStart>
              HAL_GPIO_WritePin(CMD_OUT_GPIO_Port,  CMD_OUT_Pin, GPIO_PIN_RESET);
 800081e:	2180      	movs	r1, #128	; 0x80
 8000820:	20a0      	movs	r0, #160	; 0xa0
 8000822:	2200      	movs	r2, #0
 8000824:	0109      	lsls	r1, r1, #4
 8000826:	05c0      	lsls	r0, r0, #23
 8000828:	f002 f8a1 	bl	800296e <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(CMD_OUT_GPIO_Port,  CMD_OUT_Pin, GPIO_PIN_SET);
              break;
          default:
              break;
      }
      if(lastCmd != keyPress)
 800082c:	4b50      	ldr	r3, [pc, #320]	; (8000970 <ecPortExecCommand+0x168>)
 800082e:	781b      	ldrb	r3, [r3, #0]
      {
      }


      if(lastCmd == KEY_SHORT_PRESS)
 8000830:	2b02      	cmp	r3, #2
 8000832:	d068      	beq.n	8000906 <ecPortExecCommand+0xfe>
          {
              HAL_GPIO_WritePin(CMD_OUT_GPIO_Port,  CMD_OUT_Pin, GPIO_PIN_SET);
              lastCmd = 0;
          }
      }
      if(lastCmd == KEY_DOUBLE_PRESS)
 8000834:	4b4e      	ldr	r3, [pc, #312]	; (8000970 <ecPortExecCommand+0x168>)
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	2b05      	cmp	r3, #5
 800083a:	d100      	bne.n	800083e <ecPortExecCommand+0x36>
 800083c:	e074      	b.n	8000928 <ecPortExecCommand+0x120>
              lastCmd = 0;
              doubleCounter = 0;
          }
      }

      if(ecSWTimerRead(KEY_TIMER) == 0)
 800083e:	2001      	movs	r0, #1
 8000840:	f7ff fe02 	bl	8000448 <ecSWTimerRead>
 8000844:	2800      	cmp	r0, #0
 8000846:	d000      	beq.n	800084a <ecPortExecCommand+0x42>
 8000848:	e08d      	b.n	8000966 <ecPortExecCommand+0x15e>
          return 1;
 800084a:	3001      	adds	r0, #1
      else
          return 0;
}
 800084c:	bd10      	pop	{r4, pc}
              sprintf(strMessage, "Pi power ON\n");
 800084e:	4c49      	ldr	r4, [pc, #292]	; (8000974 <ecPortExecCommand+0x16c>)
 8000850:	220d      	movs	r2, #13
 8000852:	4949      	ldr	r1, [pc, #292]	; (8000978 <ecPortExecCommand+0x170>)
 8000854:	0020      	movs	r0, r4
 8000856:	f003 f94b 	bl	8003af0 <memcpy>
              ecTxString(strMessage, strlen(strMessage));
 800085a:	0020      	movs	r0, r4
 800085c:	f7ff fc50 	bl	8000100 <strlen>
 8000860:	b2c1      	uxtb	r1, r0
 8000862:	0020      	movs	r0, r4
 8000864:	f000 fb1c 	bl	8000ea0 <ecTxString>
              HAL_GPIO_WritePin(EN_5V_GPIO_Port,  EN_5V_Pin, GPIO_PIN_SET); //5V enable = high = ON
 8000868:	20a0      	movs	r0, #160	; 0xa0
 800086a:	2201      	movs	r2, #1
 800086c:	2101      	movs	r1, #1
 800086e:	05c0      	lsls	r0, r0, #23
 8000870:	f002 f87d 	bl	800296e <HAL_GPIO_WritePin>
              lastCmd = KEY_SHORT_PRESS; //used later for CMD_OUT_Pin pulse
 8000874:	4b3e      	ldr	r3, [pc, #248]	; (8000970 <ecPortExecCommand+0x168>)
 8000876:	2202      	movs	r2, #2
 8000878:	701a      	strb	r2, [r3, #0]
              break;
 800087a:	e7d7      	b.n	800082c <ecPortExecCommand+0x24>
              sprintf(strMessage, "shutdown -r now\n");
 800087c:	4c3d      	ldr	r4, [pc, #244]	; (8000974 <ecPortExecCommand+0x16c>)
 800087e:	2211      	movs	r2, #17
 8000880:	493e      	ldr	r1, [pc, #248]	; (800097c <ecPortExecCommand+0x174>)
 8000882:	0020      	movs	r0, r4
 8000884:	f003 f934 	bl	8003af0 <memcpy>
              ecTxString(strMessage, strlen(strMessage));
 8000888:	0020      	movs	r0, r4
 800088a:	f7ff fc39 	bl	8000100 <strlen>
 800088e:	b2c1      	uxtb	r1, r0
 8000890:	0020      	movs	r0, r4
 8000892:	f000 fb05 	bl	8000ea0 <ecTxString>
              HAL_GPIO_WritePin(CMD_OUT_GPIO_Port,  CMD_OUT_Pin, GPIO_PIN_RESET);
 8000896:	2180      	movs	r1, #128	; 0x80
 8000898:	20a0      	movs	r0, #160	; 0xa0
 800089a:	2200      	movs	r2, #0
 800089c:	0109      	lsls	r1, r1, #4
 800089e:	05c0      	lsls	r0, r0, #23
 80008a0:	f002 f865 	bl	800296e <HAL_GPIO_WritePin>
              doubleCounter = 0;
 80008a4:	4b36      	ldr	r3, [pc, #216]	; (8000980 <ecPortExecCommand+0x178>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	701a      	strb	r2, [r3, #0]
              lastCmd = KEY_DOUBLE_PRESS;
 80008aa:	4b31      	ldr	r3, [pc, #196]	; (8000970 <ecPortExecCommand+0x168>)
 80008ac:	3205      	adds	r2, #5
 80008ae:	701a      	strb	r2, [r3, #0]
              break;
 80008b0:	e7bc      	b.n	800082c <ecPortExecCommand+0x24>
              sprintf(strMessage, "shutdown now\r\n");
 80008b2:	4c30      	ldr	r4, [pc, #192]	; (8000974 <ecPortExecCommand+0x16c>)
 80008b4:	220f      	movs	r2, #15
 80008b6:	4933      	ldr	r1, [pc, #204]	; (8000984 <ecPortExecCommand+0x17c>)
 80008b8:	0020      	movs	r0, r4
 80008ba:	f003 f919 	bl	8003af0 <memcpy>
              ecTxString(strMessage, strlen(strMessage));
 80008be:	0020      	movs	r0, r4
 80008c0:	f7ff fc1e 	bl	8000100 <strlen>
 80008c4:	b2c1      	uxtb	r1, r0
 80008c6:	0020      	movs	r0, r4
 80008c8:	f000 faea 	bl	8000ea0 <ecTxString>
              HAL_GPIO_WritePin(CMD_OUT_GPIO_Port,  CMD_OUT_Pin, GPIO_PIN_SET);
 80008cc:	2180      	movs	r1, #128	; 0x80
 80008ce:	20a0      	movs	r0, #160	; 0xa0
 80008d0:	2201      	movs	r2, #1
 80008d2:	0109      	lsls	r1, r1, #4
 80008d4:	05c0      	lsls	r0, r0, #23
 80008d6:	f002 f84a 	bl	800296e <HAL_GPIO_WritePin>
              break;
 80008da:	e7a7      	b.n	800082c <ecPortExecCommand+0x24>
              sprintf(strMessage, "shutdown -P now\r\n");
 80008dc:	4c25      	ldr	r4, [pc, #148]	; (8000974 <ecPortExecCommand+0x16c>)
 80008de:	2212      	movs	r2, #18
 80008e0:	4929      	ldr	r1, [pc, #164]	; (8000988 <ecPortExecCommand+0x180>)
 80008e2:	0020      	movs	r0, r4
 80008e4:	f003 f904 	bl	8003af0 <memcpy>
              ecTxString(strMessage, strlen(strMessage));
 80008e8:	0020      	movs	r0, r4
 80008ea:	f7ff fc09 	bl	8000100 <strlen>
 80008ee:	b2c1      	uxtb	r1, r0
 80008f0:	0020      	movs	r0, r4
 80008f2:	f000 fad5 	bl	8000ea0 <ecTxString>
              HAL_GPIO_WritePin(CMD_OUT_GPIO_Port,  CMD_OUT_Pin, GPIO_PIN_SET);
 80008f6:	2180      	movs	r1, #128	; 0x80
 80008f8:	20a0      	movs	r0, #160	; 0xa0
 80008fa:	2201      	movs	r2, #1
 80008fc:	0109      	lsls	r1, r1, #4
 80008fe:	05c0      	lsls	r0, r0, #23
 8000900:	f002 f835 	bl	800296e <HAL_GPIO_WritePin>
              break;
 8000904:	e792      	b.n	800082c <ecPortExecCommand+0x24>
          if(ecSWTimerRead(KEY_TIMER) == 0) //
 8000906:	2001      	movs	r0, #1
 8000908:	f7ff fd9e 	bl	8000448 <ecSWTimerRead>
 800090c:	2800      	cmp	r0, #0
 800090e:	d000      	beq.n	8000912 <ecPortExecCommand+0x10a>
 8000910:	e790      	b.n	8000834 <ecPortExecCommand+0x2c>
              HAL_GPIO_WritePin(CMD_OUT_GPIO_Port,  CMD_OUT_Pin, GPIO_PIN_SET);
 8000912:	2180      	movs	r1, #128	; 0x80
 8000914:	30a0      	adds	r0, #160	; 0xa0
 8000916:	2201      	movs	r2, #1
 8000918:	0109      	lsls	r1, r1, #4
 800091a:	05c0      	lsls	r0, r0, #23
 800091c:	f002 f827 	bl	800296e <HAL_GPIO_WritePin>
              lastCmd = 0;
 8000920:	4b13      	ldr	r3, [pc, #76]	; (8000970 <ecPortExecCommand+0x168>)
 8000922:	2200      	movs	r2, #0
 8000924:	701a      	strb	r2, [r3, #0]
 8000926:	e785      	b.n	8000834 <ecPortExecCommand+0x2c>
          if (doubleCounter < 3)
 8000928:	4b15      	ldr	r3, [pc, #84]	; (8000980 <ecPortExecCommand+0x178>)
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	2b02      	cmp	r3, #2
 800092e:	d905      	bls.n	800093c <ecPortExecCommand+0x134>
              lastCmd = 0;
 8000930:	2300      	movs	r3, #0
 8000932:	4a0f      	ldr	r2, [pc, #60]	; (8000970 <ecPortExecCommand+0x168>)
 8000934:	7013      	strb	r3, [r2, #0]
              doubleCounter = 0;
 8000936:	4a12      	ldr	r2, [pc, #72]	; (8000980 <ecPortExecCommand+0x178>)
 8000938:	7013      	strb	r3, [r2, #0]
 800093a:	e780      	b.n	800083e <ecPortExecCommand+0x36>
              if(ecSWTimerRead(KEY_TIMER) == 0)
 800093c:	2001      	movs	r0, #1
 800093e:	f7ff fd83 	bl	8000448 <ecSWTimerRead>
 8000942:	2800      	cmp	r0, #0
 8000944:	d000      	beq.n	8000948 <ecPortExecCommand+0x140>
 8000946:	e77a      	b.n	800083e <ecPortExecCommand+0x36>
                  HAL_GPIO_TogglePin(CMD_OUT_GPIO_Port,  CMD_OUT_Pin);
 8000948:	2180      	movs	r1, #128	; 0x80
 800094a:	30a0      	adds	r0, #160	; 0xa0
 800094c:	0109      	lsls	r1, r1, #4
 800094e:	05c0      	lsls	r0, r0, #23
 8000950:	f002 f813 	bl	800297a <HAL_GPIO_TogglePin>
                  ecSWTimerStart(KEY_TIMER, PORT_SHORT_PULSE); //set minimum hold time
 8000954:	2164      	movs	r1, #100	; 0x64
 8000956:	2001      	movs	r0, #1
 8000958:	f7ff fd68 	bl	800042c <ecSWTimerStart>
                  doubleCounter ++;
 800095c:	4a08      	ldr	r2, [pc, #32]	; (8000980 <ecPortExecCommand+0x178>)
 800095e:	7813      	ldrb	r3, [r2, #0]
 8000960:	3301      	adds	r3, #1
 8000962:	7013      	strb	r3, [r2, #0]
 8000964:	e76b      	b.n	800083e <ecPortExecCommand+0x36>
          return 0;
 8000966:	2000      	movs	r0, #0
 8000968:	e770      	b.n	800084c <ecPortExecCommand+0x44>
 800096a:	46c0      	nop			; (mov r8, r8)
 800096c:	080044c4 	.word	0x080044c4
 8000970:	2000008d 	.word	0x2000008d
 8000974:	200001ac 	.word	0x200001ac
 8000978:	0800447c 	.word	0x0800447c
 800097c:	0800448c 	.word	0x0800448c
 8000980:	2000008c 	.word	0x2000008c
 8000984:	080044a0 	.word	0x080044a0
 8000988:	080044b0 	.word	0x080044b0

0800098c <ecDecodePiAnswer>:
  * @param[out]     true, if ack response
  * @retval         None

*/
uint8_t ecDecodePiAnswer(uint8_t *RxStr, const char *ackStr)
{
 800098c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800098e:	0006      	movs	r6, r0
 8000990:	000d      	movs	r5, r1
    uint8_t ackChars;
    uint8_t ackMatch = 1;
 8000992:	2701      	movs	r7, #1
    for (ackChars = 0; ackChars < strlen(ackStr); ackChars ++)
 8000994:	2400      	movs	r4, #0
 8000996:	e001      	b.n	800099c <ecDecodePiAnswer+0x10>
 8000998:	3401      	adds	r4, #1
 800099a:	b2e4      	uxtb	r4, r4
 800099c:	0028      	movs	r0, r5
 800099e:	f7ff fbaf 	bl	8000100 <strlen>
 80009a2:	4284      	cmp	r4, r0
 80009a4:	d205      	bcs.n	80009b2 <ecDecodePiAnswer+0x26>
    {
            if(RxStr[ackChars] != ackStr[ackChars])
 80009a6:	5d32      	ldrb	r2, [r6, r4]
 80009a8:	5d2b      	ldrb	r3, [r5, r4]
 80009aa:	429a      	cmp	r2, r3
 80009ac:	d0f4      	beq.n	8000998 <ecDecodePiAnswer+0xc>
                ackMatch = 0;
 80009ae:	2700      	movs	r7, #0
 80009b0:	e7f2      	b.n	8000998 <ecDecodePiAnswer+0xc>
    }
    return ackMatch;
}
 80009b2:	0038      	movs	r0, r7
 80009b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080009b6 <ecDecodePiRequest>:
  * @param[out]     true, if ack response
  * @retval         None

*/
uint8_t ecDecodePiRequest(uint8_t *RxStr, const char *requestStr)
{
 80009b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009b8:	0006      	movs	r6, r0
 80009ba:	000d      	movs	r5, r1
    uint8_t reqChars;
    uint8_t reqMatch = 1;
 80009bc:	2701      	movs	r7, #1
    for (reqChars = 0; reqChars < strlen(requestStr); reqChars ++)
 80009be:	2400      	movs	r4, #0
 80009c0:	e001      	b.n	80009c6 <ecDecodePiRequest+0x10>
 80009c2:	3401      	adds	r4, #1
 80009c4:	b2e4      	uxtb	r4, r4
 80009c6:	0028      	movs	r0, r5
 80009c8:	f7ff fb9a 	bl	8000100 <strlen>
 80009cc:	4284      	cmp	r4, r0
 80009ce:	d205      	bcs.n	80009dc <ecDecodePiRequest+0x26>
    {
            if(RxStr[reqChars] != requestStr[reqChars])
 80009d0:	5d32      	ldrb	r2, [r6, r4]
 80009d2:	5d2b      	ldrb	r3, [r5, r4]
 80009d4:	429a      	cmp	r2, r3
 80009d6:	d0f4      	beq.n	80009c2 <ecDecodePiRequest+0xc>
                reqMatch = 0;
 80009d8:	2700      	movs	r7, #0
 80009da:	e7f2      	b.n	80009c2 <ecDecodePiRequest+0xc>
    }
    return reqMatch;
}
 80009dc:	0038      	movs	r0, r7
 80009de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080009e0 <ecSerialExecCommand>:

Long and Superlong button is directly passed via GPIO and serial port.
Short and double click will be compressed and sent as pulses to port.
*/
int ecSerialExecCommand(eKeyPress_t keyPress)
{
 80009e0:	b510      	push	{r4, lr}

     switch(keyPress)
 80009e2:	2804      	cmp	r0, #4
 80009e4:	d036      	beq.n	8000a54 <ecSerialExecCommand+0x74>
 80009e6:	d811      	bhi.n	8000a0c <ecSerialExecCommand+0x2c>
 80009e8:	2802      	cmp	r0, #2
 80009ea:	d01f      	beq.n	8000a2c <ecSerialExecCommand+0x4c>
 80009ec:	2803      	cmp	r0, #3
 80009ee:	d12a      	bne.n	8000a46 <ecSerialExecCommand+0x66>
              sprintf(strMessage, UPS_REQ_RESTART);
              ecTxString(strMessage, strlen(strMessage));
              break;

          case KEY_LONG_PRESS:  //shutdown and goto standby
              sprintf(strMessage, UPS_REQ_SHUTDOWN);
 80009f0:	4c20      	ldr	r4, [pc, #128]	; (8000a74 <ecSerialExecCommand+0x94>)
 80009f2:	2211      	movs	r2, #17
 80009f4:	4920      	ldr	r1, [pc, #128]	; (8000a78 <ecSerialExecCommand+0x98>)
 80009f6:	0020      	movs	r0, r4
 80009f8:	f003 f87a 	bl	8003af0 <memcpy>
              ecTxString(strMessage, strlen(strMessage));
 80009fc:	0020      	movs	r0, r4
 80009fe:	f7ff fb7f 	bl	8000100 <strlen>
 8000a02:	b2c1      	uxtb	r1, r0
 8000a04:	0020      	movs	r0, r4
 8000a06:	f000 fa4b 	bl	8000ea0 <ecTxString>
              break;
 8000a0a:	e01c      	b.n	8000a46 <ecSerialExecCommand+0x66>
     switch(keyPress)
 8000a0c:	2805      	cmp	r0, #5
 8000a0e:	d11a      	bne.n	8000a46 <ecSerialExecCommand+0x66>
              sprintf(strMessage, UPS_REQ_RESTART);
 8000a10:	4c18      	ldr	r4, [pc, #96]	; (8000a74 <ecSerialExecCommand+0x94>)
 8000a12:	2214      	movs	r2, #20
 8000a14:	4919      	ldr	r1, [pc, #100]	; (8000a7c <ecSerialExecCommand+0x9c>)
 8000a16:	0020      	movs	r0, r4
 8000a18:	f003 f86a 	bl	8003af0 <memcpy>
              ecTxString(strMessage, strlen(strMessage));
 8000a1c:	0020      	movs	r0, r4
 8000a1e:	f7ff fb6f 	bl	8000100 <strlen>
 8000a22:	b2c1      	uxtb	r1, r0
 8000a24:	0020      	movs	r0, r4
 8000a26:	f000 fa3b 	bl	8000ea0 <ecTxString>
              break;
 8000a2a:	e00c      	b.n	8000a46 <ecSerialExecCommand+0x66>
        	  sprintf(strMessage, "> Pi power ON\r\n");
 8000a2c:	4c11      	ldr	r4, [pc, #68]	; (8000a74 <ecSerialExecCommand+0x94>)
 8000a2e:	2210      	movs	r2, #16
 8000a30:	4913      	ldr	r1, [pc, #76]	; (8000a80 <ecSerialExecCommand+0xa0>)
 8000a32:	0020      	movs	r0, r4
 8000a34:	f003 f85c 	bl	8003af0 <memcpy>
              ecTxString(strMessage, strlen(strMessage));
 8000a38:	0020      	movs	r0, r4
 8000a3a:	f7ff fb61 	bl	8000100 <strlen>
 8000a3e:	b2c1      	uxtb	r1, r0
 8000a40:	0020      	movs	r0, r4
 8000a42:	f000 fa2d 	bl	8000ea0 <ecTxString>
              break;
          default:
              break;
      }

      if(ecSWTimerRead(KEY_TIMER) == 0)
 8000a46:	2001      	movs	r0, #1
 8000a48:	f7ff fcfe 	bl	8000448 <ecSWTimerRead>
 8000a4c:	2800      	cmp	r0, #0
 8000a4e:	d10f      	bne.n	8000a70 <ecSerialExecCommand+0x90>
          return 1;
 8000a50:	3001      	adds	r0, #1
      else
          return 0;
}
 8000a52:	bd10      	pop	{r4, pc}
              sprintf(strMessage, UPS_REQ_PRW_OFF); //proforma -P. not supported by Raspi
 8000a54:	4c07      	ldr	r4, [pc, #28]	; (8000a74 <ecSerialExecCommand+0x94>)
 8000a56:	2214      	movs	r2, #20
 8000a58:	490a      	ldr	r1, [pc, #40]	; (8000a84 <ecSerialExecCommand+0xa4>)
 8000a5a:	0020      	movs	r0, r4
 8000a5c:	f003 f848 	bl	8003af0 <memcpy>
              ecTxString(strMessage, strlen(strMessage));
 8000a60:	0020      	movs	r0, r4
 8000a62:	f7ff fb4d 	bl	8000100 <strlen>
 8000a66:	b2c1      	uxtb	r1, r0
 8000a68:	0020      	movs	r0, r4
 8000a6a:	f000 fa19 	bl	8000ea0 <ecTxString>
              break;
 8000a6e:	e7ea      	b.n	8000a46 <ecSerialExecCommand+0x66>
          return 0;
 8000a70:	2000      	movs	r0, #0
 8000a72:	e7ee      	b.n	8000a52 <ecSerialExecCommand+0x72>
 8000a74:	200001ac 	.word	0x200001ac
 8000a78:	08004500 	.word	0x08004500
 8000a7c:	080044ec 	.word	0x080044ec
 8000a80:	080044dc 	.word	0x080044dc
 8000a84:	08004514 	.word	0x08004514

08000a88 <ecSerialHandleFeedback>:
  * @param[in]  actual Pi state
  * @param[out] new Pi state
  * @retval     None
*/
ePiState_t ecSerialHandleFeedback(eKeyPress_t keyPress, ePiState_t piState)
{
 8000a88:	b570      	push	{r4, r5, r6, lr}
 8000a8a:	b08c      	sub	sp, #48	; 0x30
 8000a8c:	0005      	movs	r5, r0
 8000a8e:	000c      	movs	r4, r1
    uint8_t rxPort;
    uint8_t rxStrBuf[RX_BUFFER_SIZE];


    /* evaluate state on Rx line (USART2) */
    rxPort = (GPIOA->IDR >> 3) & 0x01; //PA3
 8000a90:	23a0      	movs	r3, #160	; 0xa0
 8000a92:	05db      	lsls	r3, r3, #23
 8000a94:	691b      	ldr	r3, [r3, #16]
 8000a96:	08db      	lsrs	r3, r3, #3
 8000a98:	2601      	movs	r6, #1
 8000a9a:	401e      	ands	r6, r3

    /* generate feedback */
    switch(piState)
 8000a9c:	2905      	cmp	r1, #5
 8000a9e:	d900      	bls.n	8000aa2 <ecSerialHandleFeedback+0x1a>
 8000aa0:	e122      	b.n	8000ce8 <ecSerialHandleFeedback+0x260>
 8000aa2:	008b      	lsls	r3, r1, #2
 8000aa4:	4a99      	ldr	r2, [pc, #612]	; (8000d0c <ecSerialHandleFeedback+0x284>)
 8000aa6:	58d3      	ldr	r3, [r2, r3]
 8000aa8:	469f      	mov	pc, r3
    {
        case PI_STATE_UNKNOWN:
            if(rxPort == 1)
 8000aaa:	2e00      	cmp	r6, #0
 8000aac:	d101      	bne.n	8000ab2 <ecSerialHandleFeedback+0x2a>
                ecTxString(strMessage, strlen(strMessage));
                g_PI_watchdog_Ok = 0;
                piState = PI_RUNNING;
            }
            else
                piState = PI_STBY;
 8000aae:	2404      	movs	r4, #4
 8000ab0:	e11a      	b.n	8000ce8 <ecSerialHandleFeedback+0x260>
                ecSWTimerStart(WD_TIMER, 5000); //trigger watchdog timer
 8000ab2:	4997      	ldr	r1, [pc, #604]	; (8000d10 <ecSerialHandleFeedback+0x288>)
 8000ab4:	2003      	movs	r0, #3
 8000ab6:	f7ff fcb9 	bl	800042c <ecSWTimerStart>
                sprintf(strMessage, "u?ready\r\n");
 8000aba:	4c96      	ldr	r4, [pc, #600]	; (8000d14 <ecSerialHandleFeedback+0x28c>)
 8000abc:	220a      	movs	r2, #10
 8000abe:	4996      	ldr	r1, [pc, #600]	; (8000d18 <ecSerialHandleFeedback+0x290>)
 8000ac0:	0020      	movs	r0, r4
 8000ac2:	f003 f815 	bl	8003af0 <memcpy>
                ecTxString(strMessage, strlen(strMessage));
 8000ac6:	0020      	movs	r0, r4
 8000ac8:	f7ff fb1a 	bl	8000100 <strlen>
 8000acc:	b2c1      	uxtb	r1, r0
 8000ace:	0020      	movs	r0, r4
 8000ad0:	f000 f9e6 	bl	8000ea0 <ecTxString>
                g_PI_watchdog_Ok = 0;
 8000ad4:	4b91      	ldr	r3, [pc, #580]	; (8000d1c <ecSerialHandleFeedback+0x294>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	701a      	strb	r2, [r3, #0]
                piState = PI_RUNNING;
 8000ada:	2401      	movs	r4, #1
 8000adc:	e104      	b.n	8000ce8 <ecSerialHandleFeedback+0x260>


        case PI_RUNNING:

            /* Watchdog for PI */
            if(ecSWTimerRead(WD_TIMER) == 0)
 8000ade:	2003      	movs	r0, #3
 8000ae0:	f7ff fcb2 	bl	8000448 <ecSWTimerRead>
 8000ae4:	2800      	cmp	r0, #0
 8000ae6:	d104      	bne.n	8000af2 <ecSerialHandleFeedback+0x6a>
            {
                if(g_PI_watchdog_Ok) //check PI all 2000 sec
 8000ae8:	4b8c      	ldr	r3, [pc, #560]	; (8000d1c <ecSerialHandleFeedback+0x294>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d13f      	bne.n	8000b70 <ecSerialHandleFeedback+0xe8>
                    ecSWTimerStart(WD_TIMER, 2000);
                    g_PI_watchdog_Ok = 0; //will be set after serial response of PI
                }
                else
                {
                    piState = PI_SHUTTING_DOWN; //this happens, if shutdown is locally initiated by Pi
 8000af0:	2402      	movs	r4, #2
                }
            }

            /* user feedback during key press */
            if(keyPress == KEY_PENDING)
 8000af2:	2d01      	cmp	r5, #1
 8000af4:	d052      	beq.n	8000b9c <ecSerialHandleFeedback+0x114>
                ecSetLED(LED_Pi, 1000);         //signal key press
            else
                ecSetLED(LED_Pi, LED_ON);       //signal Pi ready
 8000af6:	498a      	ldr	r1, [pc, #552]	; (8000d20 <ecSerialHandleFeedback+0x298>)
 8000af8:	2000      	movs	r0, #0
 8000afa:	f7ff fce1 	bl	80004c0 <ecSetLED>

            /* prepare power off after Pi is down */
            if (keyPress == KEY_SUPER_LONG_PRESS)
 8000afe:	2d04      	cmp	r5, #4
 8000b00:	d052      	beq.n	8000ba8 <ecSerialHandleFeedback+0x120>
                preparePiPower_off = 1;

            /* process Pi requests */
            if(ecGetRxString(rxStrBuf, RX_BUFFER_SIZE))
 8000b02:	2130      	movs	r1, #48	; 0x30
 8000b04:	4668      	mov	r0, sp
 8000b06:	f000 f9e9 	bl	8000edc <ecGetRxString>
 8000b0a:	2800      	cmp	r0, #0
 8000b0c:	d100      	bne.n	8000b10 <ecSerialHandleFeedback+0x88>
 8000b0e:	e0eb      	b.n	8000ce8 <ecSerialHandleFeedback+0x260>
            {
                if(ecDecodePiRequest(rxStrBuf, PI_REQ_STATUS))
 8000b10:	4984      	ldr	r1, [pc, #528]	; (8000d24 <ecSerialHandleFeedback+0x29c>)
 8000b12:	4668      	mov	r0, sp
 8000b14:	f7ff ff4f 	bl	80009b6 <ecDecodePiRequest>
 8000b18:	2800      	cmp	r0, #0
 8000b1a:	d149      	bne.n	8000bb0 <ecSerialHandleFeedback+0x128>
                {
                    sprintf(strMessage, "%s0x%04X\r\n", UPS_RESPONSE, g_powerState);
                    ecTxString(strMessage, strlen(strMessage));
                }
                if(ecDecodePiRequest(rxStrBuf, PI_REQ_ANALOG))
 8000b1c:	4982      	ldr	r1, [pc, #520]	; (8000d28 <ecSerialHandleFeedback+0x2a0>)
 8000b1e:	4668      	mov	r0, sp
 8000b20:	f7ff ff49 	bl	80009b6 <ecDecodePiRequest>
 8000b24:	2800      	cmp	r0, #0
 8000b26:	d153      	bne.n	8000bd0 <ecSerialHandleFeedback+0x148>
                {
                    sprintf(strMessage, "%s%s", UPS_RESPONSE,g_analogStr);
                    ecTxString(strMessage, strlen(strMessage));
                }
                if(ecDecodePiRequest(rxStrBuf, PI_REQ_PWR_OFF))
 8000b28:	4980      	ldr	r1, [pc, #512]	; (8000d2c <ecSerialHandleFeedback+0x2a4>)
 8000b2a:	4668      	mov	r0, sp
 8000b2c:	f7ff ff43 	bl	80009b6 <ecDecodePiRequest>
 8000b30:	2800      	cmp	r0, #0
 8000b32:	d15c      	bne.n	8000bee <ecSerialHandleFeedback+0x166>
                    sprintf(strMessage,"%s%s\n", UPS_RESPONSE, PI_REQ_PWR_OFF);
                    ecTxString(strMessage, strlen(strMessage)); //this goes in the air, debug only
                    preparePiPower_off = 1;
                    piState = PI_SHUTTING_DOWN;
                }
                if(ecDecodePiRequest(rxStrBuf, PI_REQ_VERSION))
 8000b34:	497e      	ldr	r1, [pc, #504]	; (8000d30 <ecSerialHandleFeedback+0x2a8>)
 8000b36:	4668      	mov	r0, sp
 8000b38:	f7ff ff3d 	bl	80009b6 <ecDecodePiRequest>
 8000b3c:	2800      	cmp	r0, #0
 8000b3e:	d169      	bne.n	8000c14 <ecSerialHandleFeedback+0x18c>
                {
                    sprintf(strMessage, "%s%s", UPS_RESPONSE, C_HDR_STR);
                    ecTxString(strMessage, strlen(strMessage));
                }

                if(ecDecodePiRequest(rxStrBuf, PI_REQ_BOOTLOADER))
 8000b40:	497c      	ldr	r1, [pc, #496]	; (8000d34 <ecSerialHandleFeedback+0x2ac>)
 8000b42:	4668      	mov	r0, sp
 8000b44:	f7ff ff37 	bl	80009b6 <ecDecodePiRequest>
 8000b48:	2800      	cmp	r0, #0
 8000b4a:	d172      	bne.n	8000c32 <ecSerialHandleFeedback+0x1aa>
//                    ecSWTimerStart(DELAY_TIMER,500); //allow Pi reaction
//                   while(ecSWTimerRead(DELAY_TIMER));
                    JumpToBootloader();
                }

                if(ecDecodePiAnswer(rxStrBuf, PI_ACK_SHUTDOWN))
 8000b4c:	497a      	ldr	r1, [pc, #488]	; (8000d38 <ecSerialHandleFeedback+0x2b0>)
 8000b4e:	4668      	mov	r0, sp
 8000b50:	f7ff ff1c 	bl	800098c <ecDecodePiAnswer>
 8000b54:	2800      	cmp	r0, #0
 8000b56:	d000      	beq.n	8000b5a <ecSerialHandleFeedback+0xd2>
                    piState = PI_SHUTTING_DOWN;
 8000b58:	2402      	movs	r4, #2


                if(ecDecodePiAnswer(rxStrBuf, PI_ACK_READY)) //watchdog retrigger
 8000b5a:	4978      	ldr	r1, [pc, #480]	; (8000d3c <ecSerialHandleFeedback+0x2b4>)
 8000b5c:	4668      	mov	r0, sp
 8000b5e:	f7ff ff15 	bl	800098c <ecDecodePiAnswer>
 8000b62:	2800      	cmp	r0, #0
 8000b64:	d100      	bne.n	8000b68 <ecSerialHandleFeedback+0xe0>
 8000b66:	e0bf      	b.n	8000ce8 <ecSerialHandleFeedback+0x260>
                    g_PI_watchdog_Ok = 1;
 8000b68:	4b6c      	ldr	r3, [pc, #432]	; (8000d1c <ecSerialHandleFeedback+0x294>)
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	701a      	strb	r2, [r3, #0]
 8000b6e:	e0bb      	b.n	8000ce8 <ecSerialHandleFeedback+0x260>
                    sprintf(strMessage, "u?ready\r\n");
 8000b70:	4e68      	ldr	r6, [pc, #416]	; (8000d14 <ecSerialHandleFeedback+0x28c>)
 8000b72:	220a      	movs	r2, #10
 8000b74:	4968      	ldr	r1, [pc, #416]	; (8000d18 <ecSerialHandleFeedback+0x290>)
 8000b76:	0030      	movs	r0, r6
 8000b78:	f002 ffba 	bl	8003af0 <memcpy>
                    ecTxString(strMessage, strlen(strMessage));
 8000b7c:	0030      	movs	r0, r6
 8000b7e:	f7ff fabf 	bl	8000100 <strlen>
 8000b82:	b2c1      	uxtb	r1, r0
 8000b84:	0030      	movs	r0, r6
 8000b86:	f000 f98b 	bl	8000ea0 <ecTxString>
                    ecSWTimerStart(WD_TIMER, 2000);
 8000b8a:	21fa      	movs	r1, #250	; 0xfa
 8000b8c:	00c9      	lsls	r1, r1, #3
 8000b8e:	2003      	movs	r0, #3
 8000b90:	f7ff fc4c 	bl	800042c <ecSWTimerStart>
                    g_PI_watchdog_Ok = 0; //will be set after serial response of PI
 8000b94:	4b61      	ldr	r3, [pc, #388]	; (8000d1c <ecSerialHandleFeedback+0x294>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	701a      	strb	r2, [r3, #0]
 8000b9a:	e7aa      	b.n	8000af2 <ecSerialHandleFeedback+0x6a>
                ecSetLED(LED_Pi, 1000);         //signal key press
 8000b9c:	21fa      	movs	r1, #250	; 0xfa
 8000b9e:	0089      	lsls	r1, r1, #2
 8000ba0:	2000      	movs	r0, #0
 8000ba2:	f7ff fc8d 	bl	80004c0 <ecSetLED>
 8000ba6:	e7aa      	b.n	8000afe <ecSerialHandleFeedback+0x76>
                preparePiPower_off = 1;
 8000ba8:	4b65      	ldr	r3, [pc, #404]	; (8000d40 <ecSerialHandleFeedback+0x2b8>)
 8000baa:	2201      	movs	r2, #1
 8000bac:	701a      	strb	r2, [r3, #0]
 8000bae:	e7a8      	b.n	8000b02 <ecSerialHandleFeedback+0x7a>
                    sprintf(strMessage, "%s0x%04X\r\n", UPS_RESPONSE, g_powerState);
 8000bb0:	4b64      	ldr	r3, [pc, #400]	; (8000d44 <ecSerialHandleFeedback+0x2bc>)
 8000bb2:	881b      	ldrh	r3, [r3, #0]
 8000bb4:	4d57      	ldr	r5, [pc, #348]	; (8000d14 <ecSerialHandleFeedback+0x28c>)
 8000bb6:	4a64      	ldr	r2, [pc, #400]	; (8000d48 <ecSerialHandleFeedback+0x2c0>)
 8000bb8:	4964      	ldr	r1, [pc, #400]	; (8000d4c <ecSerialHandleFeedback+0x2c4>)
 8000bba:	0028      	movs	r0, r5
 8000bbc:	f002 ffde 	bl	8003b7c <siprintf>
                    ecTxString(strMessage, strlen(strMessage));
 8000bc0:	0028      	movs	r0, r5
 8000bc2:	f7ff fa9d 	bl	8000100 <strlen>
 8000bc6:	b2c1      	uxtb	r1, r0
 8000bc8:	0028      	movs	r0, r5
 8000bca:	f000 f969 	bl	8000ea0 <ecTxString>
 8000bce:	e7a5      	b.n	8000b1c <ecSerialHandleFeedback+0x94>
                    sprintf(strMessage, "%s%s", UPS_RESPONSE,g_analogStr);
 8000bd0:	4d50      	ldr	r5, [pc, #320]	; (8000d14 <ecSerialHandleFeedback+0x28c>)
 8000bd2:	4b5f      	ldr	r3, [pc, #380]	; (8000d50 <ecSerialHandleFeedback+0x2c8>)
 8000bd4:	4a5c      	ldr	r2, [pc, #368]	; (8000d48 <ecSerialHandleFeedback+0x2c0>)
 8000bd6:	495f      	ldr	r1, [pc, #380]	; (8000d54 <ecSerialHandleFeedback+0x2cc>)
 8000bd8:	0028      	movs	r0, r5
 8000bda:	f002 ffcf 	bl	8003b7c <siprintf>
                    ecTxString(strMessage, strlen(strMessage));
 8000bde:	0028      	movs	r0, r5
 8000be0:	f7ff fa8e 	bl	8000100 <strlen>
 8000be4:	b2c1      	uxtb	r1, r0
 8000be6:	0028      	movs	r0, r5
 8000be8:	f000 f95a 	bl	8000ea0 <ecTxString>
 8000bec:	e79c      	b.n	8000b28 <ecSerialHandleFeedback+0xa0>
                    sprintf(strMessage,"%s%s\n", UPS_RESPONSE, PI_REQ_PWR_OFF);
 8000bee:	4c49      	ldr	r4, [pc, #292]	; (8000d14 <ecSerialHandleFeedback+0x28c>)
 8000bf0:	4b4e      	ldr	r3, [pc, #312]	; (8000d2c <ecSerialHandleFeedback+0x2a4>)
 8000bf2:	4a55      	ldr	r2, [pc, #340]	; (8000d48 <ecSerialHandleFeedback+0x2c0>)
 8000bf4:	4958      	ldr	r1, [pc, #352]	; (8000d58 <ecSerialHandleFeedback+0x2d0>)
 8000bf6:	0020      	movs	r0, r4
 8000bf8:	f002 ffc0 	bl	8003b7c <siprintf>
                    ecTxString(strMessage, strlen(strMessage)); //this goes in the air, debug only
 8000bfc:	0020      	movs	r0, r4
 8000bfe:	f7ff fa7f 	bl	8000100 <strlen>
 8000c02:	b2c1      	uxtb	r1, r0
 8000c04:	0020      	movs	r0, r4
 8000c06:	f000 f94b 	bl	8000ea0 <ecTxString>
                    preparePiPower_off = 1;
 8000c0a:	4b4d      	ldr	r3, [pc, #308]	; (8000d40 <ecSerialHandleFeedback+0x2b8>)
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	701a      	strb	r2, [r3, #0]
                    piState = PI_SHUTTING_DOWN;
 8000c10:	2402      	movs	r4, #2
 8000c12:	e78f      	b.n	8000b34 <ecSerialHandleFeedback+0xac>
                    sprintf(strMessage, "%s%s", UPS_RESPONSE, C_HDR_STR);
 8000c14:	4d3f      	ldr	r5, [pc, #252]	; (8000d14 <ecSerialHandleFeedback+0x28c>)
 8000c16:	4b51      	ldr	r3, [pc, #324]	; (8000d5c <ecSerialHandleFeedback+0x2d4>)
 8000c18:	4a4b      	ldr	r2, [pc, #300]	; (8000d48 <ecSerialHandleFeedback+0x2c0>)
 8000c1a:	494e      	ldr	r1, [pc, #312]	; (8000d54 <ecSerialHandleFeedback+0x2cc>)
 8000c1c:	0028      	movs	r0, r5
 8000c1e:	f002 ffad 	bl	8003b7c <siprintf>
                    ecTxString(strMessage, strlen(strMessage));
 8000c22:	0028      	movs	r0, r5
 8000c24:	f7ff fa6c 	bl	8000100 <strlen>
 8000c28:	b2c1      	uxtb	r1, r0
 8000c2a:	0028      	movs	r0, r5
 8000c2c:	f000 f938 	bl	8000ea0 <ecTxString>
 8000c30:	e786      	b.n	8000b40 <ecSerialHandleFeedback+0xb8>
                    ecSetLED(LED_Pi, 100);
 8000c32:	2164      	movs	r1, #100	; 0x64
 8000c34:	2000      	movs	r0, #0
 8000c36:	f7ff fc43 	bl	80004c0 <ecSetLED>
                    ecSetLED(LED_Batt, 100);
 8000c3a:	2164      	movs	r1, #100	; 0x64
 8000c3c:	2001      	movs	r0, #1
 8000c3e:	f7ff fc3f 	bl	80004c0 <ecSetLED>
                    ecSetLED(LED_Main, 100);
 8000c42:	2164      	movs	r1, #100	; 0x64
 8000c44:	2002      	movs	r0, #2
 8000c46:	f7ff fc3b 	bl	80004c0 <ecSetLED>
                    JumpToBootloader();
 8000c4a:	f000 f8ed 	bl	8000e28 <JumpToBootloader>
 8000c4e:	e77d      	b.n	8000b4c <ecSerialHandleFeedback+0xc4>

            }
            break;

        case PI_SHUTTING_DOWN:
            ecSetLED(LED_Pi, 250);
 8000c50:	21fa      	movs	r1, #250	; 0xfa
 8000c52:	2000      	movs	r0, #0
 8000c54:	f7ff fc34 	bl	80004c0 <ecSetLED>
             if (rxPort == 0)
 8000c58:	2e00      	cmp	r6, #0
 8000c5a:	d145      	bne.n	8000ce8 <ecSerialHandleFeedback+0x260>
            {
                piState = PI_STBY;
 8000c5c:	2404      	movs	r4, #4
 8000c5e:	e043      	b.n	8000ce8 <ecSerialHandleFeedback+0x260>
            }
            break;

        case  PI_STBY:
            ecSetLED(LED_Pi, LED_OFF);
 8000c60:	2100      	movs	r1, #0
 8000c62:	2000      	movs	r0, #0
 8000c64:	f7ff fc2c 	bl	80004c0 <ecSetLED>
            if(rxPort == 1)
 8000c68:	2e00      	cmp	r6, #0
 8000c6a:	d14d      	bne.n	8000d08 <ecSerialHandleFeedback+0x280>
            {
                piState = PI_STARTING_UP;
            }
            else
            {
                if( preparePiPower_off)
 8000c6c:	4b34      	ldr	r3, [pc, #208]	; (8000d40 <ecSerialHandleFeedback+0x2b8>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d117      	bne.n	8000ca4 <ecSerialHandleFeedback+0x21c>
                {
                    ecSWTimerStart(DELAY_TIMER,4000); //allow pi a last breath
                    piState = PI_PWR_OFF;
                }
                /* check for wakup */
                if(keyPress == KEY_SHORT_PRESS)
 8000c74:	2d02      	cmp	r5, #2
 8000c76:	d137      	bne.n	8000ce8 <ecSerialHandleFeedback+0x260>
                {
                    HAL_GPIO_WritePin(EN_5V_GPIO_Port,  EN_5V_Pin, GPIO_PIN_RESET); //5V enable = low: OFF
 8000c78:	20a0      	movs	r0, #160	; 0xa0
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	2101      	movs	r1, #1
 8000c7e:	05c0      	lsls	r0, r0, #23
 8000c80:	f001 fe75 	bl	800296e <HAL_GPIO_WritePin>
                    ecSWTimerStart(DELAY_TIMER,200);
 8000c84:	21c8      	movs	r1, #200	; 0xc8
 8000c86:	2000      	movs	r0, #0
 8000c88:	f7ff fbd0 	bl	800042c <ecSWTimerStart>
                    while(ecSWTimerRead(DELAY_TIMER)); //allow power down
 8000c8c:	2000      	movs	r0, #0
 8000c8e:	f7ff fbdb 	bl	8000448 <ecSWTimerRead>
 8000c92:	2800      	cmp	r0, #0
 8000c94:	d1fa      	bne.n	8000c8c <ecSerialHandleFeedback+0x204>
                    HAL_GPIO_WritePin(EN_5V_GPIO_Port,  EN_5V_Pin, GPIO_PIN_SET); //5V enable = high: ON
 8000c96:	30a0      	adds	r0, #160	; 0xa0
 8000c98:	2201      	movs	r2, #1
 8000c9a:	2101      	movs	r1, #1
 8000c9c:	05c0      	lsls	r0, r0, #23
 8000c9e:	f001 fe66 	bl	800296e <HAL_GPIO_WritePin>
 8000ca2:	e021      	b.n	8000ce8 <ecSerialHandleFeedback+0x260>
                    ecSWTimerStart(DELAY_TIMER,4000); //allow pi a last breath
 8000ca4:	21fa      	movs	r1, #250	; 0xfa
 8000ca6:	0109      	lsls	r1, r1, #4
 8000ca8:	2000      	movs	r0, #0
 8000caa:	f7ff fbbf 	bl	800042c <ecSWTimerStart>
                    piState = PI_PWR_OFF;
 8000cae:	2405      	movs	r4, #5
 8000cb0:	e7e0      	b.n	8000c74 <ecSerialHandleFeedback+0x1ec>
                }
            }
            break;

        case PI_STARTING_UP:
            ecSetLED(LED_Pi, 150);
 8000cb2:	2196      	movs	r1, #150	; 0x96
 8000cb4:	2000      	movs	r0, #0
 8000cb6:	f7ff fc03 	bl	80004c0 <ecSetLED>

            if (rxPort == 1)
 8000cba:	2e00      	cmp	r6, #0
 8000cbc:	d014      	beq.n	8000ce8 <ecSerialHandleFeedback+0x260>
            {
                 if (ecSWTimerRead(DELAY_TIMER) == 0)
 8000cbe:	2000      	movs	r0, #0
 8000cc0:	f7ff fbc2 	bl	8000448 <ecSWTimerRead>
 8000cc4:	2800      	cmp	r0, #0
 8000cc6:	d10f      	bne.n	8000ce8 <ecSerialHandleFeedback+0x260>
                 {
                     if(ecGetRxString(rxStrBuf, RX_BUFFER_SIZE))
 8000cc8:	2130      	movs	r1, #48	; 0x30
 8000cca:	4668      	mov	r0, sp
 8000ccc:	f000 f906 	bl	8000edc <ecGetRxString>
 8000cd0:	2800      	cmp	r0, #0
 8000cd2:	d009      	beq.n	8000ce8 <ecSerialHandleFeedback+0x260>
                     {
                         g_PI_watchdog_Ok = 1;
 8000cd4:	4b11      	ldr	r3, [pc, #68]	; (8000d1c <ecSerialHandleFeedback+0x294>)
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	701a      	strb	r2, [r3, #0]
                         piState = PI_RUNNING;
 8000cda:	2401      	movs	r4, #1
 8000cdc:	e004      	b.n	8000ce8 <ecSerialHandleFeedback+0x260>
             }
            break;


        case PI_PWR_OFF:
            if (ecSWTimerRead(DELAY_TIMER) == 0)
 8000cde:	2000      	movs	r0, #0
 8000ce0:	f7ff fbb2 	bl	8000448 <ecSWTimerRead>
 8000ce4:	2800      	cmp	r0, #0
 8000ce6:	d004      	beq.n	8000cf2 <ecSerialHandleFeedback+0x26a>
            }
            break;

    }

    g_debugPiState = piState;
 8000ce8:	4b1d      	ldr	r3, [pc, #116]	; (8000d60 <ecSerialHandleFeedback+0x2d8>)
 8000cea:	701c      	strb	r4, [r3, #0]
     return piState;
}
 8000cec:	0020      	movs	r0, r4
 8000cee:	b00c      	add	sp, #48	; 0x30
 8000cf0:	bd70      	pop	{r4, r5, r6, pc}
                HAL_GPIO_WritePin(EN_5V_GPIO_Port,  EN_5V_Pin, GPIO_PIN_RESET); //5V enable = low:OFF
 8000cf2:	30a0      	adds	r0, #160	; 0xa0
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	2101      	movs	r1, #1
 8000cf8:	05c0      	lsls	r0, r0, #23
 8000cfa:	f001 fe38 	bl	800296e <HAL_GPIO_WritePin>
                preparePiPower_off = 0;
 8000cfe:	4b10      	ldr	r3, [pc, #64]	; (8000d40 <ecSerialHandleFeedback+0x2b8>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	701a      	strb	r2, [r3, #0]
                piState = PI_STBY;
 8000d04:	2404      	movs	r4, #4
 8000d06:	e7ef      	b.n	8000ce8 <ecSerialHandleFeedback+0x260>
                piState = PI_STARTING_UP;
 8000d08:	2403      	movs	r4, #3
 8000d0a:	e7ed      	b.n	8000ce8 <ecSerialHandleFeedback+0x260>
 8000d0c:	080045cc 	.word	0x080045cc
 8000d10:	00001388 	.word	0x00001388
 8000d14:	200001ac 	.word	0x200001ac
 8000d18:	08004528 	.word	0x08004528
 8000d1c:	200001a8 	.word	0x200001a8
 8000d20:	0000ffff 	.word	0x0000ffff
 8000d24:	08004534 	.word	0x08004534
 8000d28:	08004550 	.word	0x08004550
 8000d2c:	08004564 	.word	0x08004564
 8000d30:	0800457c 	.word	0x0800457c
 8000d34:	080045a4 	.word	0x080045a4
 8000d38:	080045ac 	.word	0x080045ac
 8000d3c:	080045c0 	.word	0x080045c0
 8000d40:	20000090 	.word	0x20000090
 8000d44:	200000b0 	.word	0x200000b0
 8000d48:	08004540 	.word	0x08004540
 8000d4c:	08004544 	.word	0x08004544
 8000d50:	20000160 	.word	0x20000160
 8000d54:	0800455c 	.word	0x0800455c
 8000d58:	08004574 	.word	0x08004574
 8000d5c:	08004588 	.word	0x08004588
 8000d60:	20000120 	.word	0x20000120

08000d64 <ecAnalogHandler>:
  * @param[in]  analog_limits
  * @param[out] global g_powerState
  * @retval     error state
*/
uint16_t ecAnalogHandler(adc_buf_t adcVoltages)
{
 8000d64:	b530      	push	{r4, r5, lr}
 8000d66:	b083      	sub	sp, #12
 8000d68:	9000      	str	r0, [sp, #0]
 8000d6a:	9101      	str	r1, [sp, #4]
    uint16_t retValue = 0;
    uint8_t nBatt;

    /* active supply */
    nBatt = HAL_GPIO_ReadPin( nBatt_GPIO_Port , nBatt_Pin); //0 = battery input active, else main input
 8000d6c:	20a0      	movs	r0, #160	; 0xa0
 8000d6e:	2180      	movs	r1, #128	; 0x80
 8000d70:	05c0      	lsls	r0, r0, #23
 8000d72:	f001 fdf5 	bl	8002960 <HAL_GPIO_ReadPin>
    if(adcVoltages.Pi_voltage > PI_5V_DIODE_THRESHOLD)
 8000d76:	466b      	mov	r3, sp
 8000d78:	889b      	ldrh	r3, [r3, #4]
 8000d7a:	2b11      	cmp	r3, #17
 8000d7c:	d805      	bhi.n	8000d8a <ecAnalogHandler+0x26>
        retValue |= PI_USB_POWERED;
    else
    {
        if(nBatt == 1)  retValue |= PI_MAIN_POWERED;
 8000d7e:	2801      	cmp	r0, #1
 8000d80:	d001      	beq.n	8000d86 <ecAnalogHandler+0x22>
        else            retValue |= PI_BATT_POWERED;
 8000d82:	2402      	movs	r4, #2
 8000d84:	e002      	b.n	8000d8c <ecAnalogHandler+0x28>
        if(nBatt == 1)  retValue |= PI_MAIN_POWERED;
 8000d86:	2401      	movs	r4, #1
 8000d88:	e000      	b.n	8000d8c <ecAnalogHandler+0x28>
        retValue |= PI_USB_POWERED;
 8000d8a:	2404      	movs	r4, #4
    }

    /* Supply conditions */
    if(adcVoltages.main_voltage < MAIN_LOW_VOLTAGE_LIMIT) // || (adcVoltages.main_voltage < adcVoltages.batt_voltage))
 8000d8c:	466b      	mov	r3, sp
 8000d8e:	881b      	ldrh	r3, [r3, #0]
 8000d90:	2b45      	cmp	r3, #69	; 0x45
 8000d92:	d802      	bhi.n	8000d9a <ecAnalogHandler+0x36>
        retValue |= ERR_LOW_MAIN;
 8000d94:	2280      	movs	r2, #128	; 0x80
 8000d96:	0052      	lsls	r2, r2, #1
 8000d98:	4314      	orrs	r4, r2

    if(adcVoltages.batt_voltage < BAT_LOW_VOLTAGE_LIMIT)
 8000d9a:	466a      	mov	r2, sp
 8000d9c:	8855      	ldrh	r5, [r2, #2]
 8000d9e:	2d43      	cmp	r5, #67	; 0x43
 8000da0:	d802      	bhi.n	8000da8 <ecAnalogHandler+0x44>
        retValue |= ERR_LOW_BATT;
 8000da2:	2280      	movs	r2, #128	; 0x80
 8000da4:	00d2      	lsls	r2, r2, #3
 8000da6:	4314      	orrs	r4, r2

    if(adcVoltages.CPU_temp > CPU_HIGH_TEMP_LIMIT)
 8000da8:	466a      	mov	r2, sp
 8000daa:	88d1      	ldrh	r1, [r2, #6]
 8000dac:	22c8      	movs	r2, #200	; 0xc8
 8000dae:	0092      	lsls	r2, r2, #2
 8000db0:	4291      	cmp	r1, r2
 8000db2:	d902      	bls.n	8000dba <ecAnalogHandler+0x56>
        retValue |= ERR_HIGH_CPU_TEMP;
 8000db4:	2280      	movs	r2, #128	; 0x80
 8000db6:	0152      	lsls	r2, r2, #5
 8000db8:	4314      	orrs	r4, r2

    if(adcVoltages.main_voltage == 0)
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d018      	beq.n	8000df0 <ecAnalogHandler+0x8c>
    {
        ecSetLED(LED_Main, LED_OFF);
    }
    else if(retValue & ERR_LOW_MAIN)
 8000dbe:	05e3      	lsls	r3, r4, #23
 8000dc0:	d51b      	bpl.n	8000dfa <ecAnalogHandler+0x96>
    {
        ecSetLED(LED_Main, 1000);
 8000dc2:	21fa      	movs	r1, #250	; 0xfa
 8000dc4:	0089      	lsls	r1, r1, #2
 8000dc6:	2002      	movs	r0, #2
 8000dc8:	f7ff fb7a 	bl	80004c0 <ecSetLED>
        retValue |=MAIN_PRESENT;
 8000dcc:	2310      	movs	r3, #16
 8000dce:	431c      	orrs	r4, r3
 8000dd0:	b2a4      	uxth	r4, r4
    {
        ecSetLED(LED_Main, LED_ON);
        retValue |=MAIN_PRESENT;
    }

    if(adcVoltages.batt_voltage == 0)
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	d019      	beq.n	8000e0a <ecAnalogHandler+0xa6>
    {
        ecSetLED(LED_Batt, LED_OFF);
    }
    else if(retValue & ERR_LOW_BATT)
 8000dd6:	0563      	lsls	r3, r4, #21
 8000dd8:	d51c      	bpl.n	8000e14 <ecAnalogHandler+0xb0>
    {
        ecSetLED(LED_Batt, 1000);
 8000dda:	21fa      	movs	r1, #250	; 0xfa
 8000ddc:	0089      	lsls	r1, r1, #2
 8000dde:	2001      	movs	r0, #1
 8000de0:	f7ff fb6e 	bl	80004c0 <ecSetLED>
        retValue |= BATT_PRESENT;
 8000de4:	2320      	movs	r3, #32
 8000de6:	431c      	orrs	r4, r3
 8000de8:	b2a4      	uxth	r4, r4
       retValue |= BATT_PRESENT;
    }


    return retValue;
}
 8000dea:	0020      	movs	r0, r4
 8000dec:	b003      	add	sp, #12
 8000dee:	bd30      	pop	{r4, r5, pc}
        ecSetLED(LED_Main, LED_OFF);
 8000df0:	2100      	movs	r1, #0
 8000df2:	2002      	movs	r0, #2
 8000df4:	f7ff fb64 	bl	80004c0 <ecSetLED>
 8000df8:	e7eb      	b.n	8000dd2 <ecAnalogHandler+0x6e>
        ecSetLED(LED_Main, LED_ON);
 8000dfa:	490a      	ldr	r1, [pc, #40]	; (8000e24 <ecAnalogHandler+0xc0>)
 8000dfc:	2002      	movs	r0, #2
 8000dfe:	f7ff fb5f 	bl	80004c0 <ecSetLED>
        retValue |=MAIN_PRESENT;
 8000e02:	2310      	movs	r3, #16
 8000e04:	431c      	orrs	r4, r3
 8000e06:	b2a4      	uxth	r4, r4
 8000e08:	e7e3      	b.n	8000dd2 <ecAnalogHandler+0x6e>
        ecSetLED(LED_Batt, LED_OFF);
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	2001      	movs	r0, #1
 8000e0e:	f7ff fb57 	bl	80004c0 <ecSetLED>
 8000e12:	e7ea      	b.n	8000dea <ecAnalogHandler+0x86>
       ecSetLED(LED_Batt, LED_ON);
 8000e14:	4903      	ldr	r1, [pc, #12]	; (8000e24 <ecAnalogHandler+0xc0>)
 8000e16:	2001      	movs	r0, #1
 8000e18:	f7ff fb52 	bl	80004c0 <ecSetLED>
       retValue |= BATT_PRESENT;
 8000e1c:	2320      	movs	r3, #32
 8000e1e:	431c      	orrs	r4, r3
 8000e20:	b2a4      	uxth	r4, r4
 8000e22:	e7e2      	b.n	8000dea <ecAnalogHandler+0x86>
 8000e24:	0000ffff 	.word	0x0000ffff

08000e28 <JumpToBootloader>:
 *      Author: klaus
 */

#include "main.h"

void JumpToBootloader(void) {
 8000e28:	b500      	push	{lr}
 8000e2a:	b083      	sub	sp, #12
	 * Step: Set system memory address.
	 *
	 *       For STM32F429, system memory is on 0x1FFF 0000
	 *       For other families, check AN2606 document table 110 with descriptions of memory addresses
	 */
	volatile uint32_t addr = 0x1FFF0000;
 8000e2c:	4b09      	ldr	r3, [pc, #36]	; (8000e54 <JumpToBootloader+0x2c>)
 8000e2e:	9301      	str	r3, [sp, #4]
	/**
	 * Step: Disable RCC, set it to default (after reset) settings
	 *       Internal clock, no PLL, etc.
	 */
#if defined(USE_HAL_DRIVER)
	HAL_RCC_DeInit();
 8000e30:	f001 fdd6 	bl	80029e0 <HAL_RCC_DeInit>
#endif /* defined(USE_STDPERIPH_DRIVER) */

	/**
	 * Step: Disable systick timer and reset it to default values
	 */
	SysTick->CTRL = 0;
 8000e34:	4b08      	ldr	r3, [pc, #32]	; (8000e58 <JumpToBootloader+0x30>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0;
 8000e3a:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 8000e3c:	609a      	str	r2, [r3, #8]
  __ASM volatile ("cpsid i" : : : "memory");
 8000e3e:	b672      	cpsid	i

	/**
	 * Step: Set jump memory location for system memory
	 *       Use address with 4 bytes offset which specifies jump location where program starts
	 */
	SysMemBootJump = (void (*)(void)) (*((uint32_t *)(addr + 4)));
 8000e40:	9b01      	ldr	r3, [sp, #4]
 8000e42:	685b      	ldr	r3, [r3, #4]
	 *       This step must be done last otherwise local variables in this function
	 *       don't have proper value since stack pointer is located on different position
	 *
	 *       Set direct address location which specifies stack pointer in SRAM location
	 */
	__set_MSP(*(uint32_t *)addr);
 8000e44:	9a01      	ldr	r2, [sp, #4]
 8000e46:	6812      	ldr	r2, [r2, #0]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000e48:	f382 8808 	msr	MSP, r2

	/**
	 * Step: Actually call our function to jump to set location
	 *       This will start system memory execution
	 */
	SysMemBootJump();
 8000e4c:	4798      	blx	r3

	/**
	 * Step: Connect USB<->UART converter to dedicated USART pins and test
	 *       and test with bootloader works with STM32 Flash Loader Demonstrator software
	 */
}
 8000e4e:	b003      	add	sp, #12
 8000e50:	bd00      	pop	{pc}
 8000e52:	46c0      	nop			; (mov r8, r8)
 8000e54:	1fff0000 	.word	0x1fff0000
 8000e58:	e000e010 	.word	0xe000e010

08000e5c <ecRx_Init>:
  * @param[out]  global
  * @retval None
  */
void ecRx_Init(void)
{
  g_rxRdy = 0;
 8000e5c:	4b0a      	ldr	r3, [pc, #40]	; (8000e88 <ecRx_Init+0x2c>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	801a      	strh	r2, [r3, #0]
  g_rx_chars = 0;
 8000e62:	4b0a      	ldr	r3, [pc, #40]	; (8000e8c <ecRx_Init+0x30>)
 8000e64:	701a      	strb	r2, [r3, #0]
  rxActiveBuffer = rxBuffer1;
 8000e66:	4b0a      	ldr	r3, [pc, #40]	; (8000e90 <ecRx_Init+0x34>)
 8000e68:	4a0a      	ldr	r2, [pc, #40]	; (8000e94 <ecRx_Init+0x38>)
 8000e6a:	6013      	str	r3, [r2, #0]
  rxUserBuffer = rxBuffer1;
 8000e6c:	4a0a      	ldr	r2, [pc, #40]	; (8000e98 <ecRx_Init+0x3c>)
 8000e6e:	6013      	str	r3, [r2, #0]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
{
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8000e70:	4b0a      	ldr	r3, [pc, #40]	; (8000e9c <ecRx_Init+0x40>)
 8000e72:	2208      	movs	r2, #8
 8000e74:	621a      	str	r2, [r3, #32]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE_RXFNE(USART_TypeDef *USARTx)
{
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	2120      	movs	r1, #32
 8000e7a:	430a      	orrs	r2, r1
 8000e7c:	601a      	str	r2, [r3, #0]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
{
  SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8000e7e:	689a      	ldr	r2, [r3, #8]
 8000e80:	391f      	subs	r1, #31
 8000e82:	430a      	orrs	r2, r1
 8000e84:	609a      	str	r2, [r3, #8]
  LL_USART_ClearFlag_ORE(USART2);
  /* Enable RXNE and Error interrupts */
  LL_USART_EnableIT_RXNE(USART2);
  LL_USART_EnableIT_ERROR(USART2);

}
 8000e86:	4770      	bx	lr
 8000e88:	20000236 	.word	0x20000236
 8000e8c:	20000234 	.word	0x20000234
 8000e90:	2000023c 	.word	0x2000023c
 8000e94:	20000200 	.word	0x20000200
 8000e98:	20000238 	.word	0x20000238
 8000e9c:	40004400 	.word	0x40004400

08000ea0 <ecTxString>:
  * @param[in]  *string
  * @param[in]  string kength
  * @retval     None
  */
void ecTxString(char *string, uint8_t Size)
{
 8000ea0:	b510      	push	{r4, lr}

    uint8_t enableTx;
#ifdef SERIAL_DEBUG
    enableTx = 1;
#else
    enableTx = !g_sys_Mode; //serial mode: g_sys_Mode = 0
 8000ea2:	4b0c      	ldr	r3, [pc, #48]	; (8000ed4 <ecTxString+0x34>)
 8000ea4:	781b      	ldrb	r3, [r3, #0]
#endif
    if(enableTx)
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d00c      	beq.n	8000ec4 <ecTxString+0x24>
      /* Wait for TC flag to be raised for last char */
      while (!LL_USART_IsActiveFlag_TC(USART2))
      {
      }
    }
}
 8000eaa:	bd10      	pop	{r4, pc}
        LL_USART_TransmitData8(USART2, *pchar++);
 8000eac:	7804      	ldrb	r4, [r0, #0]
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->TDR = Value;
 8000eae:	4b0a      	ldr	r3, [pc, #40]	; (8000ed8 <ecTxString+0x38>)
 8000eb0:	629c      	str	r4, [r3, #40]	; 0x28
      for (index = 0; index < Size; index++)
 8000eb2:	3201      	adds	r2, #1
        LL_USART_TransmitData8(USART2, *pchar++);
 8000eb4:	3001      	adds	r0, #1
      for (index = 0; index < Size; index++)
 8000eb6:	4291      	cmp	r1, r2
 8000eb8:	d906      	bls.n	8000ec8 <ecTxString+0x28>
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 8000eba:	4b07      	ldr	r3, [pc, #28]	; (8000ed8 <ecTxString+0x38>)
 8000ebc:	69db      	ldr	r3, [r3, #28]
 8000ebe:	061b      	lsls	r3, r3, #24
 8000ec0:	d5fb      	bpl.n	8000eba <ecTxString+0x1a>
 8000ec2:	e7f3      	b.n	8000eac <ecTxString+0xc>
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	e7f6      	b.n	8000eb6 <ecTxString+0x16>
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 8000ec8:	4b03      	ldr	r3, [pc, #12]	; (8000ed8 <ecTxString+0x38>)
 8000eca:	69db      	ldr	r3, [r3, #28]
 8000ecc:	065b      	lsls	r3, r3, #25
 8000ece:	d5fb      	bpl.n	8000ec8 <ecTxString+0x28>
 8000ed0:	e7eb      	b.n	8000eaa <ecTxString+0xa>
 8000ed2:	46c0      	nop			; (mov r8, r8)
 8000ed4:	200001a0 	.word	0x200001a0
 8000ed8:	40004400 	.word	0x40004400

08000edc <ecGetRxString>:
  * @param[out] *databuf pointer to external buffer
  * @param[in]  maxSize databuf lenght
  * @retval     None
  */
int16_t ecGetRxString(uint8_t *dataBuf, uint8_t maxSize)
{
 8000edc:	b510      	push	{r4, lr}
    int16_t retVal = 0;

    if(g_rxRdy > 0)
 8000ede:	4b0b      	ldr	r3, [pc, #44]	; (8000f0c <ecGetRxString+0x30>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	5e9b      	ldrsh	r3, [r3, r2]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	dc01      	bgt.n	8000eec <ecGetRxString+0x10>
    int16_t retVal = 0;
 8000ee8:	2000      	movs	r0, #0
       g_rxRdy = 0;
//       g_rx_chars = 0;
       NVIC_EnableIRQ(USART2_IRQn);
    }
    return retVal;
}
 8000eea:	bd10      	pop	{r4, pc}
       strncpy((char*)dataBuf, (char*)rxUserBuffer, maxSize);
 8000eec:	4c08      	ldr	r4, [pc, #32]	; (8000f10 <ecGetRxString+0x34>)
 8000eee:	000a      	movs	r2, r1
 8000ef0:	6821      	ldr	r1, [r4, #0]
 8000ef2:	f002 fe63 	bl	8003bbc <strncpy>
       rxUserBuffer = 0;
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	6022      	str	r2, [r4, #0]
       retVal = g_rxRdy;
 8000efa:	4b04      	ldr	r3, [pc, #16]	; (8000f0c <ecGetRxString+0x30>)
 8000efc:	2100      	movs	r1, #0
 8000efe:	5e58      	ldrsh	r0, [r3, r1]
       g_rxRdy = 0;
 8000f00:	801a      	strh	r2, [r3, #0]
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f02:	4b04      	ldr	r3, [pc, #16]	; (8000f14 <ecGetRxString+0x38>)
 8000f04:	2280      	movs	r2, #128	; 0x80
 8000f06:	0552      	lsls	r2, r2, #21
 8000f08:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
 8000f0a:	e7ee      	b.n	8000eea <ecGetRxString+0xe>
 8000f0c:	20000236 	.word	0x20000236
 8000f10:	20000238 	.word	0x20000238
 8000f14:	e000e100 	.word	0xe000e100

08000f18 <ecUSART_Rx_Callback>:
  * @brief  Function called from USART IRQ Handler from file stm32g0xx_it.c
  * @param  None
  * @retval None
  */
void ecUSART_Rx_Callback(void)
{
 8000f18:	b510      	push	{r4, lr}

    uint8_t rxData;
    /* Read Received character. RXNE flag is cleared by reading of RDR register */
    if(g_rx_chars < RX_BUFFER_SIZE)
 8000f1a:	4b1a      	ldr	r3, [pc, #104]	; (8000f84 <ecUSART_Rx_Callback+0x6c>)
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	2b2f      	cmp	r3, #47	; 0x2f
 8000f20:	d829      	bhi.n	8000f76 <ecUSART_Rx_Callback+0x5e>
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8000f22:	4a19      	ldr	r2, [pc, #100]	; (8000f88 <ecUSART_Rx_Callback+0x70>)
 8000f24:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000f26:	b2d2      	uxtb	r2, r2
    {
        rxData = LL_USART_ReceiveData8(USART2);
        if((rxData == '\r') || (rxData == '\n'))
 8000f28:	2a0d      	cmp	r2, #13
 8000f2a:	d009      	beq.n	8000f40 <ecUSART_Rx_Callback+0x28>
 8000f2c:	2a0a      	cmp	r2, #10
 8000f2e:	d007      	beq.n	8000f40 <ecUSART_Rx_Callback+0x28>
                    rxActiveBuffer = rxBuffer1;
            }
        }
        else
        {
            rxActiveBuffer[g_rx_chars] = rxData;
 8000f30:	4916      	ldr	r1, [pc, #88]	; (8000f8c <ecUSART_Rx_Callback+0x74>)
 8000f32:	6809      	ldr	r1, [r1, #0]
 8000f34:	54ca      	strb	r2, [r1, r3]
            g_rx_chars ++;
 8000f36:	4a13      	ldr	r2, [pc, #76]	; (8000f84 <ecUSART_Rx_Callback+0x6c>)
 8000f38:	7813      	ldrb	r3, [r2, #0]
 8000f3a:	3301      	adds	r3, #1
 8000f3c:	7013      	strb	r3, [r2, #0]
 8000f3e:	e020      	b.n	8000f82 <ecUSART_Rx_Callback+0x6a>
            if(g_rx_chars > 0) //else ignore EOL
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d01e      	beq.n	8000f82 <ecUSART_Rx_Callback+0x6a>
                rxActiveBuffer[g_rx_chars] = 0;
 8000f44:	4a11      	ldr	r2, [pc, #68]	; (8000f8c <ecUSART_Rx_Callback+0x74>)
 8000f46:	6811      	ldr	r1, [r2, #0]
 8000f48:	468c      	mov	ip, r1
 8000f4a:	4463      	add	r3, ip
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	7019      	strb	r1, [r3, #0]
                g_rxRdy = g_rx_chars;;
 8000f50:	4b0c      	ldr	r3, [pc, #48]	; (8000f84 <ecUSART_Rx_Callback+0x6c>)
 8000f52:	781c      	ldrb	r4, [r3, #0]
 8000f54:	480e      	ldr	r0, [pc, #56]	; (8000f90 <ecUSART_Rx_Callback+0x78>)
 8000f56:	8004      	strh	r4, [r0, #0]
                g_rx_chars = 0;
 8000f58:	7019      	strb	r1, [r3, #0]
                rxUserBuffer = rxActiveBuffer;
 8000f5a:	6813      	ldr	r3, [r2, #0]
 8000f5c:	4a0d      	ldr	r2, [pc, #52]	; (8000f94 <ecUSART_Rx_Callback+0x7c>)
 8000f5e:	6013      	str	r3, [r2, #0]
                if(rxActiveBuffer == rxBuffer1)
 8000f60:	4a0d      	ldr	r2, [pc, #52]	; (8000f98 <ecUSART_Rx_Callback+0x80>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d003      	beq.n	8000f6e <ecUSART_Rx_Callback+0x56>
                    rxActiveBuffer = rxBuffer1;
 8000f66:	4b09      	ldr	r3, [pc, #36]	; (8000f8c <ecUSART_Rx_Callback+0x74>)
 8000f68:	4a0b      	ldr	r2, [pc, #44]	; (8000f98 <ecUSART_Rx_Callback+0x80>)
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	e009      	b.n	8000f82 <ecUSART_Rx_Callback+0x6a>
                    rxActiveBuffer = rxBuffer2;
 8000f6e:	4b07      	ldr	r3, [pc, #28]	; (8000f8c <ecUSART_Rx_Callback+0x74>)
 8000f70:	4a0a      	ldr	r2, [pc, #40]	; (8000f9c <ecUSART_Rx_Callback+0x84>)
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	e005      	b.n	8000f82 <ecUSART_Rx_Callback+0x6a>
        }
    }
    else
    {
        g_rx_chars = 0;
 8000f76:	4b03      	ldr	r3, [pc, #12]	; (8000f84 <ecUSART_Rx_Callback+0x6c>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	701a      	strb	r2, [r3, #0]
        g_rxRdy = -1;
 8000f7c:	4b04      	ldr	r3, [pc, #16]	; (8000f90 <ecUSART_Rx_Callback+0x78>)
 8000f7e:	3a01      	subs	r2, #1
 8000f80:	801a      	strh	r2, [r3, #0]
    }

}
 8000f82:	bd10      	pop	{r4, pc}
 8000f84:	20000234 	.word	0x20000234
 8000f88:	40004400 	.word	0x40004400
 8000f8c:	20000200 	.word	0x20000200
 8000f90:	20000236 	.word	0x20000236
 8000f94:	20000238 	.word	0x20000238
 8000f98:	2000023c 	.word	0x2000023c
 8000f9c:	20000204 	.word	0x20000204

08000fa0 <ecUSART_Rx_Error_Callback>:
  * @brief  Function called in case of error detected in USART IT Handler
  * @param  None
  * @retval None
  */
void ecUSART_Rx_Error_Callback(void)
{
 8000fa0:	b082      	sub	sp, #8
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fa2:	4a1b      	ldr	r2, [pc, #108]	; (8001010 <ecUSART_Rx_Error_Callback+0x70>)
 8000fa4:	2380      	movs	r3, #128	; 0x80
 8000fa6:	2180      	movs	r1, #128	; 0x80
 8000fa8:	0549      	lsls	r1, r1, #21
 8000faa:	50d1      	str	r1, [r2, r3]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000fac:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000fb0:	f3bf 8f6f 	isb	sy

  /* Error handling :
    in this UPS application, all Rx errors must be ignored because of
     undefined states of the Rx line
  */
  isr_reg = LL_USART_ReadReg(USART2, ISR);
 8000fb4:	4b17      	ldr	r3, [pc, #92]	; (8001014 <ecUSART_Rx_Error_Callback+0x74>)
 8000fb6:	69db      	ldr	r3, [r3, #28]
 8000fb8:	9301      	str	r3, [sp, #4]
  if (isr_reg & LL_USART_ISR_NE)
 8000fba:	9b01      	ldr	r3, [sp, #4]
 8000fbc:	075b      	lsls	r3, r3, #29
 8000fbe:	d508      	bpl.n	8000fd2 <ecUSART_Rx_Error_Callback+0x32>
  WRITE_REG(USARTx->ICR, USART_ICR_NECF);
 8000fc0:	4b14      	ldr	r3, [pc, #80]	; (8001014 <ecUSART_Rx_Error_Callback+0x74>)
 8000fc2:	2204      	movs	r2, #4
 8000fc4:	621a      	str	r2, [r3, #32]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fc6:	4b12      	ldr	r3, [pc, #72]	; (8001010 <ecUSART_Rx_Error_Callback+0x70>)
 8000fc8:	2280      	movs	r2, #128	; 0x80
 8000fca:	0552      	lsls	r2, r2, #21
 8000fcc:	601a      	str	r2, [r3, #0]
      g_debugInt ++;
    /* Unexpected IT source : Set LED to Blinking mode to indicate error occurs */
//    LED_Blinking(LED_BLINK_ERROR);
  }
  NVIC_EnableIRQ(USART2_IRQn);
}
 8000fce:	b002      	add	sp, #8
 8000fd0:	4770      	bx	lr
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8000fd2:	4b10      	ldr	r3, [pc, #64]	; (8001014 <ecUSART_Rx_Error_Callback+0x74>)
 8000fd4:	69db      	ldr	r3, [r3, #28]
 8000fd6:	071b      	lsls	r3, r3, #28
 8000fd8:	d50a      	bpl.n	8000ff0 <ecUSART_Rx_Error_Callback+0x50>
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8000fda:	4b0e      	ldr	r3, [pc, #56]	; (8001014 <ecUSART_Rx_Error_Callback+0x74>)
 8000fdc:	2208      	movs	r2, #8
 8000fde:	621a      	str	r2, [r3, #32]
      g_rx_chars = 0;
 8000fe0:	4b0d      	ldr	r3, [pc, #52]	; (8001018 <ecUSART_Rx_Error_Callback+0x78>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	701a      	strb	r2, [r3, #0]
      g_debugInt ++;
 8000fe6:	4a0d      	ldr	r2, [pc, #52]	; (800101c <ecUSART_Rx_Error_Callback+0x7c>)
 8000fe8:	6813      	ldr	r3, [r2, #0]
 8000fea:	3301      	adds	r3, #1
 8000fec:	6013      	str	r3, [r2, #0]
 8000fee:	e7ea      	b.n	8000fc6 <ecUSART_Rx_Error_Callback+0x26>
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 8000ff0:	4b08      	ldr	r3, [pc, #32]	; (8001014 <ecUSART_Rx_Error_Callback+0x74>)
 8000ff2:	69db      	ldr	r3, [r3, #28]
 8000ff4:	079b      	lsls	r3, r3, #30
 8000ff6:	d407      	bmi.n	8001008 <ecUSART_Rx_Error_Callback+0x68>
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 8000ff8:	4b06      	ldr	r3, [pc, #24]	; (8001014 <ecUSART_Rx_Error_Callback+0x74>)
 8000ffa:	69db      	ldr	r3, [r3, #28]
 8000ffc:	075b      	lsls	r3, r3, #29
 8000ffe:	d5ef      	bpl.n	8000fe0 <ecUSART_Rx_Error_Callback+0x40>
  WRITE_REG(USARTx->ICR, USART_ICR_NECF);
 8001000:	4b04      	ldr	r3, [pc, #16]	; (8001014 <ecUSART_Rx_Error_Callback+0x74>)
 8001002:	2204      	movs	r2, #4
 8001004:	621a      	str	r2, [r3, #32]
}
 8001006:	e7eb      	b.n	8000fe0 <ecUSART_Rx_Error_Callback+0x40>
  WRITE_REG(USARTx->ICR, USART_ICR_FECF);
 8001008:	4b02      	ldr	r3, [pc, #8]	; (8001014 <ecUSART_Rx_Error_Callback+0x74>)
 800100a:	2202      	movs	r2, #2
 800100c:	621a      	str	r2, [r3, #32]
}
 800100e:	e7e7      	b.n	8000fe0 <ecUSART_Rx_Error_Callback+0x40>
 8001010:	e000e100 	.word	0xe000e100
 8001014:	40004400 	.word	0x40004400
 8001018:	20000234 	.word	0x20000234
 800101c:	200001a4 	.word	0x200001a4

08001020 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001020:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001022:	46ce      	mov	lr, r9
 8001024:	4647      	mov	r7, r8
 8001026:	b580      	push	{r7, lr}
 8001028:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800102a:	2214      	movs	r2, #20
 800102c:	2100      	movs	r1, #0
 800102e:	a803      	add	r0, sp, #12
 8001030:	f002 fd67 	bl	8003b02 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001034:	4b3d      	ldr	r3, [pc, #244]	; (800112c <MX_GPIO_Init+0x10c>)
 8001036:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001038:	2202      	movs	r2, #2
 800103a:	4311      	orrs	r1, r2
 800103c:	6359      	str	r1, [r3, #52]	; 0x34
 800103e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001040:	400a      	ands	r2, r1
 8001042:	9200      	str	r2, [sp, #0]
 8001044:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001046:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001048:	2204      	movs	r2, #4
 800104a:	4311      	orrs	r1, r2
 800104c:	6359      	str	r1, [r3, #52]	; 0x34
 800104e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001050:	400a      	ands	r2, r1
 8001052:	9201      	str	r2, [sp, #4]
 8001054:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001056:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001058:	2501      	movs	r5, #1
 800105a:	432a      	orrs	r2, r5
 800105c:	635a      	str	r2, [r3, #52]	; 0x34
 800105e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001060:	402b      	ands	r3, r5
 8001062:	9302      	str	r3, [sp, #8]
 8001064:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Pi_Pin|LED_Batt_Pin, GPIO_PIN_RESET);
 8001066:	24a0      	movs	r4, #160	; 0xa0
 8001068:	00a4      	lsls	r4, r4, #2
 800106a:	4f31      	ldr	r7, [pc, #196]	; (8001130 <MX_GPIO_Init+0x110>)
 800106c:	2200      	movs	r2, #0
 800106e:	0021      	movs	r1, r4
 8001070:	0038      	movs	r0, r7
 8001072:	f001 fc7c 	bl	800296e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Main_GPIO_Port, LED_Main_Pin, GPIO_PIN_RESET);
 8001076:	2380      	movs	r3, #128	; 0x80
 8001078:	021b      	lsls	r3, r3, #8
 800107a:	4699      	mov	r9, r3
 800107c:	4b2d      	ldr	r3, [pc, #180]	; (8001134 <MX_GPIO_Init+0x114>)
 800107e:	4698      	mov	r8, r3
 8001080:	2200      	movs	r2, #0
 8001082:	4649      	mov	r1, r9
 8001084:	0018      	movs	r0, r3
 8001086:	f001 fc72 	bl	800296e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN_5V_Pin|CMD_OUT_Pin, GPIO_PIN_SET);
 800108a:	26a0      	movs	r6, #160	; 0xa0
 800108c:	05f6      	lsls	r6, r6, #23
 800108e:	2201      	movs	r2, #1
 8001090:	4929      	ldr	r1, [pc, #164]	; (8001138 <MX_GPIO_Init+0x118>)
 8001092:	0030      	movs	r0, r6
 8001094:	f001 fc6b 	bl	800296e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001098:	2200      	movs	r2, #0
 800109a:	2120      	movs	r1, #32
 800109c:	0030      	movs	r0, r6
 800109e:	f001 fc66 	bl	800296e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_Pi_Pin LED_Batt_Pin */
  GPIO_InitStruct.Pin = LED_Pi_Pin|LED_Batt_Pin;
 80010a2:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a4:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a6:	2400      	movs	r4, #0
 80010a8:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010aa:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ac:	a903      	add	r1, sp, #12
 80010ae:	0038      	movs	r0, r7
 80010b0:	f001 fb98 	bl	80027e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Main_Pin */
  GPIO_InitStruct.Pin = LED_Main_Pin;
 80010b4:	464b      	mov	r3, r9
 80010b6:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b8:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ba:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010bc:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(LED_Main_GPIO_Port, &GPIO_InitStruct);
 80010be:	a903      	add	r1, sp, #12
 80010c0:	4640      	mov	r0, r8
 80010c2:	f001 fb8f 	bl	80027e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN_5V_Pin LED_Pin */
  GPIO_InitStruct.Pin = EN_5V_Pin|LED_Pin;
 80010c6:	2321      	movs	r3, #33	; 0x21
 80010c8:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ca:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010cc:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ce:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d0:	a903      	add	r1, sp, #12
 80010d2:	0030      	movs	r0, r6
 80010d4:	f001 fb86 	bl	80027e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : nBatt_Pin Mode_Pin */
  GPIO_InitStruct.Pin = nBatt_Pin|Mode_Pin;
 80010d8:	23c0      	movs	r3, #192	; 0xc0
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010de:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010e0:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e2:	a903      	add	r1, sp, #12
 80010e4:	0030      	movs	r0, r6
 80010e6:	f001 fb7d 	bl	80027e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CMD_OUT_Pin */
  GPIO_InitStruct.Pin = CMD_OUT_Pin;
 80010ea:	2380      	movs	r3, #128	; 0x80
 80010ec:	011b      	lsls	r3, r3, #4
 80010ee:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80010f0:	2311      	movs	r3, #17
 80010f2:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f4:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f6:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(CMD_OUT_GPIO_Port, &GPIO_InitStruct);
 80010f8:	a903      	add	r1, sp, #12
 80010fa:	0030      	movs	r0, r6
 80010fc:	f001 fb72 	bl	80027e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACK_IN_Pin */
  GPIO_InitStruct.Pin = ACK_IN_Pin;
 8001100:	2380      	movs	r3, #128	; 0x80
 8001102:	015b      	lsls	r3, r3, #5
 8001104:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001106:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001108:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(ACK_IN_GPIO_Port, &GPIO_InitStruct);
 800110a:	a903      	add	r1, sp, #12
 800110c:	0030      	movs	r0, r6
 800110e:	f001 fb69 	bl	80027e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8001112:	2340      	movs	r3, #64	; 0x40
 8001114:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001116:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001118:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 800111a:	a903      	add	r1, sp, #12
 800111c:	0038      	movs	r0, r7
 800111e:	f001 fb61 	bl	80027e4 <HAL_GPIO_Init>

}
 8001122:	b009      	add	sp, #36	; 0x24
 8001124:	bcc0      	pop	{r6, r7}
 8001126:	46b9      	mov	r9, r7
 8001128:	46b0      	mov	r8, r6
 800112a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800112c:	40021000 	.word	0x40021000
 8001130:	50000400 	.word	0x50000400
 8001134:	50000800 	.word	0x50000800
 8001138:	00000801 	.word	0x00000801

0800113c <MX_DMA_Init>:
{
 800113c:	b500      	push	{lr}
 800113e:	b083      	sub	sp, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001140:	4a09      	ldr	r2, [pc, #36]	; (8001168 <MX_DMA_Init+0x2c>)
 8001142:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8001144:	2301      	movs	r3, #1
 8001146:	4319      	orrs	r1, r3
 8001148:	6391      	str	r1, [r2, #56]	; 0x38
 800114a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800114c:	4013      	ands	r3, r2
 800114e:	9301      	str	r3, [sp, #4]
 8001150:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001152:	2200      	movs	r2, #0
 8001154:	2100      	movs	r1, #0
 8001156:	2009      	movs	r0, #9
 8001158:	f001 f98c 	bl	8002474 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800115c:	2009      	movs	r0, #9
 800115e:	f001 f9b9 	bl	80024d4 <HAL_NVIC_EnableIRQ>
}
 8001162:	b003      	add	sp, #12
 8001164:	bd00      	pop	{pc}
 8001166:	46c0      	nop			; (mov r8, r8)
 8001168:	40021000 	.word	0x40021000

0800116c <MX_ADC1_Init>:
{
 800116c:	b530      	push	{r4, r5, lr}
 800116e:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 8001170:	220c      	movs	r2, #12
 8001172:	2100      	movs	r1, #0
 8001174:	a801      	add	r0, sp, #4
 8001176:	f002 fcc4 	bl	8003b02 <memset>
  hadc1.Instance = ADC1;
 800117a:	4c21      	ldr	r4, [pc, #132]	; (8001200 <MX_ADC1_Init+0x94>)
 800117c:	4b21      	ldr	r3, [pc, #132]	; (8001204 <MX_ADC1_Init+0x98>)
 800117e:	6023      	str	r3, [r4, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001180:	2380      	movs	r3, #128	; 0x80
 8001182:	05db      	lsls	r3, r3, #23
 8001184:	6063      	str	r3, [r4, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001186:	2300      	movs	r3, #0
 8001188:	60a3      	str	r3, [r4, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800118a:	60e3      	str	r3, [r4, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_SEQ_FIXED;
 800118c:	2280      	movs	r2, #128	; 0x80
 800118e:	0612      	lsls	r2, r2, #24
 8001190:	6122      	str	r2, [r4, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001192:	2208      	movs	r2, #8
 8001194:	6162      	str	r2, [r4, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001196:	7623      	strb	r3, [r4, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8001198:	7663      	strb	r3, [r4, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800119a:	76a3      	strb	r3, [r4, #26]
  hadc1.Init.NbrOfConversion = 1;
 800119c:	2501      	movs	r5, #1
 800119e:	61e5      	str	r5, [r4, #28]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 80011a0:	2120      	movs	r1, #32
 80011a2:	5465      	strb	r5, [r4, r1]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011a4:	6263      	str	r3, [r4, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011a6:	62a3      	str	r3, [r4, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80011a8:	310c      	adds	r1, #12
 80011aa:	5463      	strb	r3, [r4, r1]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80011ac:	6323      	str	r3, [r4, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_39CYCLES_5;
 80011ae:	3927      	subs	r1, #39	; 0x27
 80011b0:	6361      	str	r1, [r4, #52]	; 0x34
  hadc1.Init.OversamplingMode = ENABLE;
 80011b2:	3137      	adds	r1, #55	; 0x37
 80011b4:	5465      	strb	r5, [r4, r1]
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_8;
 80011b6:	6422      	str	r2, [r4, #64]	; 0x40
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_3;
 80011b8:	3258      	adds	r2, #88	; 0x58
 80011ba:	6462      	str	r2, [r4, #68]	; 0x44
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 80011bc:	64a3      	str	r3, [r4, #72]	; 0x48
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_LOW;
 80011be:	2380      	movs	r3, #128	; 0x80
 80011c0:	059b      	lsls	r3, r3, #22
 80011c2:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011c4:	0020      	movs	r0, r4
 80011c6:	f000 fc63 	bl	8001a90 <HAL_ADC_Init>
  sConfig.Channel = ADC_CHANNEL_1;
 80011ca:	4b0f      	ldr	r3, [pc, #60]	; (8001208 <MX_ADC1_Init+0x9c>)
 80011cc:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80011ce:	9502      	str	r5, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011d0:	a901      	add	r1, sp, #4
 80011d2:	0020      	movs	r0, r4
 80011d4:	f000 fe9e 	bl	8001f14 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_4;
 80011d8:	4b0c      	ldr	r3, [pc, #48]	; (800120c <MX_ADC1_Init+0xa0>)
 80011da:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011dc:	a901      	add	r1, sp, #4
 80011de:	0020      	movs	r0, r4
 80011e0:	f000 fe98 	bl	8001f14 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_6;
 80011e4:	4b0a      	ldr	r3, [pc, #40]	; (8001210 <MX_ADC1_Init+0xa4>)
 80011e6:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011e8:	a901      	add	r1, sp, #4
 80011ea:	0020      	movs	r0, r4
 80011ec:	f000 fe92 	bl	8001f14 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80011f0:	4b08      	ldr	r3, [pc, #32]	; (8001214 <MX_ADC1_Init+0xa8>)
 80011f2:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011f4:	a901      	add	r1, sp, #4
 80011f6:	0020      	movs	r0, r4
 80011f8:	f000 fe8c 	bl	8001f14 <HAL_ADC_ConfigChannel>
}
 80011fc:	b005      	add	sp, #20
 80011fe:	bd30      	pop	{r4, r5, pc}
 8001200:	200002bc 	.word	0x200002bc
 8001204:	40012400 	.word	0x40012400
 8001208:	04000002 	.word	0x04000002
 800120c:	10000010 	.word	0x10000010
 8001210:	18000040 	.word	0x18000040
 8001214:	b0001000 	.word	0xb0001000

08001218 <MX_TIM3_Init>:
{
 8001218:	b530      	push	{r4, r5, lr}
 800121a:	b089      	sub	sp, #36	; 0x24
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800121c:	2210      	movs	r2, #16
 800121e:	2100      	movs	r1, #0
 8001220:	a804      	add	r0, sp, #16
 8001222:	f002 fc6e 	bl	8003b02 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001226:	220c      	movs	r2, #12
 8001228:	2100      	movs	r1, #0
 800122a:	a801      	add	r0, sp, #4
 800122c:	f002 fc69 	bl	8003b02 <memset>
  htim3.Instance = TIM3;
 8001230:	4c0e      	ldr	r4, [pc, #56]	; (800126c <MX_TIM3_Init+0x54>)
 8001232:	4b0f      	ldr	r3, [pc, #60]	; (8001270 <MX_TIM3_Init+0x58>)
 8001234:	6023      	str	r3, [r4, #0]
  htim3.Init.Prescaler = 8000;
 8001236:	23fa      	movs	r3, #250	; 0xfa
 8001238:	015b      	lsls	r3, r3, #5
 800123a:	6063      	str	r3, [r4, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800123c:	2500      	movs	r5, #0
 800123e:	60a5      	str	r5, [r4, #8]
  htim3.Init.Period = 1;
 8001240:	2301      	movs	r3, #1
 8001242:	60e3      	str	r3, [r4, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001244:	6125      	str	r5, [r4, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001246:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001248:	0020      	movs	r0, r4
 800124a:	f002 f9bf 	bl	80035cc <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800124e:	2380      	movs	r3, #128	; 0x80
 8001250:	015b      	lsls	r3, r3, #5
 8001252:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001254:	a904      	add	r1, sp, #16
 8001256:	0020      	movs	r0, r4
 8001258:	f002 f9f4 	bl	8003644 <HAL_TIM_ConfigClockSource>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800125c:	9501      	str	r5, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800125e:	9503      	str	r5, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001260:	a901      	add	r1, sp, #4
 8001262:	0020      	movs	r0, r4
 8001264:	f002 fa60 	bl	8003728 <HAL_TIMEx_MasterConfigSynchronization>
}
 8001268:	b009      	add	sp, #36	; 0x24
 800126a:	bd30      	pop	{r4, r5, pc}
 800126c:	20000270 	.word	0x20000270
 8001270:	40000400 	.word	0x40000400

08001274 <MX_USART2_UART_Init>:
{
 8001274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001276:	b091      	sub	sp, #68	; 0x44
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001278:	2220      	movs	r2, #32
 800127a:	2100      	movs	r1, #0
 800127c:	a808      	add	r0, sp, #32
 800127e:	f002 fc40 	bl	8003b02 <memset>
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APBENR1, Periphs);
 8001282:	4b2f      	ldr	r3, [pc, #188]	; (8001340 <MX_USART2_UART_Init+0xcc>)
 8001284:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001286:	2080      	movs	r0, #128	; 0x80
 8001288:	0280      	lsls	r0, r0, #10
 800128a:	4301      	orrs	r1, r0
 800128c:	63d9      	str	r1, [r3, #60]	; 0x3c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 800128e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001290:	4002      	ands	r2, r0
 8001292:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8001294:	9a01      	ldr	r2, [sp, #4]
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 8001296:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001298:	2501      	movs	r5, #1
 800129a:	432a      	orrs	r2, r5
 800129c:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 800129e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012a0:	402b      	ands	r3, r5
 80012a2:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 80012a4:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 80012a6:	2304      	movs	r3, #4
 80012a8:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80012aa:	2602      	movs	r6, #2
 80012ac:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_MEDIUM;
 80012ae:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 80012b0:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80012b2:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 80012b4:	9507      	str	r5, [sp, #28]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b6:	27a0      	movs	r7, #160	; 0xa0
 80012b8:	05ff      	lsls	r7, r7, #23
 80012ba:	a902      	add	r1, sp, #8
 80012bc:	0038      	movs	r0, r7
 80012be:	f002 fa6e 	bl	800379e <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 80012c2:	2308      	movs	r3, #8
 80012c4:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80012c6:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80012c8:	2400      	movs	r4, #0
 80012ca:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80012cc:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 80012ce:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 80012d0:	9507      	str	r5, [sp, #28]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d2:	a902      	add	r1, sp, #8
 80012d4:	0038      	movs	r0, r7
 80012d6:	f002 fa62 	bl	800379e <LL_GPIO_Init>
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012da:	4b1a      	ldr	r3, [pc, #104]	; (8001344 <MX_USART2_UART_Init+0xd0>)
 80012dc:	21c7      	movs	r1, #199	; 0xc7
 80012de:	0089      	lsls	r1, r1, #2
 80012e0:	585a      	ldr	r2, [r3, r1]
 80012e2:	20ff      	movs	r0, #255	; 0xff
 80012e4:	4382      	bics	r2, r0
 80012e6:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012e8:	2280      	movs	r2, #128	; 0x80
 80012ea:	0552      	lsls	r2, r2, #21
 80012ec:	601a      	str	r2, [r3, #0]
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 80012ee:	9408      	str	r4, [sp, #32]
  USART_InitStruct.BaudRate = 38400;
 80012f0:	2396      	movs	r3, #150	; 0x96
 80012f2:	021b      	lsls	r3, r3, #8
 80012f4:	9309      	str	r3, [sp, #36]	; 0x24
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80012f6:	940a      	str	r4, [sp, #40]	; 0x28
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80012f8:	940b      	str	r4, [sp, #44]	; 0x2c
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80012fa:	940c      	str	r4, [sp, #48]	; 0x30
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80012fc:	230c      	movs	r3, #12
 80012fe:	930d      	str	r3, [sp, #52]	; 0x34
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001300:	940e      	str	r4, [sp, #56]	; 0x38
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001302:	940f      	str	r4, [sp, #60]	; 0x3c
  LL_USART_Init(USART2, &USART_InitStruct);
 8001304:	4c10      	ldr	r4, [pc, #64]	; (8001348 <MX_USART2_UART_Init+0xd4>)
 8001306:	a908      	add	r1, sp, #32
 8001308:	0020      	movs	r0, r4
 800130a:	f002 fb47 	bl	800399c <LL_USART_Init>
  CLEAR_BIT(USARTx->CR3, USART_CR3_DDRE);
 800130e:	68a3      	ldr	r3, [r4, #8]
 8001310:	4a0e      	ldr	r2, [pc, #56]	; (800134c <MX_USART2_UART_Init+0xd8>)
 8001312:	4013      	ands	r3, r2
 8001314:	60a3      	str	r3, [r4, #8]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001316:	6863      	ldr	r3, [r4, #4]
 8001318:	4a0d      	ldr	r2, [pc, #52]	; (8001350 <MX_USART2_UART_Init+0xdc>)
 800131a:	4013      	ands	r3, r2
 800131c:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800131e:	68a3      	ldr	r3, [r4, #8]
 8001320:	222a      	movs	r2, #42	; 0x2a
 8001322:	4393      	bics	r3, r2
 8001324:	60a3      	str	r3, [r4, #8]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001326:	6823      	ldr	r3, [r4, #0]
 8001328:	431d      	orrs	r5, r3
 800132a:	6025      	str	r5, [r4, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 800132c:	4b06      	ldr	r3, [pc, #24]	; (8001348 <MX_USART2_UART_Init+0xd4>)
 800132e:	69db      	ldr	r3, [r3, #28]
 8001330:	029b      	lsls	r3, r3, #10
 8001332:	d5fb      	bpl.n	800132c <MX_USART2_UART_Init+0xb8>
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8001334:	4b04      	ldr	r3, [pc, #16]	; (8001348 <MX_USART2_UART_Init+0xd4>)
 8001336:	69db      	ldr	r3, [r3, #28]
 8001338:	025b      	lsls	r3, r3, #9
 800133a:	d5f7      	bpl.n	800132c <MX_USART2_UART_Init+0xb8>
}
 800133c:	b011      	add	sp, #68	; 0x44
 800133e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001340:	40021000 	.word	0x40021000
 8001344:	e000e100 	.word	0xe000e100
 8001348:	40004400 	.word	0x40004400
 800134c:	ffffdfff 	.word	0xffffdfff
 8001350:	ffffb7ff 	.word	0xffffb7ff

08001354 <ecFormatFixptStr>:
{
 8001354:	b570      	push	{r4, r5, r6, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	0004      	movs	r4, r0
    snprintf(retStr, sizeof(retStr)-1, "%d.%01d", Raw_value/10, (Raw_value % 10));
 800135a:	210a      	movs	r1, #10
 800135c:	f7fe ff6c 	bl	8000238 <__divsi3>
 8001360:	b205      	sxth	r5, r0
 8001362:	4e08      	ldr	r6, [pc, #32]	; (8001384 <ecFormatFixptStr+0x30>)
 8001364:	210a      	movs	r1, #10
 8001366:	0020      	movs	r0, r4
 8001368:	f7ff f84c 	bl	8000404 <__aeabi_idivmod>
 800136c:	b209      	sxth	r1, r1
 800136e:	9100      	str	r1, [sp, #0]
 8001370:	002b      	movs	r3, r5
 8001372:	4a05      	ldr	r2, [pc, #20]	; (8001388 <ecFormatFixptStr+0x34>)
 8001374:	210f      	movs	r1, #15
 8001376:	0030      	movs	r0, r6
 8001378:	f002 fbcc 	bl	8003b14 <sniprintf>
}
 800137c:	0030      	movs	r0, r6
 800137e:	b002      	add	sp, #8
 8001380:	bd70      	pop	{r4, r5, r6, pc}
 8001382:	46c0      	nop			; (mov r8, r8)
 8001384:	20000094 	.word	0x20000094
 8001388:	080045e4 	.word	0x080045e4

0800138c <SystemClock_Config>:
{
 800138c:	b510      	push	{r4, lr}
 800138e:	b098      	sub	sp, #96	; 0x60
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001390:	2234      	movs	r2, #52	; 0x34
 8001392:	2100      	movs	r1, #0
 8001394:	a80b      	add	r0, sp, #44	; 0x2c
 8001396:	f002 fbb4 	bl	8003b02 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800139a:	2210      	movs	r2, #16
 800139c:	2100      	movs	r1, #0
 800139e:	a807      	add	r0, sp, #28
 80013a0:	f002 fbaf 	bl	8003b02 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013a4:	2218      	movs	r2, #24
 80013a6:	2100      	movs	r1, #0
 80013a8:	a801      	add	r0, sp, #4
 80013aa:	f002 fbaa 	bl	8003b02 <memset>
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013ae:	2080      	movs	r0, #128	; 0x80
 80013b0:	0080      	lsls	r0, r0, #2
 80013b2:	f001 faeb 	bl	800298c <HAL_PWREx_ControlVoltageScaling>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013b6:	2302      	movs	r3, #2
 80013b8:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013ba:	33fe      	adds	r3, #254	; 0xfe
 80013bc:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80013be:	2400      	movs	r4, #0
 80013c0:	940f      	str	r4, [sp, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013c2:	3bc0      	subs	r3, #192	; 0xc0
 80013c4:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80013c6:	9412      	str	r4, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013c8:	a80b      	add	r0, sp, #44	; 0x2c
 80013ca:	f001 fb63 	bl	8002a94 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013ce:	2307      	movs	r3, #7
 80013d0:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80013d2:	9408      	str	r4, [sp, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013d4:	9409      	str	r4, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013d6:	940a      	str	r4, [sp, #40]	; 0x28
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80013d8:	2100      	movs	r1, #0
 80013da:	a807      	add	r0, sp, #28
 80013dc:	f001 fe0c 	bl	8002ff8 <HAL_RCC_ClockConfig>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80013e0:	2380      	movs	r3, #128	; 0x80
 80013e2:	01db      	lsls	r3, r3, #7
 80013e4:	9301      	str	r3, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80013e6:	9405      	str	r4, [sp, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013e8:	a801      	add	r0, sp, #4
 80013ea:	f001 fecb 	bl	8003184 <HAL_RCCEx_PeriphCLKConfig>
}
 80013ee:	b018      	add	sp, #96	; 0x60
 80013f0:	bd10      	pop	{r4, pc}
	...

080013f4 <HAL_ADC_ConvCpltCallback>:
  * @param[out]	g_adc_voltages 			global data structure
  * @param[out]	g_adcRdy				global sync flag measurement complete
  * @retval 	None
	  */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc1)
{
 80013f4:	b570      	push	{r4, r5, r6, lr}

    // values in mV with divider 510kk - 62kk
    g_adc_voltages.main_voltage = (((g_adc_buf.main_voltage / 2) * 15) / 100) + 3;    //[100mV] incl input diode threshold
 80013f6:	4e17      	ldr	r6, [pc, #92]	; (8001454 <HAL_ADC_ConvCpltCallback+0x60>)
 80013f8:	8830      	ldrh	r0, [r6, #0]
 80013fa:	0840      	lsrs	r0, r0, #1
 80013fc:	0103      	lsls	r3, r0, #4
 80013fe:	1a18      	subs	r0, r3, r0
 8001400:	2164      	movs	r1, #100	; 0x64
 8001402:	f7fe ff19 	bl	8000238 <__divsi3>
 8001406:	3003      	adds	r0, #3
 8001408:	b284      	uxth	r4, r0
 800140a:	4d13      	ldr	r5, [pc, #76]	; (8001458 <HAL_ADC_ConvCpltCallback+0x64>)
 800140c:	802c      	strh	r4, [r5, #0]
    g_adc_voltages.batt_voltage = (((g_adc_buf.batt_voltage / 2) * 15) / 100) + 3;    //[100mV] incl input diode threshold
 800140e:	8870      	ldrh	r0, [r6, #2]
 8001410:	0840      	lsrs	r0, r0, #1
 8001412:	0103      	lsls	r3, r0, #4
 8001414:	1a18      	subs	r0, r3, r0
 8001416:	2164      	movs	r1, #100	; 0x64
 8001418:	f7fe ff0e 	bl	8000238 <__divsi3>
 800141c:	3003      	adds	r0, #3
 800141e:	b280      	uxth	r0, r0
 8001420:	8068      	strh	r0, [r5, #2]
    //ignore diode threshold if no input present
    if(g_adc_voltages.main_voltage < 5)
 8001422:	2c04      	cmp	r4, #4
 8001424:	d801      	bhi.n	800142a <HAL_ADC_ConvCpltCallback+0x36>
        g_adc_voltages.main_voltage = 0;
 8001426:	2200      	movs	r2, #0
 8001428:	802a      	strh	r2, [r5, #0]
    if(g_adc_voltages.batt_voltage < 5)
 800142a:	2804      	cmp	r0, #4
 800142c:	d802      	bhi.n	8001434 <HAL_ADC_ConvCpltCallback+0x40>
        g_adc_voltages.batt_voltage = 0;
 800142e:	4b0a      	ldr	r3, [pc, #40]	; (8001458 <HAL_ADC_ConvCpltCallback+0x64>)
 8001430:	2200      	movs	r2, #0
 8001432:	805a      	strh	r2, [r3, #2]


    // >19 --> Pi is powered by USB connector
    g_adc_voltages.Pi_voltage = g_adc_buf.Pi_voltage / 124; //result in 1/10 V
 8001434:	4d07      	ldr	r5, [pc, #28]	; (8001454 <HAL_ADC_ConvCpltCallback+0x60>)
 8001436:	88a8      	ldrh	r0, [r5, #4]
 8001438:	4c07      	ldr	r4, [pc, #28]	; (8001458 <HAL_ADC_ConvCpltCallback+0x64>)
 800143a:	217c      	movs	r1, #124	; 0x7c
 800143c:	f7fe fe72 	bl	8000124 <__udivsi3>
 8001440:	80a0      	strh	r0, [r4, #4]

    g_adc_voltages.CPU_temp = ecGetCPUTemp(g_adc_buf.CPU_temp);
 8001442:	88e8      	ldrh	r0, [r5, #6]
 8001444:	f7ff f8ac 	bl	80005a0 <ecGetCPUTemp>
 8001448:	80e0      	strh	r0, [r4, #6]

    g_adcRdy = 1;
 800144a:	4b04      	ldr	r3, [pc, #16]	; (800145c <HAL_ADC_ConvCpltCallback+0x68>)
 800144c:	2201      	movs	r2, #1
 800144e:	701a      	strb	r2, [r3, #0]
};
 8001450:	bd70      	pop	{r4, r5, r6, pc}
 8001452:	46c0      	nop			; (mov r8, r8)
 8001454:	20000198 	.word	0x20000198
 8001458:	20000144 	.word	0x20000144
 800145c:	2000026c 	.word	0x2000026c

08001460 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc1)
{
//	adc_value = 0;
};
 8001460:	4770      	bx	lr
	...

08001464 <ecDecodeKey>:
  * @param[out]	global keyState
  * @retval 	None
	  */
	/* Function called by timer interrupt */
void ecDecodeKey(void)
{
 8001464:	b510      	push	{r4, lr}

    static uint16_t keyTimer;
    switch (g_keyState)
 8001466:	4b3b      	ldr	r3, [pc, #236]	; (8001554 <ecDecodeKey+0xf0>)
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	b2db      	uxtb	r3, r3
 800146c:	2b08      	cmp	r3, #8
 800146e:	d817      	bhi.n	80014a0 <ecDecodeKey+0x3c>
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	4a39      	ldr	r2, [pc, #228]	; (8001558 <ecDecodeKey+0xf4>)
 8001474:	58d3      	ldr	r3, [r2, r3]
 8001476:	469f      	mov	pc, r3
    {
        case KEY_STATE_WAIT:
            if (HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin) == 0) //low active input
 8001478:	2140      	movs	r1, #64	; 0x40
 800147a:	4838      	ldr	r0, [pc, #224]	; (800155c <ecDecodeKey+0xf8>)
 800147c:	f001 fa70 	bl	8002960 <HAL_GPIO_ReadPin>
 8001480:	2800      	cmp	r0, #0
 8001482:	d10d      	bne.n	80014a0 <ecDecodeKey+0x3c>
            {
                keyTimer = 0;
 8001484:	4b36      	ldr	r3, [pc, #216]	; (8001560 <ecDecodeKey+0xfc>)
 8001486:	2200      	movs	r2, #0
 8001488:	801a      	strh	r2, [r3, #0]
                g_keyState = KEY_STATE_DEBOUNCE;
 800148a:	4b32      	ldr	r3, [pc, #200]	; (8001554 <ecDecodeKey+0xf0>)
 800148c:	3201      	adds	r2, #1
 800148e:	701a      	strb	r2, [r3, #0]
 8001490:	e006      	b.n	80014a0 <ecDecodeKey+0x3c>
            }
            break;

        case KEY_STATE_DEBOUNCE:
            keyTimer ++;
 8001492:	4a33      	ldr	r2, [pc, #204]	; (8001560 <ecDecodeKey+0xfc>)
 8001494:	8813      	ldrh	r3, [r2, #0]
 8001496:	3301      	adds	r3, #1
 8001498:	b29b      	uxth	r3, r3
 800149a:	8013      	strh	r3, [r2, #0]
            if(keyTimer > KEY_T_DEBOUNCE)
 800149c:	2b14      	cmp	r3, #20
 800149e:	d800      	bhi.n	80014a2 <ecDecodeKey+0x3e>
        default:
            break;
    }


}
 80014a0:	bd10      	pop	{r4, pc}
              if (HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin) == 0) //still active
 80014a2:	2140      	movs	r1, #64	; 0x40
 80014a4:	482d      	ldr	r0, [pc, #180]	; (800155c <ecDecodeKey+0xf8>)
 80014a6:	f001 fa5b 	bl	8002960 <HAL_GPIO_ReadPin>
 80014aa:	2800      	cmp	r0, #0
 80014ac:	d103      	bne.n	80014b6 <ecDecodeKey+0x52>
                  g_keyState = KEY_STATE_PRESSED;
 80014ae:	4b29      	ldr	r3, [pc, #164]	; (8001554 <ecDecodeKey+0xf0>)
 80014b0:	2202      	movs	r2, #2
 80014b2:	701a      	strb	r2, [r3, #0]
 80014b4:	e7f4      	b.n	80014a0 <ecDecodeKey+0x3c>
                  g_keyState = KEY_STATE_WAIT;
 80014b6:	4b27      	ldr	r3, [pc, #156]	; (8001554 <ecDecodeKey+0xf0>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	701a      	strb	r2, [r3, #0]
 80014bc:	e7f0      	b.n	80014a0 <ecDecodeKey+0x3c>
            keyTimer ++;
 80014be:	4a28      	ldr	r2, [pc, #160]	; (8001560 <ecDecodeKey+0xfc>)
 80014c0:	8813      	ldrh	r3, [r2, #0]
 80014c2:	3301      	adds	r3, #1
 80014c4:	8013      	strh	r3, [r2, #0]
            if (HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin) == 1) //key released?
 80014c6:	2140      	movs	r1, #64	; 0x40
 80014c8:	4824      	ldr	r0, [pc, #144]	; (800155c <ecDecodeKey+0xf8>)
 80014ca:	f001 fa49 	bl	8002960 <HAL_GPIO_ReadPin>
 80014ce:	2801      	cmp	r0, #1
 80014d0:	d1e6      	bne.n	80014a0 <ecDecodeKey+0x3c>
                g_keyState = KEY_STATE_RELEASED;
 80014d2:	4b20      	ldr	r3, [pc, #128]	; (8001554 <ecDecodeKey+0xf0>)
 80014d4:	2203      	movs	r2, #3
 80014d6:	701a      	strb	r2, [r3, #0]
 80014d8:	e7e2      	b.n	80014a0 <ecDecodeKey+0x3c>
            if(keyTimer > KEY_T_SUPER_LONG)
 80014da:	4b21      	ldr	r3, [pc, #132]	; (8001560 <ecDecodeKey+0xfc>)
 80014dc:	881b      	ldrh	r3, [r3, #0]
 80014de:	4a21      	ldr	r2, [pc, #132]	; (8001564 <ecDecodeKey+0x100>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d903      	bls.n	80014ec <ecDecodeKey+0x88>
                g_keyState = KEY_STATE_SUPER_LONG;
 80014e4:	4b1b      	ldr	r3, [pc, #108]	; (8001554 <ecDecodeKey+0xf0>)
 80014e6:	2205      	movs	r2, #5
 80014e8:	701a      	strb	r2, [r3, #0]
 80014ea:	e7d9      	b.n	80014a0 <ecDecodeKey+0x3c>
            if(keyTimer > KEY_T_LONG)
 80014ec:	22fa      	movs	r2, #250	; 0xfa
 80014ee:	00d2      	lsls	r2, r2, #3
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d903      	bls.n	80014fc <ecDecodeKey+0x98>
                g_keyState = KEY_STATE_LONG;
 80014f4:	4b17      	ldr	r3, [pc, #92]	; (8001554 <ecDecodeKey+0xf0>)
 80014f6:	2206      	movs	r2, #6
 80014f8:	701a      	strb	r2, [r3, #0]
 80014fa:	e7d1      	b.n	80014a0 <ecDecodeKey+0x3c>
                g_keyState = KEY_STATE_CHECK_DOUBLE;
 80014fc:	4b15      	ldr	r3, [pc, #84]	; (8001554 <ecDecodeKey+0xf0>)
 80014fe:	2204      	movs	r2, #4
 8001500:	701a      	strb	r2, [r3, #0]
                keyTimer = 0;
 8001502:	4b17      	ldr	r3, [pc, #92]	; (8001560 <ecDecodeKey+0xfc>)
 8001504:	2200      	movs	r2, #0
 8001506:	801a      	strh	r2, [r3, #0]
 8001508:	e7ca      	b.n	80014a0 <ecDecodeKey+0x3c>
            if (HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin) == 1) //key still released?
 800150a:	2140      	movs	r1, #64	; 0x40
 800150c:	4813      	ldr	r0, [pc, #76]	; (800155c <ecDecodeKey+0xf8>)
 800150e:	f001 fa27 	bl	8002960 <HAL_GPIO_ReadPin>
 8001512:	2801      	cmp	r0, #1
 8001514:	d006      	beq.n	8001524 <ecDecodeKey+0xc0>
                g_keyState = KEY_STATE_WAIT_RELEASE;
 8001516:	4b0f      	ldr	r3, [pc, #60]	; (8001554 <ecDecodeKey+0xf0>)
 8001518:	2208      	movs	r2, #8
 800151a:	701a      	strb	r2, [r3, #0]
                keyTimer = 0;
 800151c:	4b10      	ldr	r3, [pc, #64]	; (8001560 <ecDecodeKey+0xfc>)
 800151e:	2200      	movs	r2, #0
 8001520:	801a      	strh	r2, [r3, #0]
 8001522:	e7bd      	b.n	80014a0 <ecDecodeKey+0x3c>
                keyTimer++;
 8001524:	4a0e      	ldr	r2, [pc, #56]	; (8001560 <ecDecodeKey+0xfc>)
 8001526:	8813      	ldrh	r3, [r2, #0]
 8001528:	3301      	adds	r3, #1
 800152a:	b29b      	uxth	r3, r3
 800152c:	8013      	strh	r3, [r2, #0]
                if(keyTimer > KEY_T_DBL_WINDOW)
 800152e:	22af      	movs	r2, #175	; 0xaf
 8001530:	0052      	lsls	r2, r2, #1
 8001532:	4293      	cmp	r3, r2
 8001534:	d9b4      	bls.n	80014a0 <ecDecodeKey+0x3c>
                    g_keyState = KEY_STATE_SHORT;
 8001536:	4b07      	ldr	r3, [pc, #28]	; (8001554 <ecDecodeKey+0xf0>)
 8001538:	3a58      	subs	r2, #88	; 0x58
 800153a:	3aff      	subs	r2, #255	; 0xff
 800153c:	701a      	strb	r2, [r3, #0]
 800153e:	e7af      	b.n	80014a0 <ecDecodeKey+0x3c>
            if (HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin) == 1)
 8001540:	2140      	movs	r1, #64	; 0x40
 8001542:	4806      	ldr	r0, [pc, #24]	; (800155c <ecDecodeKey+0xf8>)
 8001544:	f001 fa0c 	bl	8002960 <HAL_GPIO_ReadPin>
 8001548:	2801      	cmp	r0, #1
 800154a:	d1a9      	bne.n	80014a0 <ecDecodeKey+0x3c>
                g_keyState = KEY_STATE_DOUBLE;
 800154c:	4b01      	ldr	r3, [pc, #4]	; (8001554 <ecDecodeKey+0xf0>)
 800154e:	2209      	movs	r2, #9
 8001550:	701a      	strb	r2, [r3, #0]
}
 8001552:	e7a5      	b.n	80014a0 <ecDecodeKey+0x3c>
 8001554:	20000320 	.word	0x20000320
 8001558:	080045ec 	.word	0x080045ec
 800155c:	50000400 	.word	0x50000400
 8001560:	20000092 	.word	0x20000092
 8001564:	00001388 	.word	0x00001388

08001568 <HAL_TIM_PeriodElapsedCallback>:
{
 8001568:	b510      	push	{r4, lr}
	if(htim == &htim3)
 800156a:	4b05      	ldr	r3, [pc, #20]	; (8001580 <HAL_TIM_PeriodElapsedCallback+0x18>)
 800156c:	4283      	cmp	r3, r0
 800156e:	d000      	beq.n	8001572 <HAL_TIM_PeriodElapsedCallback+0xa>
}
 8001570:	bd10      	pop	{r4, pc}
		ecSWTimerClk();
 8001572:	f7fe ff7b 	bl	800046c <ecSWTimerClk>
		ecDecodeKey();
 8001576:	f7ff ff75 	bl	8001464 <ecDecodeKey>
		ecBlinkHandler();
 800157a:	f7fe ffe5 	bl	8000548 <ecBlinkHandler>
}
 800157e:	e7f7      	b.n	8001570 <HAL_TIM_PeriodElapsedCallback+0x8>
 8001580:	20000270 	.word	0x20000270

08001584 <ecGetKey>:
{

	eKeyPress_t retVal;
 	retVal = KEY_NO_PRESS;

 	switch (g_keyState)
 8001584:	4b10      	ldr	r3, [pc, #64]	; (80015c8 <ecGetKey+0x44>)
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	b2db      	uxtb	r3, r3
 800158a:	2b09      	cmp	r3, #9
 800158c:	d803      	bhi.n	8001596 <ecGetKey+0x12>
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	4a0e      	ldr	r2, [pc, #56]	; (80015cc <ecGetKey+0x48>)
 8001592:	58d3      	ldr	r3, [r2, r3]
 8001594:	469f      	mov	pc, r3
 8001596:	2000      	movs	r0, #0
		break;
 	}


	return retVal;
}
 8001598:	4770      	bx	lr
		g_keyState = KEY_STATE_WAIT;
 800159a:	4b0b      	ldr	r3, [pc, #44]	; (80015c8 <ecGetKey+0x44>)
 800159c:	2200      	movs	r2, #0
 800159e:	701a      	strb	r2, [r3, #0]
		retVal = KEY_SUPER_LONG_PRESS;
 80015a0:	2004      	movs	r0, #4
		break;
 80015a2:	e7f9      	b.n	8001598 <ecGetKey+0x14>
		g_keyState = KEY_STATE_WAIT;
 80015a4:	4b08      	ldr	r3, [pc, #32]	; (80015c8 <ecGetKey+0x44>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	701a      	strb	r2, [r3, #0]
		retVal = KEY_LONG_PRESS;
 80015aa:	2003      	movs	r0, #3
		break;
 80015ac:	e7f4      	b.n	8001598 <ecGetKey+0x14>
		g_keyState = KEY_STATE_WAIT;
 80015ae:	4b06      	ldr	r3, [pc, #24]	; (80015c8 <ecGetKey+0x44>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	701a      	strb	r2, [r3, #0]
		retVal = KEY_SHORT_PRESS;
 80015b4:	2002      	movs	r0, #2
		break;
 80015b6:	e7ef      	b.n	8001598 <ecGetKey+0x14>
		g_keyState = KEY_STATE_WAIT;
 80015b8:	4b03      	ldr	r3, [pc, #12]	; (80015c8 <ecGetKey+0x44>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	701a      	strb	r2, [r3, #0]
		retVal = KEY_DOUBLE_PRESS;
 80015be:	2005      	movs	r0, #5
		break;
 80015c0:	e7ea      	b.n	8001598 <ecGetKey+0x14>
 		retVal = KEY_PENDING;
 80015c2:	2001      	movs	r0, #1
 80015c4:	e7e8      	b.n	8001598 <ecGetKey+0x14>
 80015c6:	46c0      	nop			; (mov r8, r8)
 80015c8:	20000320 	.word	0x20000320
 80015cc:	08004610 	.word	0x08004610

080015d0 <main>:
{
 80015d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015d2:	46c6      	mov	lr, r8
 80015d4:	b500      	push	{lr}
 80015d6:	b096      	sub	sp, #88	; 0x58
  HAL_Init();
 80015d8:	f000 fa34 	bl	8001a44 <HAL_Init>
  SystemClock_Config();
 80015dc:	f7ff fed6 	bl	800138c <SystemClock_Config>
  MX_GPIO_Init();
 80015e0:	f7ff fd1e 	bl	8001020 <MX_GPIO_Init>
  MX_DMA_Init();
 80015e4:	f7ff fdaa 	bl	800113c <MX_DMA_Init>
  MX_ADC1_Init();
 80015e8:	f7ff fdc0 	bl	800116c <MX_ADC1_Init>
  MX_TIM3_Init();
 80015ec:	f7ff fe14 	bl	8001218 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 80015f0:	f7ff fe40 	bl	8001274 <MX_USART2_UART_Init>
  HAL_TIM_Base_Start_IT(&htim3); //1ms Timer
 80015f4:	4867      	ldr	r0, [pc, #412]	; (8001794 <main+0x1c4>)
 80015f6:	f001 feb3 	bl	8003360 <HAL_TIM_Base_Start_IT>
  ecSWTimerInit();
 80015fa:	f7fe ff09 	bl	8000410 <ecSWTimerInit>
  ecLEDinit();
 80015fe:	f7fe ff49 	bl	8000494 <ecLEDinit>
  if (HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin) == 0) //check if bootloader requested
 8001602:	2140      	movs	r1, #64	; 0x40
 8001604:	4864      	ldr	r0, [pc, #400]	; (8001798 <main+0x1c8>)
 8001606:	f001 f9ab 	bl	8002960 <HAL_GPIO_ReadPin>
 800160a:	2800      	cmp	r0, #0
 800160c:	d034      	beq.n	8001678 <main+0xa8>
  if (HAL_ADCEx_Calibration_Start(&hadc1) != HAL_OK)
 800160e:	4863      	ldr	r0, [pc, #396]	; (800179c <main+0x1cc>)
 8001610:	f000 fed8 	bl	80023c4 <HAL_ADCEx_Calibration_Start>
  g_sys_Mode = HAL_GPIO_ReadPin( Mode_GPIO_Port , Mode_Pin);
 8001614:	2180      	movs	r1, #128	; 0x80
 8001616:	25a0      	movs	r5, #160	; 0xa0
 8001618:	05ed      	lsls	r5, r5, #23
 800161a:	0049      	lsls	r1, r1, #1
 800161c:	0028      	movs	r0, r5
 800161e:	f001 f99f 	bl	8002960 <HAL_GPIO_ReadPin>
 8001622:	4b5f      	ldr	r3, [pc, #380]	; (80017a0 <main+0x1d0>)
 8001624:	7018      	strb	r0, [r3, #0]
  strcpy(mainMessage, "\r\nUPS-2 Starting up ...\r\n" );
 8001626:	ac01      	add	r4, sp, #4
 8001628:	4b5e      	ldr	r3, [pc, #376]	; (80017a4 <main+0x1d4>)
 800162a:	0022      	movs	r2, r4
 800162c:	cb43      	ldmia	r3!, {r0, r1, r6}
 800162e:	c243      	stmia	r2!, {r0, r1, r6}
 8001630:	cb43      	ldmia	r3!, {r0, r1, r6}
 8001632:	c243      	stmia	r2!, {r0, r1, r6}
 8001634:	881b      	ldrh	r3, [r3, #0]
 8001636:	8013      	strh	r3, [r2, #0]
  ecTxString(mainMessage, strlen(mainMessage));
 8001638:	0020      	movs	r0, r4
 800163a:	f7fe fd61 	bl	8000100 <strlen>
 800163e:	b2c1      	uxtb	r1, r0
 8001640:	0020      	movs	r0, r4
 8001642:	f7ff fc2d 	bl	8000ea0 <ecTxString>
  ecRx_Init();
 8001646:	f7ff fc09 	bl	8000e5c <ecRx_Init>
  HAL_GPIO_WritePin(CMD_OUT_GPIO_Port, CMD_OUT_Pin, GPIO_PIN_SET); //prepare Pi startup
 800164a:	2180      	movs	r1, #128	; 0x80
 800164c:	2201      	movs	r2, #1
 800164e:	0109      	lsls	r1, r1, #4
 8001650:	0028      	movs	r0, r5
 8001652:	f001 f98c 	bl	800296e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(EN_5V_GPIO_Port,  EN_5V_Pin, GPIO_PIN_SET); //turn 5V Pi ON
 8001656:	2201      	movs	r2, #1
 8001658:	2101      	movs	r1, #1
 800165a:	0028      	movs	r0, r5
 800165c:	f001 f987 	bl	800296e <HAL_GPIO_WritePin>
  ecSWTimerStart(DELAY_TIMER, 1000); //wait s, allow system and power stabilization
 8001660:	21fa      	movs	r1, #250	; 0xfa
 8001662:	0089      	lsls	r1, r1, #2
 8001664:	2000      	movs	r0, #0
 8001666:	f7fe fee1 	bl	800042c <ecSWTimerStart>
  while(ecSWTimerRead(DELAY_TIMER));
 800166a:	2000      	movs	r0, #0
 800166c:	f7fe feec 	bl	8000448 <ecSWTimerRead>
 8001670:	2800      	cmp	r0, #0
 8001672:	d1fa      	bne.n	800166a <main+0x9a>
    ePiState_t piState = PI_STATE_UNKNOWN;
 8001674:	2500      	movs	r5, #0
 8001676:	e042      	b.n	80016fe <main+0x12e>
	  ecSetLED(LED_Pi, LED_ON);
 8001678:	4c4b      	ldr	r4, [pc, #300]	; (80017a8 <main+0x1d8>)
 800167a:	0021      	movs	r1, r4
 800167c:	f7fe ff20 	bl	80004c0 <ecSetLED>
	  ecSetLED(LED_Main, LED_ON);
 8001680:	0021      	movs	r1, r4
 8001682:	2002      	movs	r0, #2
 8001684:	f7fe ff1c 	bl	80004c0 <ecSetLED>
	  ecSetLED(LED_Batt, LED_ON);
 8001688:	0021      	movs	r1, r4
 800168a:	2001      	movs	r0, #1
 800168c:	f7fe ff18 	bl	80004c0 <ecSetLED>
	  ecSWTimerStart(DELAY_TIMER, KEY_T_LONG); //wait
 8001690:	21fa      	movs	r1, #250	; 0xfa
 8001692:	00c9      	lsls	r1, r1, #3
 8001694:	2000      	movs	r0, #0
 8001696:	f7fe fec9 	bl	800042c <ecSWTimerStart>
	  int key = 1;
 800169a:	2401      	movs	r4, #1
	  while(ecSWTimerRead(DELAY_TIMER) > 0)
 800169c:	2000      	movs	r0, #0
 800169e:	f7fe fed3 	bl	8000448 <ecSWTimerRead>
 80016a2:	2800      	cmp	r0, #0
 80016a4:	d006      	beq.n	80016b4 <main+0xe4>
		  key = HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin); //check if button still active
 80016a6:	2140      	movs	r1, #64	; 0x40
 80016a8:	483b      	ldr	r0, [pc, #236]	; (8001798 <main+0x1c8>)
 80016aa:	f001 f959 	bl	8002960 <HAL_GPIO_ReadPin>
 80016ae:	0004      	movs	r4, r0
		  if (key == 1)
 80016b0:	2801      	cmp	r0, #1
 80016b2:	d1f3      	bne.n	800169c <main+0xcc>
	  if(key == 0)
 80016b4:	2c00      	cmp	r4, #0
 80016b6:	d00c      	beq.n	80016d2 <main+0x102>
	  ecSetLED(LED_Pi, LED_OFF);
 80016b8:	2100      	movs	r1, #0
 80016ba:	0008      	movs	r0, r1
 80016bc:	f7fe ff00 	bl	80004c0 <ecSetLED>
	  ecSetLED(LED_Main, LED_OFF);
 80016c0:	2100      	movs	r1, #0
 80016c2:	2002      	movs	r0, #2
 80016c4:	f7fe fefc 	bl	80004c0 <ecSetLED>
	  ecSetLED(LED_Batt, LED_OFF);
 80016c8:	2100      	movs	r1, #0
 80016ca:	2001      	movs	r0, #1
 80016cc:	f7fe fef8 	bl	80004c0 <ecSetLED>
 80016d0:	e79d      	b.n	800160e <main+0x3e>
		JumpToBootloader();
 80016d2:	f7ff fba9 	bl	8000e28 <JumpToBootloader>
 80016d6:	e7ef      	b.n	80016b8 <main+0xe8>
		  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)&g_adc_buf, 4);
 80016d8:	2204      	movs	r2, #4
 80016da:	4934      	ldr	r1, [pc, #208]	; (80017ac <main+0x1dc>)
 80016dc:	482f      	ldr	r0, [pc, #188]	; (800179c <main+0x1cc>)
 80016de:	f000 fdcd 	bl	800227c <HAL_ADC_Start_DMA>
	  keyPress = ecGetKey();
 80016e2:	f7ff ff4f 	bl	8001584 <ecGetKey>
 80016e6:	0004      	movs	r4, r0
	  if(g_sys_Mode == SYS_MODE_PARALLEL)
 80016e8:	4b2d      	ldr	r3, [pc, #180]	; (80017a0 <main+0x1d0>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d149      	bne.n	8001784 <main+0x1b4>
	      ecPortExecCommand(keyPress);
 80016f0:	f7ff f88a 	bl	8000808 <ecPortExecCommand>
	      piState = ecPortHandleFeedback(keyPress, piState);
 80016f4:	0029      	movs	r1, r5
 80016f6:	0020      	movs	r0, r4
 80016f8:	f7fe ff66 	bl	80005c8 <ecPortHandleFeedback>
 80016fc:	0005      	movs	r5, r0
	  if(g_adcRdy)
 80016fe:	4b2c      	ldr	r3, [pc, #176]	; (80017b0 <main+0x1e0>)
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d0e8      	beq.n	80016d8 <main+0x108>
		  g_adcRdy = 0;
 8001706:	4b2a      	ldr	r3, [pc, #168]	; (80017b0 <main+0x1e0>)
 8001708:	2200      	movs	r2, #0
 800170a:	701a      	strb	r2, [r3, #0]
		  g_powerState = ecAnalogHandler(g_adc_voltages);
 800170c:	4b29      	ldr	r3, [pc, #164]	; (80017b4 <main+0x1e4>)
 800170e:	881a      	ldrh	r2, [r3, #0]
 8001710:	8858      	ldrh	r0, [r3, #2]
 8001712:	0400      	lsls	r0, r0, #16
 8001714:	4310      	orrs	r0, r2
 8001716:	889a      	ldrh	r2, [r3, #4]
 8001718:	88d9      	ldrh	r1, [r3, #6]
 800171a:	0409      	lsls	r1, r1, #16
 800171c:	4311      	orrs	r1, r2
 800171e:	f7ff fb21 	bl	8000d64 <ecAnalogHandler>
 8001722:	4b25      	ldr	r3, [pc, #148]	; (80017b8 <main+0x1e8>)
 8001724:	8018      	strh	r0, [r3, #0]
          if(ecSWTimerRead(MESSAGE_TIMER) == 0)
 8001726:	2002      	movs	r0, #2
 8001728:	f7fe fe8e 	bl	8000448 <ecSWTimerRead>
 800172c:	2800      	cmp	r0, #0
 800172e:	d1d8      	bne.n	80016e2 <main+0x112>
             ecSWTimerStart(MESSAGE_TIMER, 1000);
 8001730:	21fa      	movs	r1, #250	; 0xfa
 8001732:	0089      	lsls	r1, r1, #2
 8001734:	3002      	adds	r0, #2
 8001736:	f7fe fe79 	bl	800042c <ecSWTimerStart>
             charsWritten = sprintf(g_analogStr,"%s",ecFormatFixptStr(g_adc_voltages.main_voltage));
 800173a:	4f1e      	ldr	r7, [pc, #120]	; (80017b4 <main+0x1e4>)
 800173c:	2300      	movs	r3, #0
 800173e:	5ef8      	ldrsh	r0, [r7, r3]
 8001740:	f7ff fe08 	bl	8001354 <ecFormatFixptStr>
 8001744:	0002      	movs	r2, r0
 8001746:	4e1d      	ldr	r6, [pc, #116]	; (80017bc <main+0x1ec>)
 8001748:	491d      	ldr	r1, [pc, #116]	; (80017c0 <main+0x1f0>)
 800174a:	0030      	movs	r0, r6
 800174c:	f002 fa16 	bl	8003b7c <siprintf>
 8001750:	0004      	movs	r4, r0
 8001752:	b283      	uxth	r3, r0
 8001754:	4698      	mov	r8, r3
             charsWritten += sprintf(&g_analogStr[charsWritten],",%s",ecFormatFixptStr(g_adc_voltages.batt_voltage));
 8001756:	2302      	movs	r3, #2
 8001758:	5ef8      	ldrsh	r0, [r7, r3]
 800175a:	f7ff fdfb 	bl	8001354 <ecFormatFixptStr>
 800175e:	0002      	movs	r2, r0
 8001760:	0420      	lsls	r0, r4, #16
 8001762:	0c00      	lsrs	r0, r0, #16
 8001764:	1980      	adds	r0, r0, r6
 8001766:	4917      	ldr	r1, [pc, #92]	; (80017c4 <main+0x1f4>)
 8001768:	f002 fa08 	bl	8003b7c <siprintf>
 800176c:	4440      	add	r0, r8
 800176e:	b284      	uxth	r4, r0
             charsWritten += sprintf(&g_analogStr[charsWritten],",%d\n",g_adc_voltages.CPU_temp/10);
 8001770:	88f8      	ldrh	r0, [r7, #6]
 8001772:	210a      	movs	r1, #10
 8001774:	f7fe fcd6 	bl	8000124 <__udivsi3>
 8001778:	b282      	uxth	r2, r0
 800177a:	19a0      	adds	r0, r4, r6
 800177c:	4912      	ldr	r1, [pc, #72]	; (80017c8 <main+0x1f8>)
 800177e:	f002 f9fd 	bl	8003b7c <siprintf>
 8001782:	e7ae      	b.n	80016e2 <main+0x112>
          ecSerialExecCommand(keyPress);
 8001784:	f7ff f92c 	bl	80009e0 <ecSerialExecCommand>
          piState = ecSerialHandleFeedback(keyPress, piState);
 8001788:	0029      	movs	r1, r5
 800178a:	0020      	movs	r0, r4
 800178c:	f7ff f97c 	bl	8000a88 <ecSerialHandleFeedback>
 8001790:	0005      	movs	r5, r0
 8001792:	e7b4      	b.n	80016fe <main+0x12e>
 8001794:	20000270 	.word	0x20000270
 8001798:	50000400 	.word	0x50000400
 800179c:	200002bc 	.word	0x200002bc
 80017a0:	200001a0 	.word	0x200001a0
 80017a4:	08004638 	.word	0x08004638
 80017a8:	0000ffff 	.word	0x0000ffff
 80017ac:	20000198 	.word	0x20000198
 80017b0:	2000026c 	.word	0x2000026c
 80017b4:	20000144 	.word	0x20000144
 80017b8:	200000b0 	.word	0x200000b0
 80017bc:	20000160 	.word	0x20000160
 80017c0:	08004654 	.word	0x08004654
 80017c4:	08004658 	.word	0x08004658
 80017c8:	0800465c 	.word	0x0800465c

080017cc <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80017cc:	4770      	bx	lr
	...

080017d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017d0:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017d2:	4b0a      	ldr	r3, [pc, #40]	; (80017fc <HAL_MspInit+0x2c>)
 80017d4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80017d6:	2201      	movs	r2, #1
 80017d8:	4311      	orrs	r1, r2
 80017da:	6419      	str	r1, [r3, #64]	; 0x40
 80017dc:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80017de:	400a      	ands	r2, r1
 80017e0:	9200      	str	r2, [sp, #0]
 80017e2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80017e6:	2180      	movs	r1, #128	; 0x80
 80017e8:	0549      	lsls	r1, r1, #21
 80017ea:	430a      	orrs	r2, r1
 80017ec:	63da      	str	r2, [r3, #60]	; 0x3c
 80017ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017f0:	400b      	ands	r3, r1
 80017f2:	9301      	str	r3, [sp, #4]
 80017f4:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017f6:	b002      	add	sp, #8
 80017f8:	4770      	bx	lr
 80017fa:	46c0      	nop			; (mov r8, r8)
 80017fc:	40021000 	.word	0x40021000

08001800 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001800:	b530      	push	{r4, r5, lr}
 8001802:	b089      	sub	sp, #36	; 0x24
 8001804:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001806:	2214      	movs	r2, #20
 8001808:	2100      	movs	r1, #0
 800180a:	a803      	add	r0, sp, #12
 800180c:	f002 f979 	bl	8003b02 <memset>
  if(hadc->Instance==ADC1)
 8001810:	4b22      	ldr	r3, [pc, #136]	; (800189c <HAL_ADC_MspInit+0x9c>)
 8001812:	6822      	ldr	r2, [r4, #0]
 8001814:	429a      	cmp	r2, r3
 8001816:	d001      	beq.n	800181c <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001818:	b009      	add	sp, #36	; 0x24
 800181a:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_ADC_CLK_ENABLE();
 800181c:	4b20      	ldr	r3, [pc, #128]	; (80018a0 <HAL_ADC_MspInit+0xa0>)
 800181e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001820:	2080      	movs	r0, #128	; 0x80
 8001822:	0340      	lsls	r0, r0, #13
 8001824:	4301      	orrs	r1, r0
 8001826:	6419      	str	r1, [r3, #64]	; 0x40
 8001828:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800182a:	4002      	ands	r2, r0
 800182c:	9201      	str	r2, [sp, #4]
 800182e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001830:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001832:	2201      	movs	r2, #1
 8001834:	4311      	orrs	r1, r2
 8001836:	6359      	str	r1, [r3, #52]	; 0x34
 8001838:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800183a:	401a      	ands	r2, r3
 800183c:	9202      	str	r2, [sp, #8]
 800183e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = ADC_VIN_MAIN_Pin|ADC_VIN_BATT_Pin|ADC_5V_PI_Pin;
 8001840:	2352      	movs	r3, #82	; 0x52
 8001842:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001844:	3b4f      	subs	r3, #79	; 0x4f
 8001846:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001848:	2500      	movs	r5, #0
 800184a:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800184c:	20a0      	movs	r0, #160	; 0xa0
 800184e:	a903      	add	r1, sp, #12
 8001850:	05c0      	lsls	r0, r0, #23
 8001852:	f000 ffc7 	bl	80027e4 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 8001856:	4813      	ldr	r0, [pc, #76]	; (80018a4 <HAL_ADC_MspInit+0xa4>)
 8001858:	4b13      	ldr	r3, [pc, #76]	; (80018a8 <HAL_ADC_MspInit+0xa8>)
 800185a:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800185c:	2305      	movs	r3, #5
 800185e:	6043      	str	r3, [r0, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001860:	6085      	str	r5, [r0, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001862:	60c5      	str	r5, [r0, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001864:	337b      	adds	r3, #123	; 0x7b
 8001866:	6103      	str	r3, [r0, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001868:	3380      	adds	r3, #128	; 0x80
 800186a:	6143      	str	r3, [r0, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800186c:	2380      	movs	r3, #128	; 0x80
 800186e:	00db      	lsls	r3, r3, #3
 8001870:	6183      	str	r3, [r0, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001872:	61c5      	str	r5, [r0, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001874:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001876:	f000 fea9 	bl	80025cc <HAL_DMA_Init>
 800187a:	2800      	cmp	r0, #0
 800187c:	d10b      	bne.n	8001896 <HAL_ADC_MspInit+0x96>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800187e:	4b09      	ldr	r3, [pc, #36]	; (80018a4 <HAL_ADC_MspInit+0xa4>)
 8001880:	6523      	str	r3, [r4, #80]	; 0x50
 8001882:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8001884:	2200      	movs	r2, #0
 8001886:	2100      	movs	r1, #0
 8001888:	200c      	movs	r0, #12
 800188a:	f000 fdf3 	bl	8002474 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 800188e:	200c      	movs	r0, #12
 8001890:	f000 fe20 	bl	80024d4 <HAL_NVIC_EnableIRQ>
}
 8001894:	e7c0      	b.n	8001818 <HAL_ADC_MspInit+0x18>
      Error_Handler();
 8001896:	f7ff ff99 	bl	80017cc <Error_Handler>
 800189a:	e7f0      	b.n	800187e <HAL_ADC_MspInit+0x7e>
 800189c:	40012400 	.word	0x40012400
 80018a0:	40021000 	.word	0x40021000
 80018a4:	20000324 	.word	0x20000324
 80018a8:	40020008 	.word	0x40020008

080018ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018ac:	b500      	push	{lr}
 80018ae:	b083      	sub	sp, #12
  if(htim_base->Instance==TIM3)
 80018b0:	6802      	ldr	r2, [r0, #0]
 80018b2:	4b0b      	ldr	r3, [pc, #44]	; (80018e0 <HAL_TIM_Base_MspInit+0x34>)
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d001      	beq.n	80018bc <HAL_TIM_Base_MspInit+0x10>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80018b8:	b003      	add	sp, #12
 80018ba:	bd00      	pop	{pc}
    __HAL_RCC_TIM3_CLK_ENABLE();
 80018bc:	4a09      	ldr	r2, [pc, #36]	; (80018e4 <HAL_TIM_Base_MspInit+0x38>)
 80018be:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80018c0:	2302      	movs	r3, #2
 80018c2:	4319      	orrs	r1, r3
 80018c4:	63d1      	str	r1, [r2, #60]	; 0x3c
 80018c6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80018c8:	4013      	ands	r3, r2
 80018ca:	9301      	str	r3, [sp, #4]
 80018cc:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80018ce:	2200      	movs	r2, #0
 80018d0:	2100      	movs	r1, #0
 80018d2:	2010      	movs	r0, #16
 80018d4:	f000 fdce 	bl	8002474 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80018d8:	2010      	movs	r0, #16
 80018da:	f000 fdfb 	bl	80024d4 <HAL_NVIC_EnableIRQ>
}
 80018de:	e7eb      	b.n	80018b8 <HAL_TIM_Base_MspInit+0xc>
 80018e0:	40000400 	.word	0x40000400
 80018e4:	40021000 	.word	0x40021000

080018e8 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80018e8:	4770      	bx	lr

080018ea <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018ea:	e7fe      	b.n	80018ea <HardFault_Handler>

080018ec <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80018ec:	4770      	bx	lr

080018ee <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018ee:	4770      	bx	lr

080018f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018f0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018f2:	f000 f8bb 	bl	8001a6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018f6:	bd10      	pop	{r4, pc}

080018f8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80018f8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80018fa:	4802      	ldr	r0, [pc, #8]	; (8001904 <DMA1_Channel1_IRQHandler+0xc>)
 80018fc:	f000 ff0c 	bl	8002718 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001900:	bd10      	pop	{r4, pc}
 8001902:	46c0      	nop			; (mov r8, r8)
 8001904:	20000324 	.word	0x20000324

08001908 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 interrupt.
  */
void ADC1_IRQHandler(void)
{
 8001908:	b510      	push	{r4, lr}
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800190a:	4802      	ldr	r0, [pc, #8]	; (8001914 <ADC1_IRQHandler+0xc>)
 800190c:	f000 fa56 	bl	8001dbc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8001910:	bd10      	pop	{r4, pc}
 8001912:	46c0      	nop			; (mov r8, r8)
 8001914:	200002bc 	.word	0x200002bc

08001918 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001918:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800191a:	4802      	ldr	r0, [pc, #8]	; (8001924 <TIM3_IRQHandler+0xc>)
 800191c:	f001 fd58 	bl	80033d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001920:	bd10      	pop	{r4, pc}
 8001922:	46c0      	nop			; (mov r8, r8)
 8001924:	20000270 	.word	0x20000270

08001928 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001928:	b510      	push	{r4, lr}
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 800192a:	4b07      	ldr	r3, [pc, #28]	; (8001948 <USART2_IRQHandler+0x20>)
 800192c:	69db      	ldr	r3, [r3, #28]
 800192e:	069b      	lsls	r3, r3, #26
 8001930:	d506      	bpl.n	8001940 <USART2_IRQHandler+0x18>
  return ((READ_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE) == (USART_CR1_RXNEIE_RXFNEIE)) ? 1UL : 0UL);
 8001932:	4b05      	ldr	r3, [pc, #20]	; (8001948 <USART2_IRQHandler+0x20>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	069b      	lsls	r3, r3, #26
 8001938:	d502      	bpl.n	8001940 <USART2_IRQHandler+0x18>
      /* Check RXNE flag value in ISR register */
       if (LL_USART_IsActiveFlag_RXNE(USART2) && LL_USART_IsEnabledIT_RXNE(USART2))
       {
         /* RXNE flag will be cleared by reading of RDR register (done in call) */
         /* Call function in charge of handling Character reception */
         ecUSART_Rx_Callback();
 800193a:	f7ff faed 	bl	8000f18 <ecUSART_Rx_Callback>
 800193e:	e001      	b.n	8001944 <USART2_IRQHandler+0x1c>
       }
       else
       {
         /* Call Error function */
          ecUSART_Rx_Error_Callback();
 8001940:	f7ff fb2e 	bl	8000fa0 <ecUSART_Rx_Error_Callback>
       /* USER CODE END USART2_IRQn 1 */
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001944:	bd10      	pop	{r4, pc}
 8001946:	46c0      	nop			; (mov r8, r8)
 8001948:	40004400 	.word	0x40004400

0800194c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800194c:	b510      	push	{r4, lr}
 800194e:	0003      	movs	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001950:	4a0b      	ldr	r2, [pc, #44]	; (8001980 <_sbrk+0x34>)
 8001952:	6812      	ldr	r2, [r2, #0]
 8001954:	2a00      	cmp	r2, #0
 8001956:	d008      	beq.n	800196a <_sbrk+0x1e>
		heap_end = &end;

	prev_heap_end = heap_end;
 8001958:	4a09      	ldr	r2, [pc, #36]	; (8001980 <_sbrk+0x34>)
 800195a:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 800195c:	18c3      	adds	r3, r0, r3
 800195e:	466a      	mov	r2, sp
 8001960:	4293      	cmp	r3, r2
 8001962:	d806      	bhi.n	8001972 <_sbrk+0x26>
	{
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8001964:	4a06      	ldr	r2, [pc, #24]	; (8001980 <_sbrk+0x34>)
 8001966:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8001968:	bd10      	pop	{r4, pc}
		heap_end = &end;
 800196a:	4a05      	ldr	r2, [pc, #20]	; (8001980 <_sbrk+0x34>)
 800196c:	4905      	ldr	r1, [pc, #20]	; (8001984 <_sbrk+0x38>)
 800196e:	6011      	str	r1, [r2, #0]
 8001970:	e7f2      	b.n	8001958 <_sbrk+0xc>
		errno = ENOMEM;
 8001972:	f002 f893 	bl	8003a9c <__errno>
 8001976:	230c      	movs	r3, #12
 8001978:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 800197a:	2001      	movs	r0, #1
 800197c:	4240      	negs	r0, r0
 800197e:	e7f3      	b.n	8001968 <_sbrk+0x1c>
 8001980:	200000a4 	.word	0x200000a4
 8001984:	20000398 	.word	0x20000398

08001988 <SystemInit>:
{
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001988:	4b02      	ldr	r3, [pc, #8]	; (8001994 <SystemInit+0xc>)
 800198a:	2280      	movs	r2, #128	; 0x80
 800198c:	0512      	lsls	r2, r2, #20
 800198e:	609a      	str	r2, [r3, #8]
#endif
}
 8001990:	4770      	bx	lr
 8001992:	46c0      	nop			; (mov r8, r8)
 8001994:	e000ed00 	.word	0xe000ed00

08001998 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001998:	480d      	ldr	r0, [pc, #52]	; (80019d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800199a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800199c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800199e:	e003      	b.n	80019a8 <LoopCopyDataInit>

080019a0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80019a0:	4b0c      	ldr	r3, [pc, #48]	; (80019d4 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 80019a2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80019a4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80019a6:	3104      	adds	r1, #4

080019a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80019a8:	480b      	ldr	r0, [pc, #44]	; (80019d8 <LoopForever+0xa>)
  ldr r3, =_edata
 80019aa:	4b0c      	ldr	r3, [pc, #48]	; (80019dc <LoopForever+0xe>)
  adds r2, r0, r1
 80019ac:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80019ae:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80019b0:	d3f6      	bcc.n	80019a0 <CopyDataInit>
  ldr r2, =_sbss
 80019b2:	4a0b      	ldr	r2, [pc, #44]	; (80019e0 <LoopForever+0x12>)
  b LoopFillZerobss
 80019b4:	e002      	b.n	80019bc <LoopFillZerobss>

080019b6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80019b6:	2300      	movs	r3, #0
  str  r3, [r2]
 80019b8:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019ba:	3204      	adds	r2, #4

080019bc <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 80019bc:	4b09      	ldr	r3, [pc, #36]	; (80019e4 <LoopForever+0x16>)
  cmp r2, r3
 80019be:	429a      	cmp	r2, r3
  bcc FillZerobss
 80019c0:	d3f9      	bcc.n	80019b6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80019c2:	f7ff ffe1 	bl	8001988 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80019c6:	f002 f86f 	bl	8003aa8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80019ca:	f7ff fe01 	bl	80015d0 <main>

080019ce <LoopForever>:

LoopForever:
    b LoopForever
 80019ce:	e7fe      	b.n	80019ce <LoopForever>
  ldr   r0, =_estack
 80019d0:	20002000 	.word	0x20002000
  ldr r3, =_sidata
 80019d4:	08004730 	.word	0x08004730
  ldr r0, =_sdata
 80019d8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80019dc:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 80019e0:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 80019e4:	20000394 	.word	0x20000394

080019e8 <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019e8:	e7fe      	b.n	80019e8 <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler>
	...

080019ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019ec:	b510      	push	{r4, lr}
 80019ee:	0004      	movs	r4, r0
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80019f0:	4b11      	ldr	r3, [pc, #68]	; (8001a38 <HAL_InitTick+0x4c>)
 80019f2:	7819      	ldrb	r1, [r3, #0]
 80019f4:	2900      	cmp	r1, #0
 80019f6:	d101      	bne.n	80019fc <HAL_InitTick+0x10>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 80019f8:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 80019fa:	bd10      	pop	{r4, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80019fc:	20fa      	movs	r0, #250	; 0xfa
 80019fe:	0080      	lsls	r0, r0, #2
 8001a00:	f7fe fb90 	bl	8000124 <__udivsi3>
 8001a04:	0001      	movs	r1, r0
 8001a06:	4b0d      	ldr	r3, [pc, #52]	; (8001a3c <HAL_InitTick+0x50>)
 8001a08:	6818      	ldr	r0, [r3, #0]
 8001a0a:	f7fe fb8b 	bl	8000124 <__udivsi3>
 8001a0e:	f000 fd6d 	bl	80024ec <HAL_SYSTICK_Config>
 8001a12:	2800      	cmp	r0, #0
 8001a14:	d10d      	bne.n	8001a32 <HAL_InitTick+0x46>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a16:	2c03      	cmp	r4, #3
 8001a18:	d901      	bls.n	8001a1e <HAL_InitTick+0x32>
        status = HAL_ERROR;
 8001a1a:	2001      	movs	r0, #1
 8001a1c:	e7ed      	b.n	80019fa <HAL_InitTick+0xe>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a1e:	3001      	adds	r0, #1
 8001a20:	2200      	movs	r2, #0
 8001a22:	0021      	movs	r1, r4
 8001a24:	4240      	negs	r0, r0
 8001a26:	f000 fd25 	bl	8002474 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a2a:	4b05      	ldr	r3, [pc, #20]	; (8001a40 <HAL_InitTick+0x54>)
 8001a2c:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a2e:	2000      	movs	r0, #0
 8001a30:	e7e3      	b.n	80019fa <HAL_InitTick+0xe>
      status = HAL_ERROR;
 8001a32:	2001      	movs	r0, #1
 8001a34:	e7e1      	b.n	80019fa <HAL_InitTick+0xe>
 8001a36:	46c0      	nop			; (mov r8, r8)
 8001a38:	20000004 	.word	0x20000004
 8001a3c:	20000000 	.word	0x20000000
 8001a40:	20000008 	.word	0x20000008

08001a44 <HAL_Init>:
{
 8001a44:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a46:	4a08      	ldr	r2, [pc, #32]	; (8001a68 <HAL_Init+0x24>)
 8001a48:	6811      	ldr	r1, [r2, #0]
 8001a4a:	2380      	movs	r3, #128	; 0x80
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	430b      	orrs	r3, r1
 8001a50:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a52:	2000      	movs	r0, #0
 8001a54:	f7ff ffca 	bl	80019ec <HAL_InitTick>
 8001a58:	1e04      	subs	r4, r0, #0
 8001a5a:	d002      	beq.n	8001a62 <HAL_Init+0x1e>
    status = HAL_ERROR;
 8001a5c:	2401      	movs	r4, #1
}
 8001a5e:	0020      	movs	r0, r4
 8001a60:	bd10      	pop	{r4, pc}
  HAL_MspInit();
 8001a62:	f7ff feb5 	bl	80017d0 <HAL_MspInit>
 8001a66:	e7fa      	b.n	8001a5e <HAL_Init+0x1a>
 8001a68:	40022000 	.word	0x40022000

08001a6c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8001a6c:	4b03      	ldr	r3, [pc, #12]	; (8001a7c <HAL_IncTick+0x10>)
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	4a03      	ldr	r2, [pc, #12]	; (8001a80 <HAL_IncTick+0x14>)
 8001a72:	6811      	ldr	r1, [r2, #0]
 8001a74:	185b      	adds	r3, r3, r1
 8001a76:	6013      	str	r3, [r2, #0]
}
 8001a78:	4770      	bx	lr
 8001a7a:	46c0      	nop			; (mov r8, r8)
 8001a7c:	20000004 	.word	0x20000004
 8001a80:	20000380 	.word	0x20000380

08001a84 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001a84:	4b01      	ldr	r3, [pc, #4]	; (8001a8c <HAL_GetTick+0x8>)
 8001a86:	6818      	ldr	r0, [r3, #0]
}
 8001a88:	4770      	bx	lr
 8001a8a:	46c0      	nop			; (mov r8, r8)
 8001a8c:	20000380 	.word	0x20000380

08001a90 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001a90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a92:	b083      	sub	sp, #12
 8001a94:	0004      	movs	r4, r0
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0UL;
  uint32_t tmpCFGR2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001a96:	2300      	movs	r3, #0
 8001a98:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8001a9a:	2800      	cmp	r0, #0
 8001a9c:	d100      	bne.n	8001aa0 <HAL_ADC_Init+0x10>
 8001a9e:	e122      	b.n	8001ce6 <HAL_ADC_Init+0x256>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001aa0:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d012      	beq.n	8001acc <HAL_ADC_Init+0x3c>

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001aa6:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001aa8:	689a      	ldr	r2, [r3, #8]
 8001aaa:	00d2      	lsls	r2, r2, #3
 8001aac:	d41b      	bmi.n	8001ae6 <HAL_ADC_Init+0x56>
  MODIFY_REG(ADCx->CR,
 8001aae:	689a      	ldr	r2, [r3, #8]
 8001ab0:	498e      	ldr	r1, [pc, #568]	; (8001cec <HAL_ADC_Init+0x25c>)
 8001ab2:	4011      	ands	r1, r2
 8001ab4:	2280      	movs	r2, #128	; 0x80
 8001ab6:	0552      	lsls	r2, r2, #21
 8001ab8:	430a      	orrs	r2, r1
 8001aba:	609a      	str	r2, [r3, #8]
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001abc:	4b8c      	ldr	r3, [pc, #560]	; (8001cf0 <HAL_ADC_Init+0x260>)
 8001abe:	6818      	ldr	r0, [r3, #0]
 8001ac0:	498c      	ldr	r1, [pc, #560]	; (8001cf4 <HAL_ADC_Init+0x264>)
 8001ac2:	f7fe fb2f 	bl	8000124 <__udivsi3>
 8001ac6:	0040      	lsls	r0, r0, #1
 8001ac8:	9001      	str	r0, [sp, #4]
    while (wait_loop_index != 0UL)
 8001aca:	e009      	b.n	8001ae0 <HAL_ADC_Init+0x50>
    HAL_ADC_MspInit(hadc);
 8001acc:	f7ff fe98 	bl	8001800 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	65e3      	str	r3, [r4, #92]	; 0x5c
    hadc->Lock = HAL_UNLOCKED;
 8001ad4:	2254      	movs	r2, #84	; 0x54
 8001ad6:	54a3      	strb	r3, [r4, r2]
 8001ad8:	e7e5      	b.n	8001aa6 <HAL_ADC_Init+0x16>
    {
      wait_loop_index--;
 8001ada:	9b01      	ldr	r3, [sp, #4]
 8001adc:	3b01      	subs	r3, #1
 8001ade:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8001ae0:	9b01      	ldr	r3, [sp, #4]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d1f9      	bne.n	8001ada <HAL_ADC_Init+0x4a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ae6:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001ae8:	689a      	ldr	r2, [r3, #8]
 8001aea:	00d2      	lsls	r2, r2, #3
 8001aec:	d409      	bmi.n	8001b02 <HAL_ADC_Init+0x72>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001aee:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8001af0:	2110      	movs	r1, #16
 8001af2:	430a      	orrs	r2, r1
 8001af4:	65a2      	str	r2, [r4, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001af6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001af8:	390f      	subs	r1, #15
 8001afa:	430a      	orrs	r2, r1
 8001afc:	65e2      	str	r2, [r4, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001afe:	2001      	movs	r0, #1
 8001b00:	e000      	b.n	8001b04 <HAL_ADC_Init+0x74>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b02:	2000      	movs	r0, #0
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001b04:	6899      	ldr	r1, [r3, #8]
 8001b06:	2504      	movs	r5, #4
 8001b08:	002a      	movs	r2, r5
 8001b0a:	400a      	ands	r2, r1
 8001b0c:	420d      	tst	r5, r1
 8001b0e:	d000      	beq.n	8001b12 <HAL_ADC_Init+0x82>
 8001b10:	2201      	movs	r2, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b12:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8001b14:	06c9      	lsls	r1, r1, #27
 8001b16:	d500      	bpl.n	8001b1a <HAL_ADC_Init+0x8a>
 8001b18:	e0de      	b.n	8001cd8 <HAL_ADC_Init+0x248>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001b1a:	2a00      	cmp	r2, #0
 8001b1c:	d000      	beq.n	8001b20 <HAL_ADC_Init+0x90>
 8001b1e:	e0db      	b.n	8001cd8 <HAL_ADC_Init+0x248>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b20:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8001b22:	4d75      	ldr	r5, [pc, #468]	; (8001cf8 <HAL_ADC_Init+0x268>)
 8001b24:	4029      	ands	r1, r5
 8001b26:	3506      	adds	r5, #6
 8001b28:	35ff      	adds	r5, #255	; 0xff
 8001b2a:	4329      	orrs	r1, r5
 8001b2c:	65a1      	str	r1, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001b2e:	6899      	ldr	r1, [r3, #8]
 8001b30:	07c9      	lsls	r1, r1, #31
 8001b32:	d433      	bmi.n	8001b9c <HAL_ADC_Init+0x10c>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001b34:	68d9      	ldr	r1, [r3, #12]
 8001b36:	3516      	adds	r5, #22
 8001b38:	43a9      	bics	r1, r5
 8001b3a:	68a5      	ldr	r5, [r4, #8]
 8001b3c:	4329      	orrs	r1, r5
 8001b3e:	60d9      	str	r1, [r3, #12]
                 ADC_CFGR1_RES,
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001b40:	6863      	ldr	r3, [r4, #4]
 8001b42:	0f99      	lsrs	r1, r3, #30
 8001b44:	0789      	lsls	r1, r1, #30
 8001b46:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001b48:	4319      	orrs	r1, r3
                   hadc->Init.Oversampling.Ratio         |
 8001b4a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001b4c:	4319      	orrs	r1, r3
                   hadc->Init.Oversampling.RightBitShift |
 8001b4e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001b50:	4319      	orrs	r1, r3
                   hadc->Init.Oversampling.TriggeredMode |
 8001b52:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001b54:	4319      	orrs	r1, r3
                   hadc->Init.TriggerFrequencyMode
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001b56:	233c      	movs	r3, #60	; 0x3c
 8001b58:	5ce3      	ldrb	r3, [r4, r3]
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d01c      	beq.n	8001b98 <HAL_ADC_Init+0x108>
      {
        SET_BIT(tmpCFGR2, ADC_CFGR2_OVSE);
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001b5e:	6825      	ldr	r5, [r4, #0]
 8001b60:	692b      	ldr	r3, [r5, #16]
 8001b62:	4e66      	ldr	r6, [pc, #408]	; (8001cfc <HAL_ADC_Init+0x26c>)
 8001b64:	4033      	ands	r3, r6
 8001b66:	430b      	orrs	r3, r1
 8001b68:	612b      	str	r3, [r5, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001b6a:	6863      	ldr	r3, [r4, #4]
 8001b6c:	25c0      	movs	r5, #192	; 0xc0
 8001b6e:	062d      	lsls	r5, r5, #24
 8001b70:	42ab      	cmp	r3, r5
 8001b72:	d014      	beq.n	8001b9e <HAL_ADC_Init+0x10e>
 8001b74:	2580      	movs	r5, #128	; 0x80
 8001b76:	05ed      	lsls	r5, r5, #23
 8001b78:	42ab      	cmp	r3, r5
 8001b7a:	d010      	beq.n	8001b9e <HAL_ADC_Init+0x10e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001b7c:	2580      	movs	r5, #128	; 0x80
 8001b7e:	062d      	lsls	r5, r5, #24
 8001b80:	42ab      	cmp	r3, r5
 8001b82:	d00c      	beq.n	8001b9e <HAL_ADC_Init+0x10e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001b84:	4e5e      	ldr	r6, [pc, #376]	; (8001d00 <HAL_ADC_Init+0x270>)
 8001b86:	6835      	ldr	r5, [r6, #0]
 8001b88:	4f5e      	ldr	r7, [pc, #376]	; (8001d04 <HAL_ADC_Init+0x274>)
 8001b8a:	403d      	ands	r5, r7
 8001b8c:	27f0      	movs	r7, #240	; 0xf0
 8001b8e:	03bf      	lsls	r7, r7, #14
 8001b90:	403b      	ands	r3, r7
 8001b92:	432b      	orrs	r3, r5
 8001b94:	6033      	str	r3, [r6, #0]
 8001b96:	e002      	b.n	8001b9e <HAL_ADC_Init+0x10e>
        SET_BIT(tmpCFGR2, ADC_CFGR2_OVSE);
 8001b98:	4319      	orrs	r1, r3
 8001b9a:	e7e0      	b.n	8001b5e <HAL_ADC_Init+0xce>
  uint32_t tmpCFGR2 = 0UL;
 8001b9c:	0011      	movs	r1, r2
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001b9e:	7e23      	ldrb	r3, [r4, #24]
 8001ba0:	039b      	lsls	r3, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001ba2:	7e65      	ldrb	r5, [r4, #25]
 8001ba4:	03ed      	lsls	r5, r5, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001ba6:	432b      	orrs	r3, r5
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001ba8:	7ea6      	ldrb	r6, [r4, #26]
 8001baa:	0375      	lsls	r5, r6, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001bac:	432b      	orrs	r3, r5
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001bae:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8001bb0:	2d00      	cmp	r5, #0
 8001bb2:	d001      	beq.n	8001bb8 <HAL_ADC_Init+0x128>
 8001bb4:	2580      	movs	r5, #128	; 0x80
 8001bb6:	016d      	lsls	r5, r5, #5
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001bb8:	432b      	orrs	r3, r5
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001bba:	68e5      	ldr	r5, [r4, #12]
 8001bbc:	432b      	orrs	r3, r5
                 hadc->Init.DataAlign                                           |
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001bbe:	6925      	ldr	r5, [r4, #16]
 8001bc0:	2d00      	cmp	r5, #0
 8001bc2:	db49      	blt.n	8001c58 <HAL_ADC_Init+0x1c8>
 8001bc4:	2580      	movs	r5, #128	; 0x80
 8001bc6:	03ad      	lsls	r5, r5, #14
                 hadc->Init.DataAlign                                           |
 8001bc8:	432b      	orrs	r3, r5
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001bca:	252c      	movs	r5, #44	; 0x2c
 8001bcc:	5d65      	ldrb	r5, [r4, r5]
 8001bce:	006d      	lsls	r5, r5, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001bd0:	432b      	orrs	r3, r5

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001bd2:	2520      	movs	r5, #32
 8001bd4:	5d65      	ldrb	r5, [r4, r5]
 8001bd6:	2d01      	cmp	r5, #1
 8001bd8:	d041      	beq.n	8001c5e <HAL_ADC_Init+0x1ce>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001bda:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8001bdc:	2d00      	cmp	r5, #0
 8001bde:	d005      	beq.n	8001bec <HAL_ADC_Init+0x15c>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001be0:	26e0      	movs	r6, #224	; 0xe0
 8001be2:	0076      	lsls	r6, r6, #1
 8001be4:	4035      	ands	r5, r6
 8001be6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001be8:	4335      	orrs	r5, r6
 8001bea:	432b      	orrs	r3, r5
                   hadc->Init.ExternalTrigConvEdge);
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 8001bec:	6826      	ldr	r6, [r4, #0]
 8001bee:	68f5      	ldr	r5, [r6, #12]
 8001bf0:	4f45      	ldr	r7, [pc, #276]	; (8001d08 <HAL_ADC_Init+0x278>)
 8001bf2:	403d      	ands	r5, r7
 8001bf4:	431d      	orrs	r5, r3
 8001bf6:	60f5      	str	r5, [r6, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 8001bf8:	6826      	ldr	r6, [r4, #0]
 8001bfa:	6935      	ldr	r5, [r6, #16]
 8001bfc:	4f43      	ldr	r7, [pc, #268]	; (8001d0c <HAL_ADC_Init+0x27c>)
 8001bfe:	403d      	ands	r5, r7
 8001c00:	4329      	orrs	r1, r5
 8001c02:	6131      	str	r1, [r6, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001c04:	6825      	ldr	r5, [r4, #0]
  MODIFY_REG(ADCx->SMPR,
 8001c06:	6969      	ldr	r1, [r5, #20]
 8001c08:	2607      	movs	r6, #7
 8001c0a:	43b1      	bics	r1, r6
 8001c0c:	6b66      	ldr	r6, [r4, #52]	; 0x34
 8001c0e:	4331      	orrs	r1, r6
 8001c10:	6169      	str	r1, [r5, #20]
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001c12:	6826      	ldr	r6, [r4, #0]
 8001c14:	6971      	ldr	r1, [r6, #20]
 8001c16:	2570      	movs	r5, #112	; 0x70
 8001c18:	43a9      	bics	r1, r5
 8001c1a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8001c1c:	012d      	lsls	r5, r5, #4
 8001c1e:	4329      	orrs	r1, r5
 8001c20:	6171      	str	r1, [r6, #20]
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001c22:	6921      	ldr	r1, [r4, #16]
 8001c24:	2900      	cmp	r1, #0
 8001c26:	d129      	bne.n	8001c7c <HAL_ADC_Init+0x1ec>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001c28:	6821      	ldr	r1, [r4, #0]
 8001c2a:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8001c2c:	2210      	movs	r2, #16
 8001c2e:	4252      	negs	r2, r2
 8001c30:	432a      	orrs	r2, r5
 8001c32:	628a      	str	r2, [r1, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8001c34:	6822      	ldr	r2, [r4, #0]
 8001c36:	68d2      	ldr	r2, [r2, #12]
 8001c38:	4935      	ldr	r1, [pc, #212]	; (8001d10 <HAL_ADC_Init+0x280>)
 8001c3a:	400a      	ands	r2, r1
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d042      	beq.n	8001cc6 <HAL_ADC_Init+0x236>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001c40:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001c42:	2212      	movs	r2, #18
 8001c44:	4393      	bics	r3, r2
 8001c46:	3a02      	subs	r2, #2
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	65a3      	str	r3, [r4, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c4c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001c4e:	3a0f      	subs	r2, #15
 8001c50:	4313      	orrs	r3, r2
 8001c52:	65e3      	str	r3, [r4, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8001c54:	2001      	movs	r0, #1
 8001c56:	e044      	b.n	8001ce2 <HAL_ADC_Init+0x252>
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001c58:	006d      	lsls	r5, r5, #1
 8001c5a:	086d      	lsrs	r5, r5, #1
 8001c5c:	e7b4      	b.n	8001bc8 <HAL_ADC_Init+0x138>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001c5e:	2e00      	cmp	r6, #0
 8001c60:	d103      	bne.n	8001c6a <HAL_ADC_Init+0x1da>
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001c62:	2580      	movs	r5, #128	; 0x80
 8001c64:	026d      	lsls	r5, r5, #9
 8001c66:	432b      	orrs	r3, r5
 8001c68:	e7b7      	b.n	8001bda <HAL_ADC_Init+0x14a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c6a:	6da5      	ldr	r5, [r4, #88]	; 0x58
 8001c6c:	2620      	movs	r6, #32
 8001c6e:	4335      	orrs	r5, r6
 8001c70:	65a5      	str	r5, [r4, #88]	; 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c72:	6de5      	ldr	r5, [r4, #92]	; 0x5c
 8001c74:	3e1f      	subs	r6, #31
 8001c76:	4335      	orrs	r5, r6
 8001c78:	65e5      	str	r5, [r4, #92]	; 0x5c
 8001c7a:	e7ae      	b.n	8001bda <HAL_ADC_Init+0x14a>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001c7c:	2580      	movs	r5, #128	; 0x80
 8001c7e:	03ad      	lsls	r5, r5, #14
 8001c80:	42a9      	cmp	r1, r5
 8001c82:	d1d7      	bne.n	8001c34 <HAL_ADC_Init+0x1a4>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8001c84:	2a07      	cmp	r2, #7
 8001c86:	d808      	bhi.n	8001c9a <HAL_ADC_Init+0x20a>
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8001c88:	0091      	lsls	r1, r2, #2
 8001c8a:	6e25      	ldr	r5, [r4, #96]	; 0x60
 8001c8c:	40cd      	lsrs	r5, r1
 8001c8e:	210f      	movs	r1, #15
 8001c90:	4029      	ands	r1, r5
 8001c92:	290f      	cmp	r1, #15
 8001c94:	d001      	beq.n	8001c9a <HAL_ADC_Init+0x20a>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8001c96:	3201      	adds	r2, #1
 8001c98:	e7f4      	b.n	8001c84 <HAL_ADC_Init+0x1f4>
      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8001c9a:	2a01      	cmp	r2, #1
 8001c9c:	d00d      	beq.n	8001cba <HAL_ADC_Init+0x22a>
        MODIFY_REG(hadc->Instance->CHSELR,
 8001c9e:	6825      	ldr	r5, [r4, #0]
 8001ca0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8001ca2:	69e2      	ldr	r2, [r4, #28]
 8001ca4:	3a01      	subs	r2, #1
 8001ca6:	0092      	lsls	r2, r2, #2
 8001ca8:	211c      	movs	r1, #28
 8001caa:	4011      	ands	r1, r2
 8001cac:	2210      	movs	r2, #16
 8001cae:	4252      	negs	r2, r2
 8001cb0:	408a      	lsls	r2, r1
 8001cb2:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8001cb4:	430a      	orrs	r2, r1
 8001cb6:	62aa      	str	r2, [r5, #40]	; 0x28
 8001cb8:	e7bc      	b.n	8001c34 <HAL_ADC_Init+0x1a4>
        SET_BIT(hadc->Instance->CHSELR,
 8001cba:	6821      	ldr	r1, [r4, #0]
 8001cbc:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8001cbe:	3a11      	subs	r2, #17
 8001cc0:	432a      	orrs	r2, r5
 8001cc2:	628a      	str	r2, [r1, #40]	; 0x28
 8001cc4:	e7b6      	b.n	8001c34 <HAL_ADC_Init+0x1a4>
      ADC_CLEAR_ERRORCODE(hadc);
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	65e3      	str	r3, [r4, #92]	; 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 8001cca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001ccc:	2203      	movs	r2, #3
 8001cce:	4393      	bics	r3, r2
 8001cd0:	3a02      	subs	r2, #2
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	65a3      	str	r3, [r4, #88]	; 0x58
 8001cd6:	e004      	b.n	8001ce2 <HAL_ADC_Init+0x252>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cd8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001cda:	2210      	movs	r2, #16
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	65a3      	str	r3, [r4, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001ce0:	2001      	movs	r0, #1
  }

  /* Return function status */
  return tmp_hal_status;
}
 8001ce2:	b003      	add	sp, #12
 8001ce4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8001ce6:	2001      	movs	r0, #1
 8001ce8:	e7fb      	b.n	8001ce2 <HAL_ADC_Init+0x252>
 8001cea:	46c0      	nop			; (mov r8, r8)
 8001cec:	6fffffe8 	.word	0x6fffffe8
 8001cf0:	20000000 	.word	0x20000000
 8001cf4:	00030d40 	.word	0x00030d40
 8001cf8:	fffffefd 	.word	0xfffffefd
 8001cfc:	1ffffc02 	.word	0x1ffffc02
 8001d00:	40012708 	.word	0x40012708
 8001d04:	ffc3ffff 	.word	0xffc3ffff
 8001d08:	fffe0219 	.word	0xfffe0219
 8001d0c:	dffffc02 	.word	0xdffffc02
 8001d10:	833fffe7 	.word	0x833fffe7

08001d14 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001d14:	b510      	push	{r4, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d16:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001d18:	f7ff fba2 	bl	8001460 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001d1c:	bd10      	pop	{r4, pc}

08001d1e <HAL_ADC_LevelOutOfWindowCallback>:
}
 8001d1e:	4770      	bx	lr

08001d20 <HAL_ADC_ErrorCallback>:
}
 8001d20:	4770      	bx	lr

08001d22 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001d22:	b510      	push	{r4, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d24:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001d26:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8001d28:	2240      	movs	r2, #64	; 0x40
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	6583      	str	r3, [r0, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001d2e:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8001d30:	3a3c      	subs	r2, #60	; 0x3c
 8001d32:	4313      	orrs	r3, r2
 8001d34:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001d36:	f7ff fff3 	bl	8001d20 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001d3a:	bd10      	pop	{r4, pc}

08001d3c <ADC_DMAConvCplt>:
{
 8001d3c:	b510      	push	{r4, lr}
 8001d3e:	0003      	movs	r3, r0
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d40:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001d42:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8001d44:	2150      	movs	r1, #80	; 0x50
 8001d46:	4211      	tst	r1, r2
 8001d48:	d12a      	bne.n	8001da0 <ADC_DMAConvCplt+0x64>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d4a:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8001d4c:	2380      	movs	r3, #128	; 0x80
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	4313      	orrs	r3, r2
 8001d52:	6583      	str	r3, [r0, #88]	; 0x58
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001d54:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8001d56:	68d9      	ldr	r1, [r3, #12]
 8001d58:	22c0      	movs	r2, #192	; 0xc0
 8001d5a:	0112      	lsls	r2, r2, #4
 8001d5c:	4211      	tst	r1, r2
 8001d5e:	d113      	bne.n	8001d88 <ADC_DMAConvCplt+0x4c>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8001d60:	7e82      	ldrb	r2, [r0, #26]
 8001d62:	2a00      	cmp	r2, #0
 8001d64:	d110      	bne.n	8001d88 <ADC_DMAConvCplt+0x4c>
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	0712      	lsls	r2, r2, #28
 8001d6a:	d50d      	bpl.n	8001d88 <ADC_DMAConvCplt+0x4c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001d6c:	689a      	ldr	r2, [r3, #8]
 8001d6e:	0752      	lsls	r2, r2, #29
 8001d70:	d40d      	bmi.n	8001d8e <ADC_DMAConvCplt+0x52>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001d72:	685a      	ldr	r2, [r3, #4]
 8001d74:	210c      	movs	r1, #12
 8001d76:	438a      	bics	r2, r1
 8001d78:	605a      	str	r2, [r3, #4]
          ADC_STATE_CLR_SET(hadc->State,
 8001d7a:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8001d7c:	4a0e      	ldr	r2, [pc, #56]	; (8001db8 <ADC_DMAConvCplt+0x7c>)
 8001d7e:	4013      	ands	r3, r2
 8001d80:	3204      	adds	r2, #4
 8001d82:	32ff      	adds	r2, #255	; 0xff
 8001d84:	4313      	orrs	r3, r2
 8001d86:	6583      	str	r3, [r0, #88]	; 0x58
    HAL_ADC_ConvCpltCallback(hadc);
 8001d88:	f7ff fb34 	bl	80013f4 <HAL_ADC_ConvCpltCallback>
}
 8001d8c:	bd10      	pop	{r4, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d8e:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8001d90:	2220      	movs	r2, #32
 8001d92:	4313      	orrs	r3, r2
 8001d94:	6583      	str	r3, [r0, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d96:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8001d98:	3a1f      	subs	r2, #31
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	65c3      	str	r3, [r0, #92]	; 0x5c
 8001d9e:	e7f3      	b.n	8001d88 <ADC_DMAConvCplt+0x4c>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001da0:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8001da2:	06d2      	lsls	r2, r2, #27
 8001da4:	d404      	bmi.n	8001db0 <ADC_DMAConvCplt+0x74>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001da6:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8001da8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001daa:	0018      	movs	r0, r3
 8001dac:	4790      	blx	r2
}
 8001dae:	e7ed      	b.n	8001d8c <ADC_DMAConvCplt+0x50>
      HAL_ADC_ErrorCallback(hadc);
 8001db0:	f7ff ffb6 	bl	8001d20 <HAL_ADC_ErrorCallback>
 8001db4:	e7ea      	b.n	8001d8c <ADC_DMAConvCplt+0x50>
 8001db6:	46c0      	nop			; (mov r8, r8)
 8001db8:	fffffefe 	.word	0xfffffefe

08001dbc <HAL_ADC_IRQHandler>:
{
 8001dbc:	b570      	push	{r4, r5, r6, lr}
 8001dbe:	0004      	movs	r4, r0
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001dc0:	6803      	ldr	r3, [r0, #0]
 8001dc2:	681e      	ldr	r6, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001dc4:	685d      	ldr	r5, [r3, #4]
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001dc6:	07b3      	lsls	r3, r6, #30
 8001dc8:	d50f      	bpl.n	8001dea <HAL_ADC_IRQHandler+0x2e>
 8001dca:	07ab      	lsls	r3, r5, #30
 8001dcc:	d50d      	bpl.n	8001dea <HAL_ADC_IRQHandler+0x2e>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001dce:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8001dd0:	06db      	lsls	r3, r3, #27
 8001dd2:	d404      	bmi.n	8001dde <HAL_ADC_IRQHandler+0x22>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001dd4:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8001dd6:	2380      	movs	r3, #128	; 0x80
 8001dd8:	011b      	lsls	r3, r3, #4
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	6583      	str	r3, [r0, #88]	; 0x58
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001dde:	0020      	movs	r0, r4
 8001de0:	f000 fb46 	bl	8002470 <HAL_ADCEx_EndOfSamplingCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001de4:	6823      	ldr	r3, [r4, #0]
 8001de6:	2202      	movs	r2, #2
 8001de8:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001dea:	0773      	lsls	r3, r6, #29
 8001dec:	d501      	bpl.n	8001df2 <HAL_ADC_IRQHandler+0x36>
 8001dee:	076b      	lsls	r3, r5, #29
 8001df0:	d403      	bmi.n	8001dfa <HAL_ADC_IRQHandler+0x3e>
 8001df2:	0733      	lsls	r3, r6, #28
 8001df4:	d529      	bpl.n	8001e4a <HAL_ADC_IRQHandler+0x8e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001df6:	072b      	lsls	r3, r5, #28
 8001df8:	d527      	bpl.n	8001e4a <HAL_ADC_IRQHandler+0x8e>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001dfa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001dfc:	06db      	lsls	r3, r3, #27
 8001dfe:	d404      	bmi.n	8001e0a <HAL_ADC_IRQHandler+0x4e>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e00:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8001e02:	2380      	movs	r3, #128	; 0x80
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	4313      	orrs	r3, r2
 8001e08:	65a3      	str	r3, [r4, #88]	; 0x58
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001e0a:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8001e0c:	68d9      	ldr	r1, [r3, #12]
 8001e0e:	22c0      	movs	r2, #192	; 0xc0
 8001e10:	0112      	lsls	r2, r2, #4
 8001e12:	4211      	tst	r1, r2
 8001e14:	d113      	bne.n	8001e3e <HAL_ADC_IRQHandler+0x82>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8001e16:	7ea2      	ldrb	r2, [r4, #26]
 8001e18:	2a00      	cmp	r2, #0
 8001e1a:	d110      	bne.n	8001e3e <HAL_ADC_IRQHandler+0x82>
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	0712      	lsls	r2, r2, #28
 8001e20:	d50d      	bpl.n	8001e3e <HAL_ADC_IRQHandler+0x82>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001e22:	689a      	ldr	r2, [r3, #8]
 8001e24:	0752      	lsls	r2, r2, #29
 8001e26:	d43b      	bmi.n	8001ea0 <HAL_ADC_IRQHandler+0xe4>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001e28:	685a      	ldr	r2, [r3, #4]
 8001e2a:	210c      	movs	r1, #12
 8001e2c:	438a      	bics	r2, r1
 8001e2e:	605a      	str	r2, [r3, #4]
          ADC_STATE_CLR_SET(hadc->State,
 8001e30:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001e32:	4a37      	ldr	r2, [pc, #220]	; (8001f10 <HAL_ADC_IRQHandler+0x154>)
 8001e34:	4013      	ands	r3, r2
 8001e36:	3204      	adds	r2, #4
 8001e38:	32ff      	adds	r2, #255	; 0xff
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	65a3      	str	r3, [r4, #88]	; 0x58
    HAL_ADC_ConvCpltCallback(hadc);
 8001e3e:	0020      	movs	r0, r4
 8001e40:	f7ff fad8 	bl	80013f4 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001e44:	6823      	ldr	r3, [r4, #0]
 8001e46:	220c      	movs	r2, #12
 8001e48:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001e4a:	0633      	lsls	r3, r6, #24
 8001e4c:	d501      	bpl.n	8001e52 <HAL_ADC_IRQHandler+0x96>
 8001e4e:	062b      	lsls	r3, r5, #24
 8001e50:	d42f      	bmi.n	8001eb2 <HAL_ADC_IRQHandler+0xf6>
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001e52:	05f3      	lsls	r3, r6, #23
 8001e54:	d501      	bpl.n	8001e5a <HAL_ADC_IRQHandler+0x9e>
 8001e56:	05eb      	lsls	r3, r5, #23
 8001e58:	d437      	bmi.n	8001eca <HAL_ADC_IRQHandler+0x10e>
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001e5a:	05b3      	lsls	r3, r6, #22
 8001e5c:	d501      	bpl.n	8001e62 <HAL_ADC_IRQHandler+0xa6>
 8001e5e:	05ab      	lsls	r3, r5, #22
 8001e60:	d440      	bmi.n	8001ee4 <HAL_ADC_IRQHandler+0x128>
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001e62:	06f3      	lsls	r3, r6, #27
 8001e64:	d517      	bpl.n	8001e96 <HAL_ADC_IRQHandler+0xda>
 8001e66:	06eb      	lsls	r3, r5, #27
 8001e68:	d515      	bpl.n	8001e96 <HAL_ADC_IRQHandler+0xda>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001e6a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d003      	beq.n	8001e78 <HAL_ADC_IRQHandler+0xbc>
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8001e70:	6823      	ldr	r3, [r4, #0]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	079b      	lsls	r3, r3, #30
 8001e76:	d00b      	beq.n	8001e90 <HAL_ADC_IRQHandler+0xd4>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001e78:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8001e7a:	2380      	movs	r3, #128	; 0x80
 8001e7c:	00db      	lsls	r3, r3, #3
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	65a3      	str	r3, [r4, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001e82:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001e84:	2202      	movs	r2, #2
 8001e86:	4313      	orrs	r3, r2
 8001e88:	65e3      	str	r3, [r4, #92]	; 0x5c
      HAL_ADC_ErrorCallback(hadc);
 8001e8a:	0020      	movs	r0, r4
 8001e8c:	f7ff ff48 	bl	8001d20 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001e90:	6823      	ldr	r3, [r4, #0]
 8001e92:	2210      	movs	r2, #16
 8001e94:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 8001e96:	04b3      	lsls	r3, r6, #18
 8001e98:	d501      	bpl.n	8001e9e <HAL_ADC_IRQHandler+0xe2>
 8001e9a:	04ab      	lsls	r3, r5, #18
 8001e9c:	d42f      	bmi.n	8001efe <HAL_ADC_IRQHandler+0x142>
}
 8001e9e:	bd70      	pop	{r4, r5, r6, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ea0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001ea2:	2220      	movs	r2, #32
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	65a3      	str	r3, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ea8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001eaa:	3a1f      	subs	r2, #31
 8001eac:	4313      	orrs	r3, r2
 8001eae:	65e3      	str	r3, [r4, #92]	; 0x5c
 8001eb0:	e7c5      	b.n	8001e3e <HAL_ADC_IRQHandler+0x82>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001eb2:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8001eb4:	2380      	movs	r3, #128	; 0x80
 8001eb6:	025b      	lsls	r3, r3, #9
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	65a3      	str	r3, [r4, #88]	; 0x58
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001ebc:	0020      	movs	r0, r4
 8001ebe:	f7ff ff2e 	bl	8001d1e <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001ec2:	6823      	ldr	r3, [r4, #0]
 8001ec4:	2280      	movs	r2, #128	; 0x80
 8001ec6:	601a      	str	r2, [r3, #0]
 8001ec8:	e7c3      	b.n	8001e52 <HAL_ADC_IRQHandler+0x96>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001eca:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8001ecc:	2380      	movs	r3, #128	; 0x80
 8001ece:	029b      	lsls	r3, r3, #10
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	65a3      	str	r3, [r4, #88]	; 0x58
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001ed4:	0020      	movs	r0, r4
 8001ed6:	f000 fac9 	bl	800246c <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001eda:	6823      	ldr	r3, [r4, #0]
 8001edc:	2280      	movs	r2, #128	; 0x80
 8001ede:	0052      	lsls	r2, r2, #1
 8001ee0:	601a      	str	r2, [r3, #0]
 8001ee2:	e7ba      	b.n	8001e5a <HAL_ADC_IRQHandler+0x9e>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001ee4:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8001ee6:	2380      	movs	r3, #128	; 0x80
 8001ee8:	02db      	lsls	r3, r3, #11
 8001eea:	4313      	orrs	r3, r2
 8001eec:	65a3      	str	r3, [r4, #88]	; 0x58
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001eee:	0020      	movs	r0, r4
 8001ef0:	f000 fabd 	bl	800246e <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001ef4:	6823      	ldr	r3, [r4, #0]
 8001ef6:	2280      	movs	r2, #128	; 0x80
 8001ef8:	0092      	lsls	r2, r2, #2
 8001efa:	601a      	str	r2, [r3, #0]
 8001efc:	e7b1      	b.n	8001e62 <HAL_ADC_IRQHandler+0xa6>
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 8001efe:	0020      	movs	r0, r4
 8001f00:	f000 fab7 	bl	8002472 <HAL_ADCEx_ChannelConfigReadyCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 8001f04:	6823      	ldr	r3, [r4, #0]
 8001f06:	2280      	movs	r2, #128	; 0x80
 8001f08:	0192      	lsls	r2, r2, #6
 8001f0a:	601a      	str	r2, [r3, #0]
}
 8001f0c:	e7c7      	b.n	8001e9e <HAL_ADC_IRQHandler+0xe2>
 8001f0e:	46c0      	nop			; (mov r8, r8)
 8001f10:	fffffefe 	.word	0xfffffefe

08001f14 <HAL_ADC_ConfigChannel>:
{
 8001f14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f16:	b083      	sub	sp, #12
 8001f18:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0UL;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	9301      	str	r3, [sp, #4]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001f1e:	6905      	ldr	r5, [r0, #16]
  __HAL_LOCK(hadc);
 8001f20:	3354      	adds	r3, #84	; 0x54
 8001f22:	5cc3      	ldrb	r3, [r0, r3]
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d100      	bne.n	8001f2a <HAL_ADC_ConfigChannel+0x16>
 8001f28:	e130      	b.n	800218c <HAL_ADC_ConfigChannel+0x278>
 8001f2a:	2354      	movs	r3, #84	; 0x54
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	54c2      	strb	r2, [r0, r3]
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f30:	6800      	ldr	r0, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001f32:	6883      	ldr	r3, [r0, #8]
 8001f34:	3203      	adds	r2, #3
 8001f36:	0016      	movs	r6, r2
 8001f38:	401e      	ands	r6, r3
 8001f3a:	421a      	tst	r2, r3
 8001f3c:	d009      	beq.n	8001f52 <HAL_ADC_ConfigChannel+0x3e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f3e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001f40:	321c      	adds	r2, #28
 8001f42:	4313      	orrs	r3, r2
 8001f44:	65a3      	str	r3, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 8001f46:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8001f48:	2354      	movs	r3, #84	; 0x54
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	54e2      	strb	r2, [r4, r3]
}
 8001f4e:	b003      	add	sp, #12
 8001f50:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (sConfig->Rank != ADC_RANK_NONE)
 8001f52:	684b      	ldr	r3, [r1, #4]
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	d100      	bne.n	8001f5a <HAL_ADC_ConfigChannel+0x46>
 8001f58:	e0d6      	b.n	8002108 <HAL_ADC_ConfigChannel+0x1f4>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001f5a:	2280      	movs	r2, #128	; 0x80
 8001f5c:	0612      	lsls	r2, r2, #24
 8001f5e:	4295      	cmp	r5, r2
 8001f60:	d026      	beq.n	8001fb0 <HAL_ADC_ConfigChannel+0x9c>
 8001f62:	4a8b      	ldr	r2, [pc, #556]	; (8002190 <HAL_ADC_ConfigChannel+0x27c>)
 8001f64:	4295      	cmp	r5, r2
 8001f66:	d023      	beq.n	8001fb0 <HAL_ADC_ConfigChannel+0x9c>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001f68:	221f      	movs	r2, #31
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	3a10      	subs	r2, #16
 8001f6e:	409a      	lsls	r2, r3
 8001f70:	6e25      	ldr	r5, [r4, #96]	; 0x60
 8001f72:	4395      	bics	r5, r2
 8001f74:	002a      	movs	r2, r5
 8001f76:	680d      	ldr	r5, [r1, #0]
 8001f78:	036f      	lsls	r7, r5, #13
 8001f7a:	d12f      	bne.n	8001fdc <HAL_ADC_ConfigChannel+0xc8>
 8001f7c:	0ead      	lsrs	r5, r5, #26
 8001f7e:	261f      	movs	r6, #31
 8001f80:	402e      	ands	r6, r5
 8001f82:	409e      	lsls	r6, r3
 8001f84:	4316      	orrs	r6, r2
 8001f86:	6626      	str	r6, [r4, #96]	; 0x60
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001f88:	684d      	ldr	r5, [r1, #4]
 8001f8a:	08ab      	lsrs	r3, r5, #2
 8001f8c:	3301      	adds	r3, #1
 8001f8e:	69e2      	ldr	r2, [r4, #28]
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d813      	bhi.n	8001fbc <HAL_ADC_ConfigChannel+0xa8>
  MODIFY_REG(ADCx->CHSELR,
 8001f94:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8001f96:	231f      	movs	r3, #31
 8001f98:	401d      	ands	r5, r3
 8001f9a:	3b10      	subs	r3, #16
 8001f9c:	001e      	movs	r6, r3
 8001f9e:	40ae      	lsls	r6, r5
 8001fa0:	43b2      	bics	r2, r6
 8001fa2:	680e      	ldr	r6, [r1, #0]
 8001fa4:	0eb6      	lsrs	r6, r6, #26
 8001fa6:	4033      	ands	r3, r6
 8001fa8:	40ab      	lsls	r3, r5
 8001faa:	4313      	orrs	r3, r2
 8001fac:	6283      	str	r3, [r0, #40]	; 0x28
}
 8001fae:	e005      	b.n	8001fbc <HAL_ADC_ConfigChannel+0xa8>
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001fb0:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8001fb2:	680b      	ldr	r3, [r1, #0]
 8001fb4:	035b      	lsls	r3, r3, #13
 8001fb6:	0b5b      	lsrs	r3, r3, #13
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	6283      	str	r3, [r0, #40]	; 0x28
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001fbc:	6820      	ldr	r0, [r4, #0]
  MODIFY_REG(ADCx->SMPR,
 8001fbe:	6942      	ldr	r2, [r0, #20]
 8001fc0:	680b      	ldr	r3, [r1, #0]
 8001fc2:	021b      	lsls	r3, r3, #8
 8001fc4:	439a      	bics	r2, r3
 8001fc6:	688d      	ldr	r5, [r1, #8]
 8001fc8:	402b      	ands	r3, r5
 8001fca:	4d72      	ldr	r5, [pc, #456]	; (8002194 <HAL_ADC_ConfigChannel+0x280>)
 8001fcc:	402b      	ands	r3, r5
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	6143      	str	r3, [r0, #20]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001fd2:	680b      	ldr	r3, [r1, #0]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	db4f      	blt.n	8002078 <HAL_ADC_ConfigChannel+0x164>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fd8:	2000      	movs	r0, #0
 8001fda:	e7b5      	b.n	8001f48 <HAL_ADC_ConfigChannel+0x34>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001fdc:	07ef      	lsls	r7, r5, #31
 8001fde:	d4d0      	bmi.n	8001f82 <HAL_ADC_ConfigChannel+0x6e>
 8001fe0:	07ae      	lsls	r6, r5, #30
 8001fe2:	d427      	bmi.n	8002034 <HAL_ADC_ConfigChannel+0x120>
 8001fe4:	076e      	lsls	r6, r5, #29
 8001fe6:	d427      	bmi.n	8002038 <HAL_ADC_ConfigChannel+0x124>
 8001fe8:	072e      	lsls	r6, r5, #28
 8001fea:	d427      	bmi.n	800203c <HAL_ADC_ConfigChannel+0x128>
 8001fec:	06ee      	lsls	r6, r5, #27
 8001fee:	d427      	bmi.n	8002040 <HAL_ADC_ConfigChannel+0x12c>
 8001ff0:	06ae      	lsls	r6, r5, #26
 8001ff2:	d427      	bmi.n	8002044 <HAL_ADC_ConfigChannel+0x130>
 8001ff4:	066e      	lsls	r6, r5, #25
 8001ff6:	d427      	bmi.n	8002048 <HAL_ADC_ConfigChannel+0x134>
 8001ff8:	062e      	lsls	r6, r5, #24
 8001ffa:	d427      	bmi.n	800204c <HAL_ADC_ConfigChannel+0x138>
 8001ffc:	05ee      	lsls	r6, r5, #23
 8001ffe:	d427      	bmi.n	8002050 <HAL_ADC_ConfigChannel+0x13c>
 8002000:	05ae      	lsls	r6, r5, #22
 8002002:	d427      	bmi.n	8002054 <HAL_ADC_ConfigChannel+0x140>
 8002004:	056e      	lsls	r6, r5, #21
 8002006:	d427      	bmi.n	8002058 <HAL_ADC_ConfigChannel+0x144>
 8002008:	052e      	lsls	r6, r5, #20
 800200a:	d427      	bmi.n	800205c <HAL_ADC_ConfigChannel+0x148>
 800200c:	04ee      	lsls	r6, r5, #19
 800200e:	d427      	bmi.n	8002060 <HAL_ADC_ConfigChannel+0x14c>
 8002010:	04ae      	lsls	r6, r5, #18
 8002012:	d427      	bmi.n	8002064 <HAL_ADC_ConfigChannel+0x150>
 8002014:	046e      	lsls	r6, r5, #17
 8002016:	d427      	bmi.n	8002068 <HAL_ADC_ConfigChannel+0x154>
 8002018:	042e      	lsls	r6, r5, #16
 800201a:	d427      	bmi.n	800206c <HAL_ADC_ConfigChannel+0x158>
 800201c:	03ee      	lsls	r6, r5, #15
 800201e:	d427      	bmi.n	8002070 <HAL_ADC_ConfigChannel+0x15c>
 8002020:	03ae      	lsls	r6, r5, #14
 8002022:	d427      	bmi.n	8002074 <HAL_ADC_ConfigChannel+0x160>
 8002024:	2780      	movs	r7, #128	; 0x80
 8002026:	02ff      	lsls	r7, r7, #11
 8002028:	002e      	movs	r6, r5
 800202a:	403e      	ands	r6, r7
 800202c:	423d      	tst	r5, r7
 800202e:	d0a8      	beq.n	8001f82 <HAL_ADC_ConfigChannel+0x6e>
 8002030:	2612      	movs	r6, #18
 8002032:	e7a6      	b.n	8001f82 <HAL_ADC_ConfigChannel+0x6e>
 8002034:	2601      	movs	r6, #1
 8002036:	e7a4      	b.n	8001f82 <HAL_ADC_ConfigChannel+0x6e>
 8002038:	2602      	movs	r6, #2
 800203a:	e7a2      	b.n	8001f82 <HAL_ADC_ConfigChannel+0x6e>
 800203c:	2603      	movs	r6, #3
 800203e:	e7a0      	b.n	8001f82 <HAL_ADC_ConfigChannel+0x6e>
 8002040:	2604      	movs	r6, #4
 8002042:	e79e      	b.n	8001f82 <HAL_ADC_ConfigChannel+0x6e>
 8002044:	2605      	movs	r6, #5
 8002046:	e79c      	b.n	8001f82 <HAL_ADC_ConfigChannel+0x6e>
 8002048:	2606      	movs	r6, #6
 800204a:	e79a      	b.n	8001f82 <HAL_ADC_ConfigChannel+0x6e>
 800204c:	2607      	movs	r6, #7
 800204e:	e798      	b.n	8001f82 <HAL_ADC_ConfigChannel+0x6e>
 8002050:	2608      	movs	r6, #8
 8002052:	e796      	b.n	8001f82 <HAL_ADC_ConfigChannel+0x6e>
 8002054:	2609      	movs	r6, #9
 8002056:	e794      	b.n	8001f82 <HAL_ADC_ConfigChannel+0x6e>
 8002058:	260a      	movs	r6, #10
 800205a:	e792      	b.n	8001f82 <HAL_ADC_ConfigChannel+0x6e>
 800205c:	260b      	movs	r6, #11
 800205e:	e790      	b.n	8001f82 <HAL_ADC_ConfigChannel+0x6e>
 8002060:	260c      	movs	r6, #12
 8002062:	e78e      	b.n	8001f82 <HAL_ADC_ConfigChannel+0x6e>
 8002064:	260d      	movs	r6, #13
 8002066:	e78c      	b.n	8001f82 <HAL_ADC_ConfigChannel+0x6e>
 8002068:	260e      	movs	r6, #14
 800206a:	e78a      	b.n	8001f82 <HAL_ADC_ConfigChannel+0x6e>
 800206c:	260f      	movs	r6, #15
 800206e:	e788      	b.n	8001f82 <HAL_ADC_ConfigChannel+0x6e>
 8002070:	2610      	movs	r6, #16
 8002072:	e786      	b.n	8001f82 <HAL_ADC_ConfigChannel+0x6e>
 8002074:	2611      	movs	r6, #17
 8002076:	e784      	b.n	8001f82 <HAL_ADC_ConfigChannel+0x6e>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002078:	4a47      	ldr	r2, [pc, #284]	; (8002198 <HAL_ADC_ConfigChannel+0x284>)
 800207a:	6811      	ldr	r1, [r2, #0]
 800207c:	22e0      	movs	r2, #224	; 0xe0
 800207e:	0452      	lsls	r2, r2, #17
 8002080:	400a      	ands	r2, r1
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002082:	4846      	ldr	r0, [pc, #280]	; (800219c <HAL_ADC_ConfigChannel+0x288>)
 8002084:	4283      	cmp	r3, r0
 8002086:	d007      	beq.n	8002098 <HAL_ADC_ConfigChannel+0x184>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002088:	4845      	ldr	r0, [pc, #276]	; (80021a0 <HAL_ADC_ConfigChannel+0x28c>)
 800208a:	4283      	cmp	r3, r0
 800208c:	d022      	beq.n	80020d4 <HAL_ADC_ConfigChannel+0x1c0>
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800208e:	4845      	ldr	r0, [pc, #276]	; (80021a4 <HAL_ADC_ConfigChannel+0x290>)
 8002090:	4283      	cmp	r3, r0
 8002092:	d02c      	beq.n	80020ee <HAL_ADC_ConfigChannel+0x1da>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002094:	2000      	movs	r0, #0
 8002096:	e757      	b.n	8001f48 <HAL_ADC_ConfigChannel+0x34>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002098:	0208      	lsls	r0, r1, #8
 800209a:	d4f5      	bmi.n	8002088 <HAL_ADC_ConfigChannel+0x174>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800209c:	2380      	movs	r3, #128	; 0x80
 800209e:	041b      	lsls	r3, r3, #16
 80020a0:	431a      	orrs	r2, r3
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80020a2:	493d      	ldr	r1, [pc, #244]	; (8002198 <HAL_ADC_ConfigChannel+0x284>)
 80020a4:	680b      	ldr	r3, [r1, #0]
 80020a6:	4840      	ldr	r0, [pc, #256]	; (80021a8 <HAL_ADC_ConfigChannel+0x294>)
 80020a8:	4003      	ands	r3, r0
 80020aa:	431a      	orrs	r2, r3
 80020ac:	600a      	str	r2, [r1, #0]
          wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 80020ae:	4b3f      	ldr	r3, [pc, #252]	; (80021ac <HAL_ADC_ConfigChannel+0x298>)
 80020b0:	6818      	ldr	r0, [r3, #0]
 80020b2:	493f      	ldr	r1, [pc, #252]	; (80021b0 <HAL_ADC_ConfigChannel+0x29c>)
 80020b4:	f7fe f836 	bl	8000124 <__udivsi3>
 80020b8:	0043      	lsls	r3, r0, #1
 80020ba:	181b      	adds	r3, r3, r0
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	3301      	adds	r3, #1
 80020c0:	9301      	str	r3, [sp, #4]
          while (wait_loop_index != 0UL)
 80020c2:	e002      	b.n	80020ca <HAL_ADC_ConfigChannel+0x1b6>
            wait_loop_index--;
 80020c4:	9b01      	ldr	r3, [sp, #4]
 80020c6:	3b01      	subs	r3, #1
 80020c8:	9301      	str	r3, [sp, #4]
          while (wait_loop_index != 0UL)
 80020ca:	9b01      	ldr	r3, [sp, #4]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d1f9      	bne.n	80020c4 <HAL_ADC_ConfigChannel+0x1b0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020d0:	2000      	movs	r0, #0
 80020d2:	e739      	b.n	8001f48 <HAL_ADC_ConfigChannel+0x34>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80020d4:	01c8      	lsls	r0, r1, #7
 80020d6:	d4da      	bmi.n	800208e <HAL_ADC_ConfigChannel+0x17a>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80020d8:	2380      	movs	r3, #128	; 0x80
 80020da:	045b      	lsls	r3, r3, #17
 80020dc:	431a      	orrs	r2, r3
 80020de:	492e      	ldr	r1, [pc, #184]	; (8002198 <HAL_ADC_ConfigChannel+0x284>)
 80020e0:	680b      	ldr	r3, [r1, #0]
 80020e2:	4831      	ldr	r0, [pc, #196]	; (80021a8 <HAL_ADC_ConfigChannel+0x294>)
 80020e4:	4003      	ands	r3, r0
 80020e6:	431a      	orrs	r2, r3
 80020e8:	600a      	str	r2, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020ea:	2000      	movs	r0, #0
}
 80020ec:	e72c      	b.n	8001f48 <HAL_ADC_ConfigChannel+0x34>
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80020ee:	024b      	lsls	r3, r1, #9
 80020f0:	d44a      	bmi.n	8002188 <HAL_ADC_ConfigChannel+0x274>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80020f2:	2380      	movs	r3, #128	; 0x80
 80020f4:	03db      	lsls	r3, r3, #15
 80020f6:	431a      	orrs	r2, r3
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80020f8:	4927      	ldr	r1, [pc, #156]	; (8002198 <HAL_ADC_ConfigChannel+0x284>)
 80020fa:	680b      	ldr	r3, [r1, #0]
 80020fc:	482a      	ldr	r0, [pc, #168]	; (80021a8 <HAL_ADC_ConfigChannel+0x294>)
 80020fe:	4003      	ands	r3, r0
 8002100:	431a      	orrs	r2, r3
 8002102:	600a      	str	r2, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002104:	2000      	movs	r0, #0
}
 8002106:	e71f      	b.n	8001f48 <HAL_ADC_ConfigChannel+0x34>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002108:	2380      	movs	r3, #128	; 0x80
 800210a:	061b      	lsls	r3, r3, #24
 800210c:	429d      	cmp	r5, r3
 800210e:	d002      	beq.n	8002116 <HAL_ADC_ConfigChannel+0x202>
 8002110:	4b1f      	ldr	r3, [pc, #124]	; (8002190 <HAL_ADC_ConfigChannel+0x27c>)
 8002112:	429d      	cmp	r5, r3
 8002114:	d105      	bne.n	8002122 <HAL_ADC_ConfigChannel+0x20e>
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002116:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8002118:	680b      	ldr	r3, [r1, #0]
 800211a:	035b      	lsls	r3, r3, #13
 800211c:	0b5b      	lsrs	r3, r3, #13
 800211e:	439a      	bics	r2, r3
 8002120:	6282      	str	r2, [r0, #40]	; 0x28
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002122:	680b      	ldr	r3, [r1, #0]
 8002124:	2b00      	cmp	r3, #0
 8002126:	db01      	blt.n	800212c <HAL_ADC_ConfigChannel+0x218>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002128:	2000      	movs	r0, #0
 800212a:	e70d      	b.n	8001f48 <HAL_ADC_ConfigChannel+0x34>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800212c:	4a1a      	ldr	r2, [pc, #104]	; (8002198 <HAL_ADC_ConfigChannel+0x284>)
 800212e:	6812      	ldr	r2, [r2, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002130:	491a      	ldr	r1, [pc, #104]	; (800219c <HAL_ADC_ConfigChannel+0x288>)
 8002132:	428b      	cmp	r3, r1
 8002134:	d007      	beq.n	8002146 <HAL_ADC_ConfigChannel+0x232>
        else if (sConfig->Channel == ADC_CHANNEL_VBAT)
 8002136:	491a      	ldr	r1, [pc, #104]	; (80021a0 <HAL_ADC_ConfigChannel+0x28c>)
 8002138:	428b      	cmp	r3, r1
 800213a:	d00f      	beq.n	800215c <HAL_ADC_ConfigChannel+0x248>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800213c:	4919      	ldr	r1, [pc, #100]	; (80021a4 <HAL_ADC_ConfigChannel+0x290>)
 800213e:	428b      	cmp	r3, r1
 8002140:	d017      	beq.n	8002172 <HAL_ADC_ConfigChannel+0x25e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002142:	2000      	movs	r0, #0
 8002144:	e700      	b.n	8001f48 <HAL_ADC_ConfigChannel+0x34>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002146:	23a0      	movs	r3, #160	; 0xa0
 8002148:	045b      	lsls	r3, r3, #17
 800214a:	401a      	ands	r2, r3
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800214c:	4912      	ldr	r1, [pc, #72]	; (8002198 <HAL_ADC_ConfigChannel+0x284>)
 800214e:	680b      	ldr	r3, [r1, #0]
 8002150:	4815      	ldr	r0, [pc, #84]	; (80021a8 <HAL_ADC_ConfigChannel+0x294>)
 8002152:	4003      	ands	r3, r0
 8002154:	431a      	orrs	r2, r3
 8002156:	600a      	str	r2, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002158:	2000      	movs	r0, #0
}
 800215a:	e6f5      	b.n	8001f48 <HAL_ADC_ConfigChannel+0x34>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800215c:	23c0      	movs	r3, #192	; 0xc0
 800215e:	041b      	lsls	r3, r3, #16
 8002160:	401a      	ands	r2, r3
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002162:	490d      	ldr	r1, [pc, #52]	; (8002198 <HAL_ADC_ConfigChannel+0x284>)
 8002164:	680b      	ldr	r3, [r1, #0]
 8002166:	4810      	ldr	r0, [pc, #64]	; (80021a8 <HAL_ADC_ConfigChannel+0x294>)
 8002168:	4003      	ands	r3, r0
 800216a:	431a      	orrs	r2, r3
 800216c:	600a      	str	r2, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800216e:	2000      	movs	r0, #0
}
 8002170:	e6ea      	b.n	8001f48 <HAL_ADC_ConfigChannel+0x34>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002172:	23c0      	movs	r3, #192	; 0xc0
 8002174:	045b      	lsls	r3, r3, #17
 8002176:	401a      	ands	r2, r3
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002178:	4907      	ldr	r1, [pc, #28]	; (8002198 <HAL_ADC_ConfigChannel+0x284>)
 800217a:	680b      	ldr	r3, [r1, #0]
 800217c:	480a      	ldr	r0, [pc, #40]	; (80021a8 <HAL_ADC_ConfigChannel+0x294>)
 800217e:	4003      	ands	r3, r0
 8002180:	431a      	orrs	r2, r3
 8002182:	600a      	str	r2, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002184:	2000      	movs	r0, #0
}
 8002186:	e6df      	b.n	8001f48 <HAL_ADC_ConfigChannel+0x34>
 8002188:	2000      	movs	r0, #0
 800218a:	e6dd      	b.n	8001f48 <HAL_ADC_ConfigChannel+0x34>
  __HAL_LOCK(hadc);
 800218c:	2002      	movs	r0, #2
 800218e:	e6de      	b.n	8001f4e <HAL_ADC_ConfigChannel+0x3a>
 8002190:	80000004 	.word	0x80000004
 8002194:	07ffff00 	.word	0x07ffff00
 8002198:	40012708 	.word	0x40012708
 800219c:	b0001000 	.word	0xb0001000
 80021a0:	b8004000 	.word	0xb8004000
 80021a4:	b4002000 	.word	0xb4002000
 80021a8:	fe3fffff 	.word	0xfe3fffff
 80021ac:	20000000 	.word	0x20000000
 80021b0:	00030d40 	.word	0x00030d40

080021b4 <ADC_Enable>:
{
 80021b4:	b530      	push	{r4, r5, lr}
 80021b6:	b083      	sub	sp, #12
 80021b8:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0UL;
 80021ba:	2300      	movs	r3, #0
 80021bc:	9301      	str	r3, [sp, #4]
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021be:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80021c0:	689a      	ldr	r2, [r3, #8]
 80021c2:	07d2      	lsls	r2, r2, #31
 80021c4:	d44d      	bmi.n	8002262 <ADC_Enable+0xae>
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80021c6:	6899      	ldr	r1, [r3, #8]
 80021c8:	4a27      	ldr	r2, [pc, #156]	; (8002268 <ADC_Enable+0xb4>)
 80021ca:	4211      	tst	r1, r2
 80021cc:	d117      	bne.n	80021fe <ADC_Enable+0x4a>
  MODIFY_REG(ADCx->CR,
 80021ce:	689a      	ldr	r2, [r3, #8]
 80021d0:	4926      	ldr	r1, [pc, #152]	; (800226c <ADC_Enable+0xb8>)
 80021d2:	400a      	ands	r2, r1
 80021d4:	2101      	movs	r1, #1
 80021d6:	430a      	orrs	r2, r1
 80021d8:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80021da:	4b25      	ldr	r3, [pc, #148]	; (8002270 <ADC_Enable+0xbc>)
 80021dc:	681b      	ldr	r3, [r3, #0]
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80021de:	021b      	lsls	r3, r3, #8
 80021e0:	d517      	bpl.n	8002212 <ADC_Enable+0x5e>
      wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 80021e2:	4b24      	ldr	r3, [pc, #144]	; (8002274 <ADC_Enable+0xc0>)
 80021e4:	6818      	ldr	r0, [r3, #0]
 80021e6:	4924      	ldr	r1, [pc, #144]	; (8002278 <ADC_Enable+0xc4>)
 80021e8:	f7fd ff9c 	bl	8000124 <__udivsi3>
 80021ec:	3001      	adds	r0, #1
 80021ee:	9001      	str	r0, [sp, #4]
      while (wait_loop_index != 0UL)
 80021f0:	9b01      	ldr	r3, [sp, #4]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d00d      	beq.n	8002212 <ADC_Enable+0x5e>
        wait_loop_index--;
 80021f6:	9b01      	ldr	r3, [sp, #4]
 80021f8:	3b01      	subs	r3, #1
 80021fa:	9301      	str	r3, [sp, #4]
 80021fc:	e7f8      	b.n	80021f0 <ADC_Enable+0x3c>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021fe:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8002200:	2210      	movs	r2, #16
 8002202:	4313      	orrs	r3, r2
 8002204:	6583      	str	r3, [r0, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002206:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8002208:	3a0f      	subs	r2, #15
 800220a:	4313      	orrs	r3, r2
 800220c:	65c3      	str	r3, [r0, #92]	; 0x5c
      return HAL_ERROR;
 800220e:	2001      	movs	r0, #1
 8002210:	e028      	b.n	8002264 <ADC_Enable+0xb0>
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002212:	7e63      	ldrb	r3, [r4, #25]
 8002214:	2b01      	cmp	r3, #1
 8002216:	d101      	bne.n	800221c <ADC_Enable+0x68>
  return HAL_OK;
 8002218:	2000      	movs	r0, #0
 800221a:	e023      	b.n	8002264 <ADC_Enable+0xb0>
      tickstart = HAL_GetTick();
 800221c:	f7ff fc32 	bl	8001a84 <HAL_GetTick>
 8002220:	0005      	movs	r5, r0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002222:	e004      	b.n	800222e <ADC_Enable+0x7a>
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002224:	f7ff fc2e 	bl	8001a84 <HAL_GetTick>
 8002228:	1b40      	subs	r0, r0, r5
 800222a:	2802      	cmp	r0, #2
 800222c:	d80d      	bhi.n	800224a <ADC_Enable+0x96>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800222e:	6823      	ldr	r3, [r4, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	07d2      	lsls	r2, r2, #31
 8002234:	d413      	bmi.n	800225e <ADC_Enable+0xaa>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002236:	689a      	ldr	r2, [r3, #8]
 8002238:	07d2      	lsls	r2, r2, #31
 800223a:	d4f3      	bmi.n	8002224 <ADC_Enable+0x70>
  MODIFY_REG(ADCx->CR,
 800223c:	689a      	ldr	r2, [r3, #8]
 800223e:	490b      	ldr	r1, [pc, #44]	; (800226c <ADC_Enable+0xb8>)
 8002240:	400a      	ands	r2, r1
 8002242:	2101      	movs	r1, #1
 8002244:	430a      	orrs	r2, r1
 8002246:	609a      	str	r2, [r3, #8]
}
 8002248:	e7ec      	b.n	8002224 <ADC_Enable+0x70>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800224a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800224c:	2210      	movs	r2, #16
 800224e:	4313      	orrs	r3, r2
 8002250:	65a3      	str	r3, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002252:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002254:	3a0f      	subs	r2, #15
 8002256:	4313      	orrs	r3, r2
 8002258:	65e3      	str	r3, [r4, #92]	; 0x5c
          return HAL_ERROR;
 800225a:	2001      	movs	r0, #1
 800225c:	e002      	b.n	8002264 <ADC_Enable+0xb0>
  return HAL_OK;
 800225e:	2000      	movs	r0, #0
 8002260:	e000      	b.n	8002264 <ADC_Enable+0xb0>
 8002262:	2000      	movs	r0, #0
}
 8002264:	b003      	add	sp, #12
 8002266:	bd30      	pop	{r4, r5, pc}
 8002268:	80000017 	.word	0x80000017
 800226c:	7fffffe8 	.word	0x7fffffe8
 8002270:	40012708 	.word	0x40012708
 8002274:	20000000 	.word	0x20000000
 8002278:	00030d40 	.word	0x00030d40

0800227c <HAL_ADC_Start_DMA>:
{
 800227c:	b570      	push	{r4, r5, r6, lr}
 800227e:	0004      	movs	r4, r0
 8002280:	000d      	movs	r5, r1
 8002282:	0016      	movs	r6, r2
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002284:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002286:	689a      	ldr	r2, [r3, #8]
 8002288:	0752      	lsls	r2, r2, #29
 800228a:	d447      	bmi.n	800231c <HAL_ADC_Start_DMA+0xa0>
    __HAL_LOCK(hadc);
 800228c:	2254      	movs	r2, #84	; 0x54
 800228e:	5c82      	ldrb	r2, [r0, r2]
 8002290:	2a01      	cmp	r2, #1
 8002292:	d045      	beq.n	8002320 <HAL_ADC_Start_DMA+0xa4>
 8002294:	2201      	movs	r2, #1
 8002296:	2154      	movs	r1, #84	; 0x54
 8002298:	5442      	strb	r2, [r0, r1]
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 800229a:	68d9      	ldr	r1, [r3, #12]
 800229c:	420a      	tst	r2, r1
 800229e:	d10d      	bne.n	80022bc <HAL_ADC_Start_DMA+0x40>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80022a0:	689a      	ldr	r2, [r3, #8]
 80022a2:	07d2      	lsls	r2, r2, #31
 80022a4:	d505      	bpl.n	80022b2 <HAL_ADC_Start_DMA+0x36>
  MODIFY_REG(ADCx->CR,
 80022a6:	689a      	ldr	r2, [r3, #8]
 80022a8:	491e      	ldr	r1, [pc, #120]	; (8002324 <HAL_ADC_Start_DMA+0xa8>)
 80022aa:	400a      	ands	r2, r1
 80022ac:	2102      	movs	r1, #2
 80022ae:	430a      	orrs	r2, r1
 80022b0:	609a      	str	r2, [r3, #8]
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80022b2:	6822      	ldr	r2, [r4, #0]
 80022b4:	68d3      	ldr	r3, [r2, #12]
 80022b6:	2101      	movs	r1, #1
 80022b8:	430b      	orrs	r3, r1
 80022ba:	60d3      	str	r3, [r2, #12]
    tmp_hal_status = ADC_Enable(hadc);
 80022bc:	0020      	movs	r0, r4
 80022be:	f7ff ff79 	bl	80021b4 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80022c2:	2800      	cmp	r0, #0
 80022c4:	d12b      	bne.n	800231e <HAL_ADC_Start_DMA+0xa2>
      ADC_STATE_CLR_SET(hadc->State,
 80022c6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80022c8:	4a17      	ldr	r2, [pc, #92]	; (8002328 <HAL_ADC_Start_DMA+0xac>)
 80022ca:	401a      	ands	r2, r3
 80022cc:	2380      	movs	r3, #128	; 0x80
 80022ce:	005b      	lsls	r3, r3, #1
 80022d0:	4313      	orrs	r3, r2
 80022d2:	65a3      	str	r3, [r4, #88]	; 0x58
      ADC_CLEAR_ERRORCODE(hadc);
 80022d4:	2300      	movs	r3, #0
 80022d6:	65e3      	str	r3, [r4, #92]	; 0x5c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80022d8:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80022da:	4914      	ldr	r1, [pc, #80]	; (800232c <HAL_ADC_Start_DMA+0xb0>)
 80022dc:	62d1      	str	r1, [r2, #44]	; 0x2c
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80022de:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80022e0:	4913      	ldr	r1, [pc, #76]	; (8002330 <HAL_ADC_Start_DMA+0xb4>)
 80022e2:	6311      	str	r1, [r2, #48]	; 0x30
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80022e4:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80022e6:	4913      	ldr	r1, [pc, #76]	; (8002334 <HAL_ADC_Start_DMA+0xb8>)
 80022e8:	6351      	str	r1, [r2, #52]	; 0x34
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80022ea:	6822      	ldr	r2, [r4, #0]
 80022ec:	211c      	movs	r1, #28
 80022ee:	6011      	str	r1, [r2, #0]
      __HAL_UNLOCK(hadc);
 80022f0:	2254      	movs	r2, #84	; 0x54
 80022f2:	54a3      	strb	r3, [r4, r2]
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80022f4:	6822      	ldr	r2, [r4, #0]
 80022f6:	6853      	ldr	r3, [r2, #4]
 80022f8:	390c      	subs	r1, #12
 80022fa:	430b      	orrs	r3, r1
 80022fc:	6053      	str	r3, [r2, #4]
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80022fe:	6821      	ldr	r1, [r4, #0]
 8002300:	3140      	adds	r1, #64	; 0x40
 8002302:	0033      	movs	r3, r6
 8002304:	002a      	movs	r2, r5
 8002306:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8002308:	f000 f9b8 	bl	800267c <HAL_DMA_Start_IT>
      LL_ADC_REG_StartConversion(hadc->Instance);
 800230c:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 800230e:	6893      	ldr	r3, [r2, #8]
 8002310:	4904      	ldr	r1, [pc, #16]	; (8002324 <HAL_ADC_Start_DMA+0xa8>)
 8002312:	400b      	ands	r3, r1
 8002314:	2104      	movs	r1, #4
 8002316:	430b      	orrs	r3, r1
 8002318:	6093      	str	r3, [r2, #8]
}
 800231a:	e000      	b.n	800231e <HAL_ADC_Start_DMA+0xa2>
    tmp_hal_status = HAL_BUSY;
 800231c:	2002      	movs	r0, #2
}
 800231e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LOCK(hadc);
 8002320:	2002      	movs	r0, #2
 8002322:	e7fc      	b.n	800231e <HAL_ADC_Start_DMA+0xa2>
 8002324:	7fffffe8 	.word	0x7fffffe8
 8002328:	fffff0fe 	.word	0xfffff0fe
 800232c:	08001d3d 	.word	0x08001d3d
 8002330:	08001d15 	.word	0x08001d15
 8002334:	08001d23 	.word	0x08001d23

08002338 <ADC_Disable>:
{
 8002338:	b570      	push	{r4, r5, r6, lr}
 800233a:	0004      	movs	r4, r0
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800233c:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800233e:	689a      	ldr	r2, [r3, #8]
 8002340:	2102      	movs	r1, #2
 8002342:	0008      	movs	r0, r1
 8002344:	4010      	ands	r0, r2
 8002346:	4211      	tst	r1, r2
 8002348:	d000      	beq.n	800234c <ADC_Disable+0x14>
 800234a:	2001      	movs	r0, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800234c:	689a      	ldr	r2, [r3, #8]
 800234e:	07d2      	lsls	r2, r2, #31
 8002350:	d531      	bpl.n	80023b6 <ADC_Disable+0x7e>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002352:	2800      	cmp	r0, #0
 8002354:	d131      	bne.n	80023ba <ADC_Disable+0x82>
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002356:	6899      	ldr	r1, [r3, #8]
 8002358:	2205      	movs	r2, #5
 800235a:	400a      	ands	r2, r1
 800235c:	2a01      	cmp	r2, #1
 800235e:	d009      	beq.n	8002374 <ADC_Disable+0x3c>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002360:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002362:	2210      	movs	r2, #16
 8002364:	4313      	orrs	r3, r2
 8002366:	65a3      	str	r3, [r4, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002368:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800236a:	3a0f      	subs	r2, #15
 800236c:	4313      	orrs	r3, r2
 800236e:	65e3      	str	r3, [r4, #92]	; 0x5c
      return HAL_ERROR;
 8002370:	2001      	movs	r0, #1
 8002372:	e021      	b.n	80023b8 <ADC_Disable+0x80>
  MODIFY_REG(ADCx->CR,
 8002374:	689a      	ldr	r2, [r3, #8]
 8002376:	4912      	ldr	r1, [pc, #72]	; (80023c0 <ADC_Disable+0x88>)
 8002378:	400a      	ands	r2, r1
 800237a:	2102      	movs	r1, #2
 800237c:	430a      	orrs	r2, r1
 800237e:	609a      	str	r2, [r3, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002380:	6823      	ldr	r3, [r4, #0]
 8002382:	2203      	movs	r2, #3
 8002384:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8002386:	f7ff fb7d 	bl	8001a84 <HAL_GetTick>
 800238a:	0005      	movs	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800238c:	6823      	ldr	r3, [r4, #0]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	07db      	lsls	r3, r3, #31
 8002392:	d50e      	bpl.n	80023b2 <ADC_Disable+0x7a>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002394:	f7ff fb76 	bl	8001a84 <HAL_GetTick>
 8002398:	1b40      	subs	r0, r0, r5
 800239a:	2802      	cmp	r0, #2
 800239c:	d9f6      	bls.n	800238c <ADC_Disable+0x54>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800239e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80023a0:	2210      	movs	r2, #16
 80023a2:	4313      	orrs	r3, r2
 80023a4:	65a3      	str	r3, [r4, #88]	; 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023a6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80023a8:	3a0f      	subs	r2, #15
 80023aa:	4313      	orrs	r3, r2
 80023ac:	65e3      	str	r3, [r4, #92]	; 0x5c
        return HAL_ERROR;
 80023ae:	2001      	movs	r0, #1
 80023b0:	e002      	b.n	80023b8 <ADC_Disable+0x80>
  return HAL_OK;
 80023b2:	2000      	movs	r0, #0
 80023b4:	e000      	b.n	80023b8 <ADC_Disable+0x80>
 80023b6:	2000      	movs	r0, #0
}
 80023b8:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 80023ba:	2000      	movs	r0, #0
 80023bc:	e7fc      	b.n	80023b8 <ADC_Disable+0x80>
 80023be:	46c0      	nop			; (mov r8, r8)
 80023c0:	7fffffe8 	.word	0x7fffffe8

080023c4 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 80023c4:	b530      	push	{r4, r5, lr}
 80023c6:	b083      	sub	sp, #12
 80023c8:	0004      	movs	r4, r0
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80023ca:	2300      	movs	r3, #0
 80023cc:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80023ce:	3354      	adds	r3, #84	; 0x54
 80023d0:	5cc3      	ldrb	r3, [r0, r3]
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d044      	beq.n	8002460 <HAL_ADCEx_Calibration_Start+0x9c>
 80023d6:	2501      	movs	r5, #1
 80023d8:	2354      	movs	r3, #84	; 0x54
 80023da:	54c5      	strb	r5, [r0, r3]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80023dc:	f7ff ffac 	bl	8002338 <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023e0:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80023e2:	689a      	ldr	r2, [r3, #8]
 80023e4:	4215      	tst	r5, r2
 80023e6:	d008      	beq.n	80023fa <HAL_ADCEx_Calibration_Start+0x36>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023e8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80023ea:	2210      	movs	r2, #16
 80023ec:	4313      	orrs	r3, r2
 80023ee:	65a3      	str	r3, [r4, #88]	; 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023f0:	2354      	movs	r3, #84	; 0x54
 80023f2:	2200      	movs	r2, #0
 80023f4:	54e2      	strb	r2, [r4, r3]

  /* Return function status */
  return tmp_hal_status;
}
 80023f6:	b003      	add	sp, #12
 80023f8:	bd30      	pop	{r4, r5, pc}
    ADC_STATE_CLR_SET(hadc->State,
 80023fa:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80023fc:	4919      	ldr	r1, [pc, #100]	; (8002464 <HAL_ADCEx_Calibration_Start+0xa0>)
 80023fe:	400a      	ands	r2, r1
 8002400:	3106      	adds	r1, #6
 8002402:	31ff      	adds	r1, #255	; 0xff
 8002404:	430a      	orrs	r2, r1
 8002406:	65a2      	str	r2, [r4, #88]	; 0x58
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8002408:	68d9      	ldr	r1, [r3, #12]
 800240a:	2503      	movs	r5, #3
 800240c:	4029      	ands	r1, r5
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800240e:	68da      	ldr	r2, [r3, #12]
 8002410:	43aa      	bics	r2, r5
 8002412:	60da      	str	r2, [r3, #12]
    SET_BIT(hadc->Instance->CR, ADC_CR_ADCAL);
 8002414:	6822      	ldr	r2, [r4, #0]
 8002416:	6895      	ldr	r5, [r2, #8]
 8002418:	2380      	movs	r3, #128	; 0x80
 800241a:	061b      	lsls	r3, r3, #24
 800241c:	432b      	orrs	r3, r5
 800241e:	6093      	str	r3, [r2, #8]
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002420:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002422:	689a      	ldr	r2, [r3, #8]
 8002424:	2a00      	cmp	r2, #0
 8002426:	db09      	blt.n	800243c <HAL_ADCEx_Calibration_Start+0x78>
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8002428:	68da      	ldr	r2, [r3, #12]
 800242a:	4311      	orrs	r1, r2
 800242c:	60d9      	str	r1, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 800242e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002430:	2203      	movs	r2, #3
 8002432:	4393      	bics	r3, r2
 8002434:	3a02      	subs	r2, #2
 8002436:	4313      	orrs	r3, r2
 8002438:	65a3      	str	r3, [r4, #88]	; 0x58
 800243a:	e7d9      	b.n	80023f0 <HAL_ADCEx_Calibration_Start+0x2c>
      wait_loop_index++;
 800243c:	9b01      	ldr	r3, [sp, #4]
 800243e:	3301      	adds	r3, #1
 8002440:	9301      	str	r3, [sp, #4]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002442:	9a01      	ldr	r2, [sp, #4]
 8002444:	4b08      	ldr	r3, [pc, #32]	; (8002468 <HAL_ADCEx_Calibration_Start+0xa4>)
 8002446:	429a      	cmp	r2, r3
 8002448:	d9ea      	bls.n	8002420 <HAL_ADCEx_Calibration_Start+0x5c>
        ADC_STATE_CLR_SET(hadc->State,
 800244a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800244c:	2212      	movs	r2, #18
 800244e:	4393      	bics	r3, r2
 8002450:	3a02      	subs	r2, #2
 8002452:	4313      	orrs	r3, r2
 8002454:	65a3      	str	r3, [r4, #88]	; 0x58
        __HAL_UNLOCK(hadc);
 8002456:	2354      	movs	r3, #84	; 0x54
 8002458:	2200      	movs	r2, #0
 800245a:	54e2      	strb	r2, [r4, r3]
        return HAL_ERROR;
 800245c:	2001      	movs	r0, #1
 800245e:	e7ca      	b.n	80023f6 <HAL_ADCEx_Calibration_Start+0x32>
  __HAL_LOCK(hadc);
 8002460:	2002      	movs	r0, #2
 8002462:	e7c8      	b.n	80023f6 <HAL_ADCEx_Calibration_Start+0x32>
 8002464:	fffffefd 	.word	0xfffffefd
 8002468:	0002f1ff 	.word	0x0002f1ff

0800246c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800246c:	4770      	bx	lr

0800246e <HAL_ADCEx_LevelOutOfWindow3Callback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800246e:	4770      	bx	lr

08002470 <HAL_ADCEx_EndOfSamplingCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002470:	4770      	bx	lr

08002472 <HAL_ADCEx_ChannelConfigReadyCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 8002472:	4770      	bx	lr

08002474 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002474:	b570      	push	{r4, r5, r6, lr}
  if ((int32_t)(IRQn) >= 0)
 8002476:	2800      	cmp	r0, #0
 8002478:	db11      	blt.n	800249e <HAL_NVIC_SetPriority+0x2a>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800247a:	0883      	lsrs	r3, r0, #2
 800247c:	4e13      	ldr	r6, [pc, #76]	; (80024cc <HAL_NVIC_SetPriority+0x58>)
 800247e:	33c0      	adds	r3, #192	; 0xc0
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	599d      	ldr	r5, [r3, r6]
 8002484:	2403      	movs	r4, #3
 8002486:	4020      	ands	r0, r4
 8002488:	00c0      	lsls	r0, r0, #3
 800248a:	22ff      	movs	r2, #255	; 0xff
 800248c:	0014      	movs	r4, r2
 800248e:	4084      	lsls	r4, r0
 8002490:	43a5      	bics	r5, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002492:	0189      	lsls	r1, r1, #6
 8002494:	400a      	ands	r2, r1
 8002496:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002498:	432a      	orrs	r2, r5
 800249a:	519a      	str	r2, [r3, r6]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 800249c:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800249e:	230f      	movs	r3, #15
 80024a0:	4003      	ands	r3, r0
 80024a2:	3b08      	subs	r3, #8
 80024a4:	089b      	lsrs	r3, r3, #2
 80024a6:	3306      	adds	r3, #6
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	4a09      	ldr	r2, [pc, #36]	; (80024d0 <HAL_NVIC_SetPriority+0x5c>)
 80024ac:	4694      	mov	ip, r2
 80024ae:	4463      	add	r3, ip
 80024b0:	685c      	ldr	r4, [r3, #4]
 80024b2:	2203      	movs	r2, #3
 80024b4:	4010      	ands	r0, r2
 80024b6:	00c0      	lsls	r0, r0, #3
 80024b8:	32fc      	adds	r2, #252	; 0xfc
 80024ba:	0015      	movs	r5, r2
 80024bc:	4085      	lsls	r5, r0
 80024be:	43ac      	bics	r4, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80024c0:	0189      	lsls	r1, r1, #6
 80024c2:	400a      	ands	r2, r1
 80024c4:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80024c6:	4322      	orrs	r2, r4
 80024c8:	605a      	str	r2, [r3, #4]
 80024ca:	e7e7      	b.n	800249c <HAL_NVIC_SetPriority+0x28>
 80024cc:	e000e100 	.word	0xe000e100
 80024d0:	e000ed00 	.word	0xe000ed00

080024d4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80024d4:	2800      	cmp	r0, #0
 80024d6:	db05      	blt.n	80024e4 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024d8:	231f      	movs	r3, #31
 80024da:	4018      	ands	r0, r3
 80024dc:	3b1e      	subs	r3, #30
 80024de:	4083      	lsls	r3, r0
 80024e0:	4a01      	ldr	r2, [pc, #4]	; (80024e8 <HAL_NVIC_EnableIRQ+0x14>)
 80024e2:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80024e4:	4770      	bx	lr
 80024e6:	46c0      	nop			; (mov r8, r8)
 80024e8:	e000e100 	.word	0xe000e100

080024ec <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024ec:	3801      	subs	r0, #1
 80024ee:	2380      	movs	r3, #128	; 0x80
 80024f0:	045b      	lsls	r3, r3, #17
 80024f2:	4298      	cmp	r0, r3
 80024f4:	d20f      	bcs.n	8002516 <HAL_SYSTICK_Config+0x2a>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024f6:	4a09      	ldr	r2, [pc, #36]	; (800251c <HAL_SYSTICK_Config+0x30>)
 80024f8:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80024fa:	4809      	ldr	r0, [pc, #36]	; (8002520 <HAL_SYSTICK_Config+0x34>)
 80024fc:	6a03      	ldr	r3, [r0, #32]
 80024fe:	021b      	lsls	r3, r3, #8
 8002500:	0a1b      	lsrs	r3, r3, #8
 8002502:	21c0      	movs	r1, #192	; 0xc0
 8002504:	0609      	lsls	r1, r1, #24
 8002506:	430b      	orrs	r3, r1
 8002508:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800250a:	2300      	movs	r3, #0
 800250c:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800250e:	3307      	adds	r3, #7
 8002510:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002512:	2000      	movs	r0, #0
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
 8002514:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002516:	2001      	movs	r0, #1
  return SysTick_Config(TicksNumb);
 8002518:	e7fc      	b.n	8002514 <HAL_SYSTICK_Config+0x28>
 800251a:	46c0      	nop			; (mov r8, r8)
 800251c:	e000e010 	.word	0xe000e010
 8002520:	e000ed00 	.word	0xe000ed00

08002524 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002524:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002526:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8002528:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
 800252a:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800252c:	6d04      	ldr	r4, [r0, #80]	; 0x50
 800252e:	2c00      	cmp	r4, #0
 8002530:	d002      	beq.n	8002538 <DMA_SetConfig+0x14>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002532:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8002534:	6d85      	ldr	r5, [r0, #88]	; 0x58
 8002536:	6065      	str	r5, [r4, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8002538:	4f0b      	ldr	r7, [pc, #44]	; (8002568 <DMA_SetConfig+0x44>)
 800253a:	687c      	ldr	r4, [r7, #4]
 800253c:	261c      	movs	r6, #28
 800253e:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8002540:	402e      	ands	r6, r5
 8002542:	2501      	movs	r5, #1
 8002544:	40b5      	lsls	r5, r6
 8002546:	432c      	orrs	r4, r5
 8002548:	607c      	str	r4, [r7, #4]
#endif

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800254a:	6804      	ldr	r4, [r0, #0]
 800254c:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800254e:	6883      	ldr	r3, [r0, #8]
 8002550:	2b10      	cmp	r3, #16
 8002552:	d004      	beq.n	800255e <DMA_SetConfig+0x3a>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8002554:	6803      	ldr	r3, [r0, #0]
 8002556:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8002558:	6803      	ldr	r3, [r0, #0]
 800255a:	60da      	str	r2, [r3, #12]
  }
}
 800255c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->Instance->CPAR = DstAddress;
 800255e:	6803      	ldr	r3, [r0, #0]
 8002560:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8002562:	6803      	ldr	r3, [r0, #0]
 8002564:	60d9      	str	r1, [r3, #12]
 8002566:	e7f9      	b.n	800255c <DMA_SetConfig+0x38>
 8002568:	40020000 	.word	0x40020000

0800256c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800256c:	b510      	push	{r4, lr}
 800256e:	0004      	movs	r4, r0
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002570:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002572:	089b      	lsrs	r3, r3, #2
 8002574:	4a09      	ldr	r2, [pc, #36]	; (800259c <DMA_CalcDMAMUXChannelBaseAndMask+0x30>)
 8002576:	4694      	mov	ip, r2
 8002578:	4463      	add	r3, ip
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	6443      	str	r3, [r0, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800257e:	20ff      	movs	r0, #255	; 0xff
 8002580:	6823      	ldr	r3, [r4, #0]
 8002582:	4018      	ands	r0, r3
 8002584:	3808      	subs	r0, #8
 8002586:	2114      	movs	r1, #20
 8002588:	f7fd fdcc 	bl	8000124 <__udivsi3>
#endif

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800258c:	4b04      	ldr	r3, [pc, #16]	; (80025a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x34>)
 800258e:	64a3      	str	r3, [r4, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002590:	231f      	movs	r3, #31
 8002592:	4018      	ands	r0, r3
 8002594:	3b1e      	subs	r3, #30
 8002596:	4083      	lsls	r3, r0
 8002598:	64e3      	str	r3, [r4, #76]	; 0x4c
}
 800259a:	bd10      	pop	{r4, pc}
 800259c:	10008200 	.word	0x10008200
 80025a0:	40020880 	.word	0x40020880

080025a4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80025a4:	233f      	movs	r3, #63	; 0x3f
 80025a6:	6842      	ldr	r2, [r0, #4]
 80025a8:	4013      	ands	r3, r2

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80025aa:	4a06      	ldr	r2, [pc, #24]	; (80025c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x20>)
 80025ac:	189a      	adds	r2, r3, r2
 80025ae:	0092      	lsls	r2, r2, #2
 80025b0:	6502      	str	r2, [r0, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80025b2:	4a05      	ldr	r2, [pc, #20]	; (80025c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x24>)
 80025b4:	6542      	str	r2, [r0, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80025b6:	3b01      	subs	r3, #1
 80025b8:	2203      	movs	r2, #3
 80025ba:	401a      	ands	r2, r3
 80025bc:	2301      	movs	r3, #1
 80025be:	4093      	lsls	r3, r2
 80025c0:	6583      	str	r3, [r0, #88]	; 0x58
}
 80025c2:	4770      	bx	lr
 80025c4:	1000823f 	.word	0x1000823f
 80025c8:	40020940 	.word	0x40020940

080025cc <HAL_DMA_Init>:
{
 80025cc:	b570      	push	{r4, r5, r6, lr}
 80025ce:	1e04      	subs	r4, r0, #0
  if (hdma == NULL)
 80025d0:	d04d      	beq.n	800266e <HAL_DMA_Init+0xa2>
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80025d2:	6805      	ldr	r5, [r0, #0]
 80025d4:	4b27      	ldr	r3, [pc, #156]	; (8002674 <HAL_DMA_Init+0xa8>)
 80025d6:	18e8      	adds	r0, r5, r3
 80025d8:	2114      	movs	r1, #20
 80025da:	f7fd fda3 	bl	8000124 <__udivsi3>
 80025de:	0080      	lsls	r0, r0, #2
 80025e0:	6420      	str	r0, [r4, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 80025e2:	2325      	movs	r3, #37	; 0x25
 80025e4:	2202      	movs	r2, #2
 80025e6:	54e2      	strb	r2, [r4, r3]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80025e8:	682b      	ldr	r3, [r5, #0]
 80025ea:	4a23      	ldr	r2, [pc, #140]	; (8002678 <HAL_DMA_Init+0xac>)
 80025ec:	4013      	ands	r3, r2
 80025ee:	602b      	str	r3, [r5, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80025f0:	6821      	ldr	r1, [r4, #0]
 80025f2:	680a      	ldr	r2, [r1, #0]
 80025f4:	68a3      	ldr	r3, [r4, #8]
 80025f6:	68e0      	ldr	r0, [r4, #12]
 80025f8:	4303      	orrs	r3, r0
 80025fa:	6920      	ldr	r0, [r4, #16]
 80025fc:	4303      	orrs	r3, r0
 80025fe:	6960      	ldr	r0, [r4, #20]
 8002600:	4303      	orrs	r3, r0
 8002602:	69a0      	ldr	r0, [r4, #24]
 8002604:	4303      	orrs	r3, r0
 8002606:	69e0      	ldr	r0, [r4, #28]
 8002608:	4303      	orrs	r3, r0
 800260a:	6a20      	ldr	r0, [r4, #32]
 800260c:	4303      	orrs	r3, r0
 800260e:	4313      	orrs	r3, r2
 8002610:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002612:	0020      	movs	r0, r4
 8002614:	f7ff ffaa 	bl	800256c <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002618:	2380      	movs	r3, #128	; 0x80
 800261a:	01db      	lsls	r3, r3, #7
 800261c:	68a2      	ldr	r2, [r4, #8]
 800261e:	429a      	cmp	r2, r3
 8002620:	d018      	beq.n	8002654 <HAL_DMA_Init+0x88>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002622:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8002624:	233f      	movs	r3, #63	; 0x3f
 8002626:	6861      	ldr	r1, [r4, #4]
 8002628:	400b      	ands	r3, r1
 800262a:	6013      	str	r3, [r2, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800262c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800262e:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8002630:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002632:	6863      	ldr	r3, [r4, #4]
 8002634:	3b01      	subs	r3, #1
 8002636:	2b03      	cmp	r3, #3
 8002638:	d90f      	bls.n	800265a <HAL_DMA_Init+0x8e>
    hdma->DMAmuxRequestGen = 0U;
 800263a:	2300      	movs	r3, #0
 800263c:	6523      	str	r3, [r4, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 800263e:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002640:	65a3      	str	r3, [r4, #88]	; 0x58
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002642:	2300      	movs	r3, #0
 8002644:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 8002646:	2225      	movs	r2, #37	; 0x25
 8002648:	2101      	movs	r1, #1
 800264a:	54a1      	strb	r1, [r4, r2]
  __HAL_UNLOCK(hdma);
 800264c:	3a01      	subs	r2, #1
 800264e:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 8002650:	2000      	movs	r0, #0
}
 8002652:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002654:	2300      	movs	r3, #0
 8002656:	6063      	str	r3, [r4, #4]
 8002658:	e7e3      	b.n	8002622 <HAL_DMA_Init+0x56>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800265a:	0020      	movs	r0, r4
 800265c:	f7ff ffa2 	bl	80025a4 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002660:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002662:	2200      	movs	r2, #0
 8002664:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002666:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002668:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800266a:	605a      	str	r2, [r3, #4]
 800266c:	e7e9      	b.n	8002642 <HAL_DMA_Init+0x76>
    return HAL_ERROR;
 800266e:	2001      	movs	r0, #1
 8002670:	e7ef      	b.n	8002652 <HAL_DMA_Init+0x86>
 8002672:	46c0      	nop			; (mov r8, r8)
 8002674:	bffdfff8 	.word	0xbffdfff8
 8002678:	ffff800f 	.word	0xffff800f

0800267c <HAL_DMA_Start_IT>:
{
 800267c:	b570      	push	{r4, r5, r6, lr}
 800267e:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 8002680:	2024      	movs	r0, #36	; 0x24
 8002682:	5c20      	ldrb	r0, [r4, r0]
 8002684:	2801      	cmp	r0, #1
 8002686:	d045      	beq.n	8002714 <HAL_DMA_Start_IT+0x98>
 8002688:	2024      	movs	r0, #36	; 0x24
 800268a:	2501      	movs	r5, #1
 800268c:	5425      	strb	r5, [r4, r0]
  if (hdma->State == HAL_DMA_STATE_READY)
 800268e:	3001      	adds	r0, #1
 8002690:	5c20      	ldrb	r0, [r4, r0]
 8002692:	2801      	cmp	r0, #1
 8002694:	d006      	beq.n	80026a4 <HAL_DMA_Start_IT+0x28>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002696:	2380      	movs	r3, #128	; 0x80
 8002698:	63e3      	str	r3, [r4, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 800269a:	3b5c      	subs	r3, #92	; 0x5c
 800269c:	2200      	movs	r2, #0
 800269e:	54e2      	strb	r2, [r4, r3]
    status = HAL_ERROR;
 80026a0:	2001      	movs	r0, #1
}
 80026a2:	bd70      	pop	{r4, r5, r6, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 80026a4:	3024      	adds	r0, #36	; 0x24
 80026a6:	3501      	adds	r5, #1
 80026a8:	5425      	strb	r5, [r4, r0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026aa:	2000      	movs	r0, #0
 80026ac:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 80026ae:	6825      	ldr	r5, [r4, #0]
 80026b0:	6828      	ldr	r0, [r5, #0]
 80026b2:	2601      	movs	r6, #1
 80026b4:	43b0      	bics	r0, r6
 80026b6:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80026b8:	0020      	movs	r0, r4
 80026ba:	f7ff ff33 	bl	8002524 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 80026be:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d01c      	beq.n	80026fe <HAL_DMA_Start_IT+0x82>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026c4:	6822      	ldr	r2, [r4, #0]
 80026c6:	6813      	ldr	r3, [r2, #0]
 80026c8:	210e      	movs	r1, #14
 80026ca:	430b      	orrs	r3, r1
 80026cc:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80026ce:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	03d2      	lsls	r2, r2, #15
 80026d4:	d504      	bpl.n	80026e0 <HAL_DMA_Start_IT+0x64>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80026d6:	6819      	ldr	r1, [r3, #0]
 80026d8:	2280      	movs	r2, #128	; 0x80
 80026da:	0052      	lsls	r2, r2, #1
 80026dc:	430a      	orrs	r2, r1
 80026de:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 80026e0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d004      	beq.n	80026f0 <HAL_DMA_Start_IT+0x74>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80026e6:	6819      	ldr	r1, [r3, #0]
 80026e8:	2280      	movs	r2, #128	; 0x80
 80026ea:	0052      	lsls	r2, r2, #1
 80026ec:	430a      	orrs	r2, r1
 80026ee:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 80026f0:	6822      	ldr	r2, [r4, #0]
 80026f2:	6813      	ldr	r3, [r2, #0]
 80026f4:	2101      	movs	r1, #1
 80026f6:	430b      	orrs	r3, r1
 80026f8:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026fa:	2000      	movs	r0, #0
 80026fc:	e7d1      	b.n	80026a2 <HAL_DMA_Start_IT+0x26>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80026fe:	6822      	ldr	r2, [r4, #0]
 8002700:	6813      	ldr	r3, [r2, #0]
 8002702:	2104      	movs	r1, #4
 8002704:	438b      	bics	r3, r1
 8002706:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002708:	6822      	ldr	r2, [r4, #0]
 800270a:	6813      	ldr	r3, [r2, #0]
 800270c:	3106      	adds	r1, #6
 800270e:	430b      	orrs	r3, r1
 8002710:	6013      	str	r3, [r2, #0]
 8002712:	e7dc      	b.n	80026ce <HAL_DMA_Start_IT+0x52>
  __HAL_LOCK(hdma);
 8002714:	2002      	movs	r0, #2
 8002716:	e7c4      	b.n	80026a2 <HAL_DMA_Start_IT+0x26>

08002718 <HAL_DMA_IRQHandler>:
{
 8002718:	b570      	push	{r4, r5, r6, lr}
  uint32_t flag_it = DMA1->ISR;
 800271a:	4b31      	ldr	r3, [pc, #196]	; (80027e0 <HAL_DMA_IRQHandler+0xc8>)
 800271c:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800271e:	6804      	ldr	r4, [r0, #0]
 8002720:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002722:	231c      	movs	r3, #28
 8002724:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8002726:	4013      	ands	r3, r2
 8002728:	2204      	movs	r2, #4
 800272a:	409a      	lsls	r2, r3
 800272c:	4211      	tst	r1, r2
 800272e:	d016      	beq.n	800275e <HAL_DMA_IRQHandler+0x46>
 8002730:	076a      	lsls	r2, r5, #29
 8002732:	d514      	bpl.n	800275e <HAL_DMA_IRQHandler+0x46>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002734:	6823      	ldr	r3, [r4, #0]
 8002736:	069b      	lsls	r3, r3, #26
 8002738:	d403      	bmi.n	8002742 <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800273a:	6823      	ldr	r3, [r4, #0]
 800273c:	2204      	movs	r2, #4
 800273e:	4393      	bics	r3, r2
 8002740:	6023      	str	r3, [r4, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8002742:	4c27      	ldr	r4, [pc, #156]	; (80027e0 <HAL_DMA_IRQHandler+0xc8>)
 8002744:	6863      	ldr	r3, [r4, #4]
 8002746:	211c      	movs	r1, #28
 8002748:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800274a:	4011      	ands	r1, r2
 800274c:	2204      	movs	r2, #4
 800274e:	408a      	lsls	r2, r1
 8002750:	4313      	orrs	r3, r2
 8002752:	6063      	str	r3, [r4, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 8002754:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002756:	2b00      	cmp	r3, #0
 8002758:	d000      	beq.n	800275c <HAL_DMA_IRQHandler+0x44>
        hdma->XferHalfCpltCallback(hdma);
 800275a:	4798      	blx	r3
}
 800275c:	bd70      	pop	{r4, r5, r6, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 800275e:	2202      	movs	r2, #2
 8002760:	409a      	lsls	r2, r3
 8002762:	4211      	tst	r1, r2
 8002764:	d01c      	beq.n	80027a0 <HAL_DMA_IRQHandler+0x88>
 8002766:	07aa      	lsls	r2, r5, #30
 8002768:	d51a      	bpl.n	80027a0 <HAL_DMA_IRQHandler+0x88>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800276a:	6823      	ldr	r3, [r4, #0]
 800276c:	069b      	lsls	r3, r3, #26
 800276e:	d406      	bmi.n	800277e <HAL_DMA_IRQHandler+0x66>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002770:	6823      	ldr	r3, [r4, #0]
 8002772:	220a      	movs	r2, #10
 8002774:	4393      	bics	r3, r2
 8002776:	6023      	str	r3, [r4, #0]
        hdma->State = HAL_DMA_STATE_READY;
 8002778:	2325      	movs	r3, #37	; 0x25
 800277a:	3a09      	subs	r2, #9
 800277c:	54c2      	strb	r2, [r0, r3]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800277e:	4c18      	ldr	r4, [pc, #96]	; (80027e0 <HAL_DMA_IRQHandler+0xc8>)
 8002780:	6863      	ldr	r3, [r4, #4]
 8002782:	211c      	movs	r1, #28
 8002784:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8002786:	4011      	ands	r1, r2
 8002788:	2202      	movs	r2, #2
 800278a:	408a      	lsls	r2, r1
 800278c:	4313      	orrs	r3, r2
 800278e:	6063      	str	r3, [r4, #4]
      __HAL_UNLOCK(hdma);
 8002790:	2324      	movs	r3, #36	; 0x24
 8002792:	2200      	movs	r2, #0
 8002794:	54c2      	strb	r2, [r0, r3]
      if (hdma->XferCpltCallback != NULL)
 8002796:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002798:	2b00      	cmp	r3, #0
 800279a:	d0df      	beq.n	800275c <HAL_DMA_IRQHandler+0x44>
        hdma->XferCpltCallback(hdma);
 800279c:	4798      	blx	r3
 800279e:	e7dd      	b.n	800275c <HAL_DMA_IRQHandler+0x44>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80027a0:	2208      	movs	r2, #8
 80027a2:	409a      	lsls	r2, r3
 80027a4:	4211      	tst	r1, r2
 80027a6:	d0d9      	beq.n	800275c <HAL_DMA_IRQHandler+0x44>
 80027a8:	072b      	lsls	r3, r5, #28
 80027aa:	d5d7      	bpl.n	800275c <HAL_DMA_IRQHandler+0x44>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027ac:	6823      	ldr	r3, [r4, #0]
 80027ae:	220e      	movs	r2, #14
 80027b0:	4393      	bics	r3, r2
 80027b2:	6023      	str	r3, [r4, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80027b4:	4c0a      	ldr	r4, [pc, #40]	; (80027e0 <HAL_DMA_IRQHandler+0xc8>)
 80027b6:	6862      	ldr	r2, [r4, #4]
 80027b8:	211c      	movs	r1, #28
 80027ba:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80027bc:	4019      	ands	r1, r3
 80027be:	2301      	movs	r3, #1
 80027c0:	001d      	movs	r5, r3
 80027c2:	408d      	lsls	r5, r1
 80027c4:	432a      	orrs	r2, r5
 80027c6:	6062      	str	r2, [r4, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80027c8:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 80027ca:	2225      	movs	r2, #37	; 0x25
 80027cc:	5483      	strb	r3, [r0, r2]
    __HAL_UNLOCK(hdma);
 80027ce:	3323      	adds	r3, #35	; 0x23
 80027d0:	2200      	movs	r2, #0
 80027d2:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferErrorCallback != NULL)
 80027d4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d0c0      	beq.n	800275c <HAL_DMA_IRQHandler+0x44>
      hdma->XferErrorCallback(hdma);
 80027da:	4798      	blx	r3
  return;
 80027dc:	e7be      	b.n	800275c <HAL_DMA_IRQHandler+0x44>
 80027de:	46c0      	nop			; (mov r8, r8)
 80027e0:	40020000 	.word	0x40020000

080027e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027e6:	46ce      	mov	lr, r9
 80027e8:	4647      	mov	r7, r8
 80027ea:	b580      	push	{r7, lr}
  uint32_t position = 0x00u;
 80027ec:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027ee:	e036      	b.n	800285e <HAL_GPIO_Init+0x7a>
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        temp = EXTI->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80027f0:	2603      	movs	r6, #3
 80027f2:	e000      	b.n	80027f6 <HAL_GPIO_Init+0x12>
 80027f4:	2600      	movs	r6, #0
 80027f6:	40a6      	lsls	r6, r4
 80027f8:	0034      	movs	r4, r6
 80027fa:	433c      	orrs	r4, r7
        EXTI->EXTICR[position >> 2u] = temp;
 80027fc:	4e54      	ldr	r6, [pc, #336]	; (8002950 <HAL_GPIO_Init+0x16c>)
 80027fe:	3218      	adds	r2, #24
 8002800:	0092      	lsls	r2, r2, #2
 8002802:	5194      	str	r4, [r2, r6]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002804:	2280      	movs	r2, #128	; 0x80
 8002806:	58b4      	ldr	r4, [r6, r2]
        temp &= ~(iocurrent);
 8002808:	43ea      	mvns	r2, r5
 800280a:	0026      	movs	r6, r4
 800280c:	43ae      	bics	r6, r5
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800280e:	684f      	ldr	r7, [r1, #4]
 8002810:	03ff      	lsls	r7, r7, #15
 8002812:	d501      	bpl.n	8002818 <HAL_GPIO_Init+0x34>
        {
          temp |= iocurrent;
 8002814:	432c      	orrs	r4, r5
 8002816:	0026      	movs	r6, r4
        }
        EXTI->IMR1 = temp;
 8002818:	4c4d      	ldr	r4, [pc, #308]	; (8002950 <HAL_GPIO_Init+0x16c>)
 800281a:	2780      	movs	r7, #128	; 0x80
 800281c:	51e6      	str	r6, [r4, r7]

        temp = EXTI->EMR1;
 800281e:	2684      	movs	r6, #132	; 0x84
 8002820:	59a4      	ldr	r4, [r4, r6]
        temp &= ~(iocurrent);
 8002822:	0026      	movs	r6, r4
 8002824:	4016      	ands	r6, r2
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002826:	684f      	ldr	r7, [r1, #4]
 8002828:	03bf      	lsls	r7, r7, #14
 800282a:	d501      	bpl.n	8002830 <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 800282c:	432c      	orrs	r4, r5
 800282e:	0026      	movs	r6, r4
        }
        EXTI->EMR1 = temp;
 8002830:	4c47      	ldr	r4, [pc, #284]	; (8002950 <HAL_GPIO_Init+0x16c>)
 8002832:	2784      	movs	r7, #132	; 0x84
 8002834:	51e6      	str	r6, [r4, r7]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002836:	6824      	ldr	r4, [r4, #0]
        temp &= ~(iocurrent);
 8002838:	0026      	movs	r6, r4
 800283a:	4016      	ands	r6, r2
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800283c:	684f      	ldr	r7, [r1, #4]
 800283e:	02ff      	lsls	r7, r7, #11
 8002840:	d501      	bpl.n	8002846 <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 8002842:	432c      	orrs	r4, r5
 8002844:	0026      	movs	r6, r4
        }
        EXTI->RTSR1 = temp;
 8002846:	4c42      	ldr	r4, [pc, #264]	; (8002950 <HAL_GPIO_Init+0x16c>)
 8002848:	6026      	str	r6, [r4, #0]

        temp = EXTI->FTSR1;
 800284a:	6864      	ldr	r4, [r4, #4]
        temp &= ~(iocurrent);
 800284c:	4022      	ands	r2, r4
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800284e:	684e      	ldr	r6, [r1, #4]
 8002850:	02b6      	lsls	r6, r6, #10
 8002852:	d501      	bpl.n	8002858 <HAL_GPIO_Init+0x74>
        {
          temp |= iocurrent;
 8002854:	002a      	movs	r2, r5
 8002856:	4322      	orrs	r2, r4
        }
        EXTI->FTSR1 = temp;
 8002858:	4c3d      	ldr	r4, [pc, #244]	; (8002950 <HAL_GPIO_Init+0x16c>)
 800285a:	6062      	str	r2, [r4, #4]
      }
    }

    position++;
 800285c:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800285e:	680c      	ldr	r4, [r1, #0]
 8002860:	0022      	movs	r2, r4
 8002862:	40da      	lsrs	r2, r3
 8002864:	d06f      	beq.n	8002946 <HAL_GPIO_Init+0x162>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002866:	2201      	movs	r2, #1
 8002868:	409a      	lsls	r2, r3
 800286a:	0025      	movs	r5, r4
 800286c:	4015      	ands	r5, r2
    if (iocurrent != 0x00u)
 800286e:	4214      	tst	r4, r2
 8002870:	d0f4      	beq.n	800285c <HAL_GPIO_Init+0x78>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002872:	684c      	ldr	r4, [r1, #4]
 8002874:	1e66      	subs	r6, r4, #1
 8002876:	2e01      	cmp	r6, #1
 8002878:	d903      	bls.n	8002882 <HAL_GPIO_Init+0x9e>
 800287a:	2c11      	cmp	r4, #17
 800287c:	d001      	beq.n	8002882 <HAL_GPIO_Init+0x9e>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800287e:	2c12      	cmp	r4, #18
 8002880:	d112      	bne.n	80028a8 <HAL_GPIO_Init+0xc4>
        temp = GPIOx->OSPEEDR;
 8002882:	6884      	ldr	r4, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002884:	005f      	lsls	r7, r3, #1
 8002886:	2603      	movs	r6, #3
 8002888:	40be      	lsls	r6, r7
 800288a:	43b4      	bics	r4, r6
 800288c:	0026      	movs	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 800288e:	68cc      	ldr	r4, [r1, #12]
 8002890:	40bc      	lsls	r4, r7
 8002892:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 8002894:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8002896:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002898:	4394      	bics	r4, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800289a:	684a      	ldr	r2, [r1, #4]
 800289c:	0916      	lsrs	r6, r2, #4
 800289e:	2201      	movs	r2, #1
 80028a0:	4032      	ands	r2, r6
 80028a2:	409a      	lsls	r2, r3
 80028a4:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 80028a6:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 80028a8:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80028aa:	005f      	lsls	r7, r3, #1
 80028ac:	2603      	movs	r6, #3
 80028ae:	40be      	lsls	r6, r7
 80028b0:	43f2      	mvns	r2, r6
 80028b2:	4694      	mov	ip, r2
 80028b4:	43b4      	bics	r4, r6
 80028b6:	0026      	movs	r6, r4
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80028b8:	688c      	ldr	r4, [r1, #8]
 80028ba:	40bc      	lsls	r4, r7
 80028bc:	4334      	orrs	r4, r6
      GPIOx->PUPDR = temp;
 80028be:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028c0:	684a      	ldr	r2, [r1, #4]
 80028c2:	2a02      	cmp	r2, #2
 80028c4:	d001      	beq.n	80028ca <HAL_GPIO_Init+0xe6>
 80028c6:	2a12      	cmp	r2, #18
 80028c8:	d110      	bne.n	80028ec <HAL_GPIO_Init+0x108>
        temp = GPIOx->AFR[position >> 3u];
 80028ca:	08de      	lsrs	r6, r3, #3
 80028cc:	3608      	adds	r6, #8
 80028ce:	00b2      	lsls	r2, r6, #2
 80028d0:	4691      	mov	r9, r2
 80028d2:	5814      	ldr	r4, [r2, r0]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80028d4:	2207      	movs	r2, #7
 80028d6:	401a      	ands	r2, r3
 80028d8:	0092      	lsls	r2, r2, #2
 80028da:	260f      	movs	r6, #15
 80028dc:	4096      	lsls	r6, r2
 80028de:	43b4      	bics	r4, r6
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80028e0:	690e      	ldr	r6, [r1, #16]
 80028e2:	4096      	lsls	r6, r2
 80028e4:	0032      	movs	r2, r6
 80028e6:	4322      	orrs	r2, r4
        GPIOx->AFR[position >> 3u] = temp;
 80028e8:	464c      	mov	r4, r9
 80028ea:	5022      	str	r2, [r4, r0]
      temp = GPIOx->MODER;
 80028ec:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80028ee:	4662      	mov	r2, ip
 80028f0:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80028f2:	2203      	movs	r2, #3
 80028f4:	684e      	ldr	r6, [r1, #4]
 80028f6:	4032      	ands	r2, r6
 80028f8:	40ba      	lsls	r2, r7
 80028fa:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 80028fc:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80028fe:	684a      	ldr	r2, [r1, #4]
 8002900:	00d2      	lsls	r2, r2, #3
 8002902:	d5ab      	bpl.n	800285c <HAL_GPIO_Init+0x78>
        temp = EXTI->EXTICR[position >> 2u];
 8002904:	089a      	lsrs	r2, r3, #2
 8002906:	0014      	movs	r4, r2
 8002908:	3418      	adds	r4, #24
 800290a:	00a4      	lsls	r4, r4, #2
 800290c:	4e10      	ldr	r6, [pc, #64]	; (8002950 <HAL_GPIO_Init+0x16c>)
 800290e:	59a7      	ldr	r7, [r4, r6]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002910:	2403      	movs	r4, #3
 8002912:	401c      	ands	r4, r3
 8002914:	00e4      	lsls	r4, r4, #3
 8002916:	260f      	movs	r6, #15
 8002918:	40a6      	lsls	r6, r4
 800291a:	43b7      	bics	r7, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800291c:	26a0      	movs	r6, #160	; 0xa0
 800291e:	05f6      	lsls	r6, r6, #23
 8002920:	42b0      	cmp	r0, r6
 8002922:	d100      	bne.n	8002926 <HAL_GPIO_Init+0x142>
 8002924:	e766      	b.n	80027f4 <HAL_GPIO_Init+0x10>
 8002926:	4e0b      	ldr	r6, [pc, #44]	; (8002954 <HAL_GPIO_Init+0x170>)
 8002928:	42b0      	cmp	r0, r6
 800292a:	d008      	beq.n	800293e <HAL_GPIO_Init+0x15a>
 800292c:	4e0a      	ldr	r6, [pc, #40]	; (8002958 <HAL_GPIO_Init+0x174>)
 800292e:	42b0      	cmp	r0, r6
 8002930:	d007      	beq.n	8002942 <HAL_GPIO_Init+0x15e>
 8002932:	4e0a      	ldr	r6, [pc, #40]	; (800295c <HAL_GPIO_Init+0x178>)
 8002934:	42b0      	cmp	r0, r6
 8002936:	d100      	bne.n	800293a <HAL_GPIO_Init+0x156>
 8002938:	e75a      	b.n	80027f0 <HAL_GPIO_Init+0xc>
 800293a:	2605      	movs	r6, #5
 800293c:	e75b      	b.n	80027f6 <HAL_GPIO_Init+0x12>
 800293e:	2601      	movs	r6, #1
 8002940:	e759      	b.n	80027f6 <HAL_GPIO_Init+0x12>
 8002942:	2602      	movs	r6, #2
 8002944:	e757      	b.n	80027f6 <HAL_GPIO_Init+0x12>
  }
}
 8002946:	bcc0      	pop	{r6, r7}
 8002948:	46b9      	mov	r9, r7
 800294a:	46b0      	mov	r8, r6
 800294c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800294e:	46c0      	nop			; (mov r8, r8)
 8002950:	40021800 	.word	0x40021800
 8002954:	50000400 	.word	0x50000400
 8002958:	50000800 	.word	0x50000800
 800295c:	50000c00 	.word	0x50000c00

08002960 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002960:	6903      	ldr	r3, [r0, #16]
 8002962:	420b      	tst	r3, r1
 8002964:	d001      	beq.n	800296a <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 8002966:	2001      	movs	r0, #1
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8002968:	4770      	bx	lr
    bitstatus = GPIO_PIN_RESET;
 800296a:	2000      	movs	r0, #0
 800296c:	e7fc      	b.n	8002968 <HAL_GPIO_ReadPin+0x8>

0800296e <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800296e:	2a00      	cmp	r2, #0
 8002970:	d001      	beq.n	8002976 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002972:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002974:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002976:	6281      	str	r1, [r0, #40]	; 0x28
}
 8002978:	e7fc      	b.n	8002974 <HAL_GPIO_WritePin+0x6>

0800297a <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800297a:	6942      	ldr	r2, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800297c:	0013      	movs	r3, r2
 800297e:	400b      	ands	r3, r1
 8002980:	041b      	lsls	r3, r3, #16
 8002982:	4391      	bics	r1, r2
 8002984:	4319      	orrs	r1, r3
 8002986:	6181      	str	r1, [r0, #24]
}
 8002988:	4770      	bx	lr
	...

0800298c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800298c:	b510      	push	{r4, lr}
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800298e:	4a10      	ldr	r2, [pc, #64]	; (80029d0 <HAL_PWREx_ControlVoltageScaling+0x44>)
 8002990:	6813      	ldr	r3, [r2, #0]
 8002992:	4910      	ldr	r1, [pc, #64]	; (80029d4 <HAL_PWREx_ControlVoltageScaling+0x48>)
 8002994:	400b      	ands	r3, r1
 8002996:	4303      	orrs	r3, r0
 8002998:	6013      	str	r3, [r2, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800299a:	2380      	movs	r3, #128	; 0x80
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	4298      	cmp	r0, r3
 80029a0:	d001      	beq.n	80029a6 <HAL_PWREx_ControlVoltageScaling+0x1a>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 80029a2:	2000      	movs	r0, #0
}
 80029a4:	bd10      	pop	{r4, pc}
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 80029a6:	4b0c      	ldr	r3, [pc, #48]	; (80029d8 <HAL_PWREx_ControlVoltageScaling+0x4c>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	0058      	lsls	r0, r3, #1
 80029ac:	18c0      	adds	r0, r0, r3
 80029ae:	0040      	lsls	r0, r0, #1
 80029b0:	490a      	ldr	r1, [pc, #40]	; (80029dc <HAL_PWREx_ControlVoltageScaling+0x50>)
 80029b2:	f7fd fbb7 	bl	8000124 <__udivsi3>
 80029b6:	3001      	adds	r0, #1
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80029b8:	4b05      	ldr	r3, [pc, #20]	; (80029d0 <HAL_PWREx_ControlVoltageScaling+0x44>)
 80029ba:	695b      	ldr	r3, [r3, #20]
 80029bc:	055b      	lsls	r3, r3, #21
 80029be:	d503      	bpl.n	80029c8 <HAL_PWREx_ControlVoltageScaling+0x3c>
      if(wait_loop_index != 0U)
 80029c0:	2800      	cmp	r0, #0
 80029c2:	d003      	beq.n	80029cc <HAL_PWREx_ControlVoltageScaling+0x40>
        wait_loop_index--;
 80029c4:	3801      	subs	r0, #1
 80029c6:	e7f7      	b.n	80029b8 <HAL_PWREx_ControlVoltageScaling+0x2c>
  return HAL_OK;
 80029c8:	2000      	movs	r0, #0
 80029ca:	e7eb      	b.n	80029a4 <HAL_PWREx_ControlVoltageScaling+0x18>
        return HAL_TIMEOUT;
 80029cc:	2003      	movs	r0, #3
 80029ce:	e7e9      	b.n	80029a4 <HAL_PWREx_ControlVoltageScaling+0x18>
 80029d0:	40007000 	.word	0x40007000
 80029d4:	fffff9ff 	.word	0xfffff9ff
 80029d8:	20000000 	.word	0x20000000
 80029dc:	000f4240 	.word	0x000f4240

080029e0 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 80029e0:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart;

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80029e2:	f7ff f84f 	bl	8001a84 <HAL_GetTick>
 80029e6:	0004      	movs	r4, r0

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80029e8:	4a25      	ldr	r2, [pc, #148]	; (8002a80 <HAL_RCC_DeInit+0xa0>)
 80029ea:	6811      	ldr	r1, [r2, #0]
 80029ec:	2380      	movs	r3, #128	; 0x80
 80029ee:	005b      	lsls	r3, r3, #1
 80029f0:	430b      	orrs	r3, r1
 80029f2:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029f4:	4b22      	ldr	r3, [pc, #136]	; (8002a80 <HAL_RCC_DeInit+0xa0>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	055b      	lsls	r3, r3, #21
 80029fa:	d406      	bmi.n	8002a0a <HAL_RCC_DeInit+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029fc:	f7ff f842 	bl	8001a84 <HAL_GetTick>
 8002a00:	1b00      	subs	r0, r0, r4
 8002a02:	2802      	cmp	r0, #2
 8002a04:	d9f6      	bls.n	80029f4 <HAL_RCC_DeInit+0x14>
    {
      return HAL_TIMEOUT;
 8002a06:	2003      	movs	r0, #3
  }
  else
  {
    return HAL_OK;
  }
}
 8002a08:	bd70      	pop	{r4, r5, r6, pc}
  RCC->ICSCR = RCC_ICSCR_HSITRIM_6;
 8002a0a:	4d1d      	ldr	r5, [pc, #116]	; (8002a80 <HAL_RCC_DeInit+0xa0>)
 8002a0c:	2380      	movs	r3, #128	; 0x80
 8002a0e:	01db      	lsls	r3, r3, #7
 8002a10:	606b      	str	r3, [r5, #4]
  tickstart = HAL_GetTick();
 8002a12:	f7ff f837 	bl	8001a84 <HAL_GetTick>
 8002a16:	0004      	movs	r4, r0
  RCC->CFGR = 0x00000000u;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	60ab      	str	r3, [r5, #8]
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != 0U)
 8002a1c:	4b18      	ldr	r3, [pc, #96]	; (8002a80 <HAL_RCC_DeInit+0xa0>)
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	2238      	movs	r2, #56	; 0x38
 8002a22:	421a      	tst	r2, r3
 8002a24:	d007      	beq.n	8002a36 <HAL_RCC_DeInit+0x56>
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a26:	f7ff f82d 	bl	8001a84 <HAL_GetTick>
 8002a2a:	1b00      	subs	r0, r0, r4
 8002a2c:	4b15      	ldr	r3, [pc, #84]	; (8002a84 <HAL_RCC_DeInit+0xa4>)
 8002a2e:	4298      	cmp	r0, r3
 8002a30:	d9f4      	bls.n	8002a1c <HAL_RCC_DeInit+0x3c>
      return HAL_TIMEOUT;
 8002a32:	2003      	movs	r0, #3
 8002a34:	e7e8      	b.n	8002a08 <HAL_RCC_DeInit+0x28>
  RCC->CR = RCC_CR_HSION;
 8002a36:	4b12      	ldr	r3, [pc, #72]	; (8002a80 <HAL_RCC_DeInit+0xa0>)
 8002a38:	32c8      	adds	r2, #200	; 0xc8
 8002a3a:	601a      	str	r2, [r3, #0]
  RCC->CR = RCC_CR_HSION;
 8002a3c:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8002a3e:	f7ff f821 	bl	8001a84 <HAL_GetTick>
 8002a42:	0004      	movs	r4, r0
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a44:	4b0e      	ldr	r3, [pc, #56]	; (8002a80 <HAL_RCC_DeInit+0xa0>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	019b      	lsls	r3, r3, #6
 8002a4a:	d506      	bpl.n	8002a5a <HAL_RCC_DeInit+0x7a>
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a4c:	f7ff f81a 	bl	8001a84 <HAL_GetTick>
 8002a50:	1b00      	subs	r0, r0, r4
 8002a52:	2802      	cmp	r0, #2
 8002a54:	d9f6      	bls.n	8002a44 <HAL_RCC_DeInit+0x64>
      return HAL_TIMEOUT;
 8002a56:	2003      	movs	r0, #3
 8002a58:	e7d6      	b.n	8002a08 <HAL_RCC_DeInit+0x28>
  RCC->PLLCFGR = RCC_PLLCFGR_PLLN_4;
 8002a5a:	4b09      	ldr	r3, [pc, #36]	; (8002a80 <HAL_RCC_DeInit+0xa0>)
 8002a5c:	2280      	movs	r2, #128	; 0x80
 8002a5e:	0152      	lsls	r2, r2, #5
 8002a60:	60da      	str	r2, [r3, #12]
  RCC->CIER = 0x00000000u;
 8002a62:	2200      	movs	r2, #0
 8002a64:	619a      	str	r2, [r3, #24]
  RCC->CICR = 0xFFFFFFFFu;
 8002a66:	3a01      	subs	r2, #1
 8002a68:	621a      	str	r2, [r3, #32]
  SystemCoreClock = HSI_VALUE;
 8002a6a:	4b07      	ldr	r3, [pc, #28]	; (8002a88 <HAL_RCC_DeInit+0xa8>)
 8002a6c:	4a07      	ldr	r2, [pc, #28]	; (8002a8c <HAL_RCC_DeInit+0xac>)
 8002a6e:	601a      	str	r2, [r3, #0]
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002a70:	4b07      	ldr	r3, [pc, #28]	; (8002a90 <HAL_RCC_DeInit+0xb0>)
 8002a72:	6818      	ldr	r0, [r3, #0]
 8002a74:	f7fe ffba 	bl	80019ec <HAL_InitTick>
 8002a78:	2800      	cmp	r0, #0
 8002a7a:	d0c5      	beq.n	8002a08 <HAL_RCC_DeInit+0x28>
    return HAL_ERROR;
 8002a7c:	2001      	movs	r0, #1
 8002a7e:	e7c3      	b.n	8002a08 <HAL_RCC_DeInit+0x28>
 8002a80:	40021000 	.word	0x40021000
 8002a84:	00001388 	.word	0x00001388
 8002a88:	20000000 	.word	0x20000000
 8002a8c:	00f42400 	.word	0x00f42400
 8002a90:	20000008 	.word	0x20000008

08002a94 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a94:	b570      	push	{r4, r5, r6, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	1e04      	subs	r4, r0, #0
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a9a:	d100      	bne.n	8002a9e <HAL_RCC_OscConfig+0xa>
 8002a9c:	e22c      	b.n	8002ef8 <HAL_RCC_OscConfig+0x464>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a9e:	6803      	ldr	r3, [r0, #0]
 8002aa0:	07db      	lsls	r3, r3, #31
 8002aa2:	d539      	bpl.n	8002b18 <HAL_RCC_OscConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002aa4:	4ac1      	ldr	r2, [pc, #772]	; (8002dac <HAL_RCC_OscConfig+0x318>)
 8002aa6:	6891      	ldr	r1, [r2, #8]
 8002aa8:	2338      	movs	r3, #56	; 0x38
 8002aaa:	400b      	ands	r3, r1
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002aac:	68d1      	ldr	r1, [r2, #12]
 8002aae:	2203      	movs	r2, #3
 8002ab0:	400a      	ands	r2, r1

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002ab2:	2b10      	cmp	r3, #16
 8002ab4:	d026      	beq.n	8002b04 <HAL_RCC_OscConfig+0x70>
 8002ab6:	2b08      	cmp	r3, #8
 8002ab8:	d026      	beq.n	8002b08 <HAL_RCC_OscConfig+0x74>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002aba:	6863      	ldr	r3, [r4, #4]
 8002abc:	2280      	movs	r2, #128	; 0x80
 8002abe:	0252      	lsls	r2, r2, #9
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d07f      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x130>
 8002ac4:	22a0      	movs	r2, #160	; 0xa0
 8002ac6:	02d2      	lsls	r2, r2, #11
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d100      	bne.n	8002ace <HAL_RCC_OscConfig+0x3a>
 8002acc:	e081      	b.n	8002bd2 <HAL_RCC_OscConfig+0x13e>
 8002ace:	4bb7      	ldr	r3, [pc, #732]	; (8002dac <HAL_RCC_OscConfig+0x318>)
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	49b7      	ldr	r1, [pc, #732]	; (8002db0 <HAL_RCC_OscConfig+0x31c>)
 8002ad4:	400a      	ands	r2, r1
 8002ad6:	601a      	str	r2, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	49b6      	ldr	r1, [pc, #728]	; (8002db4 <HAL_RCC_OscConfig+0x320>)
 8002adc:	400a      	ands	r2, r1
 8002ade:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ae0:	6863      	ldr	r3, [r4, #4]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d100      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x54>
 8002ae6:	e080      	b.n	8002bea <HAL_RCC_OscConfig+0x156>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae8:	f7fe ffcc 	bl	8001a84 <HAL_GetTick>
 8002aec:	0005      	movs	r5, r0

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002aee:	4baf      	ldr	r3, [pc, #700]	; (8002dac <HAL_RCC_OscConfig+0x318>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	039b      	lsls	r3, r3, #14
 8002af4:	d410      	bmi.n	8002b18 <HAL_RCC_OscConfig+0x84>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002af6:	f7fe ffc5 	bl	8001a84 <HAL_GetTick>
 8002afa:	1b40      	subs	r0, r0, r5
 8002afc:	2864      	cmp	r0, #100	; 0x64
 8002afe:	d9f6      	bls.n	8002aee <HAL_RCC_OscConfig+0x5a>
          {
            return HAL_TIMEOUT;
 8002b00:	2003      	movs	r0, #3
 8002b02:	e1fa      	b.n	8002efa <HAL_RCC_OscConfig+0x466>
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002b04:	2a03      	cmp	r2, #3
 8002b06:	d1d6      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x22>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b08:	4ba8      	ldr	r3, [pc, #672]	; (8002dac <HAL_RCC_OscConfig+0x318>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	039b      	lsls	r3, r3, #14
 8002b0e:	d503      	bpl.n	8002b18 <HAL_RCC_OscConfig+0x84>
 8002b10:	6863      	ldr	r3, [r4, #4]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d100      	bne.n	8002b18 <HAL_RCC_OscConfig+0x84>
 8002b16:	e1f2      	b.n	8002efe <HAL_RCC_OscConfig+0x46a>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b18:	6823      	ldr	r3, [r4, #0]
 8002b1a:	079b      	lsls	r3, r3, #30
 8002b1c:	d531      	bpl.n	8002b82 <HAL_RCC_OscConfig+0xee>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b1e:	4aa3      	ldr	r2, [pc, #652]	; (8002dac <HAL_RCC_OscConfig+0x318>)
 8002b20:	6893      	ldr	r3, [r2, #8]
 8002b22:	2138      	movs	r1, #56	; 0x38
 8002b24:	400b      	ands	r3, r1
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b26:	68d1      	ldr	r1, [r2, #12]
 8002b28:	2203      	movs	r2, #3
 8002b2a:	400a      	ands	r2, r1
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002b2c:	2b10      	cmp	r3, #16
 8002b2e:	d06a      	beq.n	8002c06 <HAL_RCC_OscConfig+0x172>
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d16b      	bne.n	8002c0c <HAL_RCC_OscConfig+0x178>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b34:	4a9d      	ldr	r2, [pc, #628]	; (8002dac <HAL_RCC_OscConfig+0x318>)
 8002b36:	6812      	ldr	r2, [r2, #0]
 8002b38:	0552      	lsls	r2, r2, #21
 8002b3a:	d503      	bpl.n	8002b44 <HAL_RCC_OscConfig+0xb0>
 8002b3c:	68e2      	ldr	r2, [r4, #12]
 8002b3e:	2a00      	cmp	r2, #0
 8002b40:	d100      	bne.n	8002b44 <HAL_RCC_OscConfig+0xb0>
 8002b42:	e1de      	b.n	8002f02 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b44:	4899      	ldr	r0, [pc, #612]	; (8002dac <HAL_RCC_OscConfig+0x318>)
 8002b46:	6842      	ldr	r2, [r0, #4]
 8002b48:	499b      	ldr	r1, [pc, #620]	; (8002db8 <HAL_RCC_OscConfig+0x324>)
 8002b4a:	400a      	ands	r2, r1
 8002b4c:	6961      	ldr	r1, [r4, #20]
 8002b4e:	0209      	lsls	r1, r1, #8
 8002b50:	430a      	orrs	r2, r1
 8002b52:	6042      	str	r2, [r0, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d10d      	bne.n	8002b74 <HAL_RCC_OscConfig+0xe0>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002b58:	6803      	ldr	r3, [r0, #0]
 8002b5a:	4998      	ldr	r1, [pc, #608]	; (8002dbc <HAL_RCC_OscConfig+0x328>)
 8002b5c:	400b      	ands	r3, r1
 8002b5e:	6921      	ldr	r1, [r4, #16]
 8002b60:	430b      	orrs	r3, r1
 8002b62:	6003      	str	r3, [r0, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002b64:	6803      	ldr	r3, [r0, #0]
 8002b66:	0adb      	lsrs	r3, r3, #11
 8002b68:	2207      	movs	r2, #7
 8002b6a:	401a      	ands	r2, r3
 8002b6c:	4b94      	ldr	r3, [pc, #592]	; (8002dc0 <HAL_RCC_OscConfig+0x32c>)
 8002b6e:	40d3      	lsrs	r3, r2
 8002b70:	4a94      	ldr	r2, [pc, #592]	; (8002dc4 <HAL_RCC_OscConfig+0x330>)
 8002b72:	6013      	str	r3, [r2, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002b74:	4b94      	ldr	r3, [pc, #592]	; (8002dc8 <HAL_RCC_OscConfig+0x334>)
 8002b76:	6818      	ldr	r0, [r3, #0]
 8002b78:	f7fe ff38 	bl	80019ec <HAL_InitTick>
 8002b7c:	2800      	cmp	r0, #0
 8002b7e:	d000      	beq.n	8002b82 <HAL_RCC_OscConfig+0xee>
 8002b80:	e1c1      	b.n	8002f06 <HAL_RCC_OscConfig+0x472>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b82:	6823      	ldr	r3, [r4, #0]
 8002b84:	071b      	lsls	r3, r3, #28
 8002b86:	d400      	bmi.n	8002b8a <HAL_RCC_OscConfig+0xf6>
 8002b88:	e081      	b.n	8002c8e <HAL_RCC_OscConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002b8a:	4b88      	ldr	r3, [pc, #544]	; (8002dac <HAL_RCC_OscConfig+0x318>)
 8002b8c:	689a      	ldr	r2, [r3, #8]
 8002b8e:	2338      	movs	r3, #56	; 0x38
 8002b90:	4013      	ands	r3, r2
 8002b92:	2b18      	cmp	r3, #24
 8002b94:	d073      	beq.n	8002c7e <HAL_RCC_OscConfig+0x1ea>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b96:	69a3      	ldr	r3, [r4, #24]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d100      	bne.n	8002b9e <HAL_RCC_OscConfig+0x10a>
 8002b9c:	e0b4      	b.n	8002d08 <HAL_RCC_OscConfig+0x274>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002b9e:	4a83      	ldr	r2, [pc, #524]	; (8002dac <HAL_RCC_OscConfig+0x318>)
 8002ba0:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8002ba2:	2101      	movs	r1, #1
 8002ba4:	430b      	orrs	r3, r1
 8002ba6:	6613      	str	r3, [r2, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba8:	f7fe ff6c 	bl	8001a84 <HAL_GetTick>
 8002bac:	0005      	movs	r5, r0

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002bae:	4b7f      	ldr	r3, [pc, #508]	; (8002dac <HAL_RCC_OscConfig+0x318>)
 8002bb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bb2:	079b      	lsls	r3, r3, #30
 8002bb4:	d46b      	bmi.n	8002c8e <HAL_RCC_OscConfig+0x1fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bb6:	f7fe ff65 	bl	8001a84 <HAL_GetTick>
 8002bba:	1b40      	subs	r0, r0, r5
 8002bbc:	2802      	cmp	r0, #2
 8002bbe:	d9f6      	bls.n	8002bae <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8002bc0:	2003      	movs	r0, #3
 8002bc2:	e19a      	b.n	8002efa <HAL_RCC_OscConfig+0x466>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bc4:	4a79      	ldr	r2, [pc, #484]	; (8002dac <HAL_RCC_OscConfig+0x318>)
 8002bc6:	6811      	ldr	r1, [r2, #0]
 8002bc8:	2380      	movs	r3, #128	; 0x80
 8002bca:	025b      	lsls	r3, r3, #9
 8002bcc:	430b      	orrs	r3, r1
 8002bce:	6013      	str	r3, [r2, #0]
 8002bd0:	e786      	b.n	8002ae0 <HAL_RCC_OscConfig+0x4c>
 8002bd2:	4b76      	ldr	r3, [pc, #472]	; (8002dac <HAL_RCC_OscConfig+0x318>)
 8002bd4:	6819      	ldr	r1, [r3, #0]
 8002bd6:	2280      	movs	r2, #128	; 0x80
 8002bd8:	02d2      	lsls	r2, r2, #11
 8002bda:	430a      	orrs	r2, r1
 8002bdc:	601a      	str	r2, [r3, #0]
 8002bde:	6819      	ldr	r1, [r3, #0]
 8002be0:	2280      	movs	r2, #128	; 0x80
 8002be2:	0252      	lsls	r2, r2, #9
 8002be4:	430a      	orrs	r2, r1
 8002be6:	601a      	str	r2, [r3, #0]
 8002be8:	e77a      	b.n	8002ae0 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8002bea:	f7fe ff4b 	bl	8001a84 <HAL_GetTick>
 8002bee:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002bf0:	4b6e      	ldr	r3, [pc, #440]	; (8002dac <HAL_RCC_OscConfig+0x318>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	039b      	lsls	r3, r3, #14
 8002bf6:	d58f      	bpl.n	8002b18 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bf8:	f7fe ff44 	bl	8001a84 <HAL_GetTick>
 8002bfc:	1b40      	subs	r0, r0, r5
 8002bfe:	2864      	cmp	r0, #100	; 0x64
 8002c00:	d9f6      	bls.n	8002bf0 <HAL_RCC_OscConfig+0x15c>
            return HAL_TIMEOUT;
 8002c02:	2003      	movs	r0, #3
 8002c04:	e179      	b.n	8002efa <HAL_RCC_OscConfig+0x466>
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002c06:	2a02      	cmp	r2, #2
 8002c08:	d192      	bne.n	8002b30 <HAL_RCC_OscConfig+0x9c>
 8002c0a:	e793      	b.n	8002b34 <HAL_RCC_OscConfig+0xa0>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c0c:	68e3      	ldr	r3, [r4, #12]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d022      	beq.n	8002c58 <HAL_RCC_OscConfig+0x1c4>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002c12:	4a66      	ldr	r2, [pc, #408]	; (8002dac <HAL_RCC_OscConfig+0x318>)
 8002c14:	6813      	ldr	r3, [r2, #0]
 8002c16:	4969      	ldr	r1, [pc, #420]	; (8002dbc <HAL_RCC_OscConfig+0x328>)
 8002c18:	400b      	ands	r3, r1
 8002c1a:	6921      	ldr	r1, [r4, #16]
 8002c1c:	430b      	orrs	r3, r1
 8002c1e:	6013      	str	r3, [r2, #0]
        __HAL_RCC_HSI_ENABLE();
 8002c20:	6811      	ldr	r1, [r2, #0]
 8002c22:	2380      	movs	r3, #128	; 0x80
 8002c24:	005b      	lsls	r3, r3, #1
 8002c26:	430b      	orrs	r3, r1
 8002c28:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002c2a:	f7fe ff2b 	bl	8001a84 <HAL_GetTick>
 8002c2e:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c30:	4b5e      	ldr	r3, [pc, #376]	; (8002dac <HAL_RCC_OscConfig+0x318>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	055b      	lsls	r3, r3, #21
 8002c36:	d406      	bmi.n	8002c46 <HAL_RCC_OscConfig+0x1b2>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c38:	f7fe ff24 	bl	8001a84 <HAL_GetTick>
 8002c3c:	1b40      	subs	r0, r0, r5
 8002c3e:	2802      	cmp	r0, #2
 8002c40:	d9f6      	bls.n	8002c30 <HAL_RCC_OscConfig+0x19c>
            return HAL_TIMEOUT;
 8002c42:	2003      	movs	r0, #3
 8002c44:	e159      	b.n	8002efa <HAL_RCC_OscConfig+0x466>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c46:	4959      	ldr	r1, [pc, #356]	; (8002dac <HAL_RCC_OscConfig+0x318>)
 8002c48:	684b      	ldr	r3, [r1, #4]
 8002c4a:	4a5b      	ldr	r2, [pc, #364]	; (8002db8 <HAL_RCC_OscConfig+0x324>)
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	6962      	ldr	r2, [r4, #20]
 8002c50:	0212      	lsls	r2, r2, #8
 8002c52:	4313      	orrs	r3, r2
 8002c54:	604b      	str	r3, [r1, #4]
 8002c56:	e794      	b.n	8002b82 <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_HSI_DISABLE();
 8002c58:	4a54      	ldr	r2, [pc, #336]	; (8002dac <HAL_RCC_OscConfig+0x318>)
 8002c5a:	6813      	ldr	r3, [r2, #0]
 8002c5c:	495b      	ldr	r1, [pc, #364]	; (8002dcc <HAL_RCC_OscConfig+0x338>)
 8002c5e:	400b      	ands	r3, r1
 8002c60:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002c62:	f7fe ff0f 	bl	8001a84 <HAL_GetTick>
 8002c66:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c68:	4b50      	ldr	r3, [pc, #320]	; (8002dac <HAL_RCC_OscConfig+0x318>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	055b      	lsls	r3, r3, #21
 8002c6e:	d588      	bpl.n	8002b82 <HAL_RCC_OscConfig+0xee>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c70:	f7fe ff08 	bl	8001a84 <HAL_GetTick>
 8002c74:	1b40      	subs	r0, r0, r5
 8002c76:	2802      	cmp	r0, #2
 8002c78:	d9f6      	bls.n	8002c68 <HAL_RCC_OscConfig+0x1d4>
            return HAL_TIMEOUT;
 8002c7a:	2003      	movs	r0, #3
 8002c7c:	e13d      	b.n	8002efa <HAL_RCC_OscConfig+0x466>
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002c7e:	4b4b      	ldr	r3, [pc, #300]	; (8002dac <HAL_RCC_OscConfig+0x318>)
 8002c80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c82:	079b      	lsls	r3, r3, #30
 8002c84:	d503      	bpl.n	8002c8e <HAL_RCC_OscConfig+0x1fa>
 8002c86:	69a3      	ldr	r3, [r4, #24]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d100      	bne.n	8002c8e <HAL_RCC_OscConfig+0x1fa>
 8002c8c:	e13d      	b.n	8002f0a <HAL_RCC_OscConfig+0x476>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c8e:	6823      	ldr	r3, [r4, #0]
 8002c90:	075b      	lsls	r3, r3, #29
 8002c92:	d400      	bmi.n	8002c96 <HAL_RCC_OscConfig+0x202>
 8002c94:	e0a2      	b.n	8002ddc <HAL_RCC_OscConfig+0x348>

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002c96:	4b45      	ldr	r3, [pc, #276]	; (8002dac <HAL_RCC_OscConfig+0x318>)
 8002c98:	689a      	ldr	r2, [r3, #8]
 8002c9a:	2338      	movs	r3, #56	; 0x38
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	2b20      	cmp	r3, #32
 8002ca0:	d045      	beq.n	8002d2e <HAL_RCC_OscConfig+0x29a>
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002ca2:	4b42      	ldr	r3, [pc, #264]	; (8002dac <HAL_RCC_OscConfig+0x318>)
 8002ca4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ca6:	00db      	lsls	r3, r3, #3
 8002ca8:	d44a      	bmi.n	8002d40 <HAL_RCC_OscConfig+0x2ac>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002caa:	4a40      	ldr	r2, [pc, #256]	; (8002dac <HAL_RCC_OscConfig+0x318>)
 8002cac:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002cae:	2080      	movs	r0, #128	; 0x80
 8002cb0:	0540      	lsls	r0, r0, #21
 8002cb2:	4301      	orrs	r1, r0
 8002cb4:	63d1      	str	r1, [r2, #60]	; 0x3c
 8002cb6:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8002cb8:	4003      	ands	r3, r0
 8002cba:	9301      	str	r3, [sp, #4]
 8002cbc:	9b01      	ldr	r3, [sp, #4]
        pwrclkchanged = SET;
 8002cbe:	2501      	movs	r5, #1
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cc0:	4b43      	ldr	r3, [pc, #268]	; (8002dd0 <HAL_RCC_OscConfig+0x33c>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	05db      	lsls	r3, r3, #23
 8002cc6:	d53d      	bpl.n	8002d44 <HAL_RCC_OscConfig+0x2b0>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cc8:	68a3      	ldr	r3, [r4, #8]
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d04e      	beq.n	8002d6c <HAL_RCC_OscConfig+0x2d8>
 8002cce:	2b05      	cmp	r3, #5
 8002cd0:	d052      	beq.n	8002d78 <HAL_RCC_OscConfig+0x2e4>
 8002cd2:	4b36      	ldr	r3, [pc, #216]	; (8002dac <HAL_RCC_OscConfig+0x318>)
 8002cd4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002cd6:	2101      	movs	r1, #1
 8002cd8:	438a      	bics	r2, r1
 8002cda:	65da      	str	r2, [r3, #92]	; 0x5c
 8002cdc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002cde:	3103      	adds	r1, #3
 8002ce0:	438a      	bics	r2, r1
 8002ce2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ce4:	68a3      	ldr	r3, [r4, #8]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d050      	beq.n	8002d8c <HAL_RCC_OscConfig+0x2f8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cea:	f7fe fecb 	bl	8001a84 <HAL_GetTick>
 8002cee:	0006      	movs	r6, r0

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cf0:	4b2e      	ldr	r3, [pc, #184]	; (8002dac <HAL_RCC_OscConfig+0x318>)
 8002cf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cf4:	079b      	lsls	r3, r3, #30
 8002cf6:	d46f      	bmi.n	8002dd8 <HAL_RCC_OscConfig+0x344>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cf8:	f7fe fec4 	bl	8001a84 <HAL_GetTick>
 8002cfc:	1b80      	subs	r0, r0, r6
 8002cfe:	4b35      	ldr	r3, [pc, #212]	; (8002dd4 <HAL_RCC_OscConfig+0x340>)
 8002d00:	4298      	cmp	r0, r3
 8002d02:	d9f5      	bls.n	8002cf0 <HAL_RCC_OscConfig+0x25c>
          {
            return HAL_TIMEOUT;
 8002d04:	2003      	movs	r0, #3
 8002d06:	e0f8      	b.n	8002efa <HAL_RCC_OscConfig+0x466>
        __HAL_RCC_LSI_DISABLE();
 8002d08:	4a28      	ldr	r2, [pc, #160]	; (8002dac <HAL_RCC_OscConfig+0x318>)
 8002d0a:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8002d0c:	2101      	movs	r1, #1
 8002d0e:	438b      	bics	r3, r1
 8002d10:	6613      	str	r3, [r2, #96]	; 0x60
        tickstart = HAL_GetTick();
 8002d12:	f7fe feb7 	bl	8001a84 <HAL_GetTick>
 8002d16:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d18:	4b24      	ldr	r3, [pc, #144]	; (8002dac <HAL_RCC_OscConfig+0x318>)
 8002d1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d1c:	079b      	lsls	r3, r3, #30
 8002d1e:	d5b6      	bpl.n	8002c8e <HAL_RCC_OscConfig+0x1fa>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d20:	f7fe feb0 	bl	8001a84 <HAL_GetTick>
 8002d24:	1b40      	subs	r0, r0, r5
 8002d26:	2802      	cmp	r0, #2
 8002d28:	d9f6      	bls.n	8002d18 <HAL_RCC_OscConfig+0x284>
            return HAL_TIMEOUT;
 8002d2a:	2003      	movs	r0, #3
 8002d2c:	e0e5      	b.n	8002efa <HAL_RCC_OscConfig+0x466>
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002d2e:	4b1f      	ldr	r3, [pc, #124]	; (8002dac <HAL_RCC_OscConfig+0x318>)
 8002d30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d32:	079b      	lsls	r3, r3, #30
 8002d34:	d552      	bpl.n	8002ddc <HAL_RCC_OscConfig+0x348>
 8002d36:	68a3      	ldr	r3, [r4, #8]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d14f      	bne.n	8002ddc <HAL_RCC_OscConfig+0x348>
        return HAL_ERROR;
 8002d3c:	2001      	movs	r0, #1
 8002d3e:	e0dc      	b.n	8002efa <HAL_RCC_OscConfig+0x466>
    FlagStatus       pwrclkchanged = RESET;
 8002d40:	2500      	movs	r5, #0
 8002d42:	e7bd      	b.n	8002cc0 <HAL_RCC_OscConfig+0x22c>
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d44:	4a22      	ldr	r2, [pc, #136]	; (8002dd0 <HAL_RCC_OscConfig+0x33c>)
 8002d46:	6811      	ldr	r1, [r2, #0]
 8002d48:	2380      	movs	r3, #128	; 0x80
 8002d4a:	005b      	lsls	r3, r3, #1
 8002d4c:	430b      	orrs	r3, r1
 8002d4e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002d50:	f7fe fe98 	bl	8001a84 <HAL_GetTick>
 8002d54:	0006      	movs	r6, r0
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d56:	4b1e      	ldr	r3, [pc, #120]	; (8002dd0 <HAL_RCC_OscConfig+0x33c>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	05db      	lsls	r3, r3, #23
 8002d5c:	d4b4      	bmi.n	8002cc8 <HAL_RCC_OscConfig+0x234>
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d5e:	f7fe fe91 	bl	8001a84 <HAL_GetTick>
 8002d62:	1b80      	subs	r0, r0, r6
 8002d64:	2802      	cmp	r0, #2
 8002d66:	d9f6      	bls.n	8002d56 <HAL_RCC_OscConfig+0x2c2>
            return HAL_TIMEOUT;
 8002d68:	2003      	movs	r0, #3
 8002d6a:	e0c6      	b.n	8002efa <HAL_RCC_OscConfig+0x466>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d6c:	4a0f      	ldr	r2, [pc, #60]	; (8002dac <HAL_RCC_OscConfig+0x318>)
 8002d6e:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 8002d70:	2101      	movs	r1, #1
 8002d72:	430b      	orrs	r3, r1
 8002d74:	65d3      	str	r3, [r2, #92]	; 0x5c
 8002d76:	e7b5      	b.n	8002ce4 <HAL_RCC_OscConfig+0x250>
 8002d78:	4b0c      	ldr	r3, [pc, #48]	; (8002dac <HAL_RCC_OscConfig+0x318>)
 8002d7a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002d7c:	2104      	movs	r1, #4
 8002d7e:	430a      	orrs	r2, r1
 8002d80:	65da      	str	r2, [r3, #92]	; 0x5c
 8002d82:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002d84:	3903      	subs	r1, #3
 8002d86:	430a      	orrs	r2, r1
 8002d88:	65da      	str	r2, [r3, #92]	; 0x5c
 8002d8a:	e7ab      	b.n	8002ce4 <HAL_RCC_OscConfig+0x250>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d8c:	f7fe fe7a 	bl	8001a84 <HAL_GetTick>
 8002d90:	0006      	movs	r6, r0

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d92:	4b06      	ldr	r3, [pc, #24]	; (8002dac <HAL_RCC_OscConfig+0x318>)
 8002d94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d96:	079b      	lsls	r3, r3, #30
 8002d98:	d51e      	bpl.n	8002dd8 <HAL_RCC_OscConfig+0x344>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d9a:	f7fe fe73 	bl	8001a84 <HAL_GetTick>
 8002d9e:	1b80      	subs	r0, r0, r6
 8002da0:	4b0c      	ldr	r3, [pc, #48]	; (8002dd4 <HAL_RCC_OscConfig+0x340>)
 8002da2:	4298      	cmp	r0, r3
 8002da4:	d9f5      	bls.n	8002d92 <HAL_RCC_OscConfig+0x2fe>
          {
            return HAL_TIMEOUT;
 8002da6:	2003      	movs	r0, #3
 8002da8:	e0a7      	b.n	8002efa <HAL_RCC_OscConfig+0x466>
 8002daa:	46c0      	nop			; (mov r8, r8)
 8002dac:	40021000 	.word	0x40021000
 8002db0:	fffeffff 	.word	0xfffeffff
 8002db4:	fffbffff 	.word	0xfffbffff
 8002db8:	ffff80ff 	.word	0xffff80ff
 8002dbc:	ffffc7ff 	.word	0xffffc7ff
 8002dc0:	00f42400 	.word	0x00f42400
 8002dc4:	20000000 	.word	0x20000000
 8002dc8:	20000008 	.word	0x20000008
 8002dcc:	fffffeff 	.word	0xfffffeff
 8002dd0:	40007000 	.word	0x40007000
 8002dd4:	00001388 	.word	0x00001388
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002dd8:	2d01      	cmp	r5, #1
 8002dda:	d026      	beq.n	8002e2a <HAL_RCC_OscConfig+0x396>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002ddc:	69e3      	ldr	r3, [r4, #28]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d100      	bne.n	8002de4 <HAL_RCC_OscConfig+0x350>
 8002de2:	e094      	b.n	8002f0e <HAL_RCC_OscConfig+0x47a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002de4:	4a51      	ldr	r2, [pc, #324]	; (8002f2c <HAL_RCC_OscConfig+0x498>)
 8002de6:	6891      	ldr	r1, [r2, #8]
 8002de8:	2238      	movs	r2, #56	; 0x38
 8002dea:	400a      	ands	r2, r1
 8002dec:	2a10      	cmp	r2, #16
 8002dee:	d061      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x420>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d020      	beq.n	8002e36 <HAL_RCC_OscConfig+0x3a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002df4:	4b4d      	ldr	r3, [pc, #308]	; (8002f2c <HAL_RCC_OscConfig+0x498>)
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	494d      	ldr	r1, [pc, #308]	; (8002f30 <HAL_RCC_OscConfig+0x49c>)
 8002dfa:	400a      	ands	r2, r1
 8002dfc:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8002dfe:	68da      	ldr	r2, [r3, #12]
 8002e00:	2103      	movs	r1, #3
 8002e02:	438a      	bics	r2, r1
 8002e04:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8002e06:	68da      	ldr	r2, [r3, #12]
 8002e08:	494a      	ldr	r1, [pc, #296]	; (8002f34 <HAL_RCC_OscConfig+0x4a0>)
 8002e0a:	400a      	ands	r2, r1
 8002e0c:	60da      	str	r2, [r3, #12]
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e0e:	f7fe fe39 	bl	8001a84 <HAL_GetTick>
 8002e12:	0004      	movs	r4, r0

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e14:	4b45      	ldr	r3, [pc, #276]	; (8002f2c <HAL_RCC_OscConfig+0x498>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	019b      	lsls	r3, r3, #6
 8002e1a:	d549      	bpl.n	8002eb0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e1c:	f7fe fe32 	bl	8001a84 <HAL_GetTick>
 8002e20:	1b00      	subs	r0, r0, r4
 8002e22:	2802      	cmp	r0, #2
 8002e24:	d9f6      	bls.n	8002e14 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8002e26:	2003      	movs	r0, #3
 8002e28:	e067      	b.n	8002efa <HAL_RCC_OscConfig+0x466>
        __HAL_RCC_PWR_CLK_DISABLE();
 8002e2a:	4a40      	ldr	r2, [pc, #256]	; (8002f2c <HAL_RCC_OscConfig+0x498>)
 8002e2c:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8002e2e:	4942      	ldr	r1, [pc, #264]	; (8002f38 <HAL_RCC_OscConfig+0x4a4>)
 8002e30:	400b      	ands	r3, r1
 8002e32:	63d3      	str	r3, [r2, #60]	; 0x3c
 8002e34:	e7d2      	b.n	8002ddc <HAL_RCC_OscConfig+0x348>
        __HAL_RCC_PLL_DISABLE();
 8002e36:	4a3d      	ldr	r2, [pc, #244]	; (8002f2c <HAL_RCC_OscConfig+0x498>)
 8002e38:	6813      	ldr	r3, [r2, #0]
 8002e3a:	493d      	ldr	r1, [pc, #244]	; (8002f30 <HAL_RCC_OscConfig+0x49c>)
 8002e3c:	400b      	ands	r3, r1
 8002e3e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002e40:	f7fe fe20 	bl	8001a84 <HAL_GetTick>
 8002e44:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e46:	4b39      	ldr	r3, [pc, #228]	; (8002f2c <HAL_RCC_OscConfig+0x498>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	019b      	lsls	r3, r3, #6
 8002e4c:	d506      	bpl.n	8002e5c <HAL_RCC_OscConfig+0x3c8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e4e:	f7fe fe19 	bl	8001a84 <HAL_GetTick>
 8002e52:	1b40      	subs	r0, r0, r5
 8002e54:	2802      	cmp	r0, #2
 8002e56:	d9f6      	bls.n	8002e46 <HAL_RCC_OscConfig+0x3b2>
            return HAL_TIMEOUT;
 8002e58:	2003      	movs	r0, #3
 8002e5a:	e04e      	b.n	8002efa <HAL_RCC_OscConfig+0x466>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e5c:	4a33      	ldr	r2, [pc, #204]	; (8002f2c <HAL_RCC_OscConfig+0x498>)
 8002e5e:	68d3      	ldr	r3, [r2, #12]
 8002e60:	4936      	ldr	r1, [pc, #216]	; (8002f3c <HAL_RCC_OscConfig+0x4a8>)
 8002e62:	4019      	ands	r1, r3
 8002e64:	6a23      	ldr	r3, [r4, #32]
 8002e66:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002e68:	4303      	orrs	r3, r0
 8002e6a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002e6c:	0200      	lsls	r0, r0, #8
 8002e6e:	4303      	orrs	r3, r0
 8002e70:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8002e72:	4303      	orrs	r3, r0
 8002e74:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002e76:	4303      	orrs	r3, r0
 8002e78:	430b      	orrs	r3, r1
 8002e7a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLL_ENABLE();
 8002e7c:	6811      	ldr	r1, [r2, #0]
 8002e7e:	2380      	movs	r3, #128	; 0x80
 8002e80:	045b      	lsls	r3, r3, #17
 8002e82:	430b      	orrs	r3, r1
 8002e84:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002e86:	68d1      	ldr	r1, [r2, #12]
 8002e88:	2380      	movs	r3, #128	; 0x80
 8002e8a:	055b      	lsls	r3, r3, #21
 8002e8c:	430b      	orrs	r3, r1
 8002e8e:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8002e90:	f7fe fdf8 	bl	8001a84 <HAL_GetTick>
 8002e94:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e96:	4b25      	ldr	r3, [pc, #148]	; (8002f2c <HAL_RCC_OscConfig+0x498>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	019b      	lsls	r3, r3, #6
 8002e9c:	d406      	bmi.n	8002eac <HAL_RCC_OscConfig+0x418>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e9e:	f7fe fdf1 	bl	8001a84 <HAL_GetTick>
 8002ea2:	1b00      	subs	r0, r0, r4
 8002ea4:	2802      	cmp	r0, #2
 8002ea6:	d9f6      	bls.n	8002e96 <HAL_RCC_OscConfig+0x402>
            return HAL_TIMEOUT;
 8002ea8:	2003      	movs	r0, #3
 8002eaa:	e026      	b.n	8002efa <HAL_RCC_OscConfig+0x466>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8002eac:	2000      	movs	r0, #0
 8002eae:	e024      	b.n	8002efa <HAL_RCC_OscConfig+0x466>
 8002eb0:	2000      	movs	r0, #0
 8002eb2:	e022      	b.n	8002efa <HAL_RCC_OscConfig+0x466>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d02c      	beq.n	8002f12 <HAL_RCC_OscConfig+0x47e>
        temp_pllckcfg = RCC->PLLCFGR;
 8002eb8:	4b1c      	ldr	r3, [pc, #112]	; (8002f2c <HAL_RCC_OscConfig+0x498>)
 8002eba:	68da      	ldr	r2, [r3, #12]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	6a21      	ldr	r1, [r4, #32]
 8002ec2:	428b      	cmp	r3, r1
 8002ec4:	d127      	bne.n	8002f16 <HAL_RCC_OscConfig+0x482>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ec6:	2370      	movs	r3, #112	; 0x70
 8002ec8:	4013      	ands	r3, r2
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eca:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002ecc:	428b      	cmp	r3, r1
 8002ece:	d124      	bne.n	8002f1a <HAL_RCC_OscConfig+0x486>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ed0:	21fe      	movs	r1, #254	; 0xfe
 8002ed2:	01c9      	lsls	r1, r1, #7
 8002ed4:	4011      	ands	r1, r2
 8002ed6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002ed8:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002eda:	4299      	cmp	r1, r3
 8002edc:	d11f      	bne.n	8002f1e <HAL_RCC_OscConfig+0x48a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002ede:	23f8      	movs	r3, #248	; 0xf8
 8002ee0:	039b      	lsls	r3, r3, #14
 8002ee2:	4013      	ands	r3, r2
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ee4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002ee6:	428b      	cmp	r3, r1
 8002ee8:	d11b      	bne.n	8002f22 <HAL_RCC_OscConfig+0x48e>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002eea:	0f52      	lsrs	r2, r2, #29
 8002eec:	0752      	lsls	r2, r2, #29
 8002eee:	6b23      	ldr	r3, [r4, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d118      	bne.n	8002f26 <HAL_RCC_OscConfig+0x492>
  return HAL_OK;
 8002ef4:	2000      	movs	r0, #0
 8002ef6:	e000      	b.n	8002efa <HAL_RCC_OscConfig+0x466>
    return HAL_ERROR;
 8002ef8:	2001      	movs	r0, #1
}
 8002efa:	b002      	add	sp, #8
 8002efc:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8002efe:	2001      	movs	r0, #1
 8002f00:	e7fb      	b.n	8002efa <HAL_RCC_OscConfig+0x466>
        return HAL_ERROR;
 8002f02:	2001      	movs	r0, #1
 8002f04:	e7f9      	b.n	8002efa <HAL_RCC_OscConfig+0x466>
          return HAL_ERROR;
 8002f06:	2001      	movs	r0, #1
 8002f08:	e7f7      	b.n	8002efa <HAL_RCC_OscConfig+0x466>
        return HAL_ERROR;
 8002f0a:	2001      	movs	r0, #1
 8002f0c:	e7f5      	b.n	8002efa <HAL_RCC_OscConfig+0x466>
  return HAL_OK;
 8002f0e:	2000      	movs	r0, #0
 8002f10:	e7f3      	b.n	8002efa <HAL_RCC_OscConfig+0x466>
        return HAL_ERROR;
 8002f12:	2001      	movs	r0, #1
 8002f14:	e7f1      	b.n	8002efa <HAL_RCC_OscConfig+0x466>
          return HAL_ERROR;
 8002f16:	2001      	movs	r0, #1
 8002f18:	e7ef      	b.n	8002efa <HAL_RCC_OscConfig+0x466>
 8002f1a:	2001      	movs	r0, #1
 8002f1c:	e7ed      	b.n	8002efa <HAL_RCC_OscConfig+0x466>
 8002f1e:	2001      	movs	r0, #1
 8002f20:	e7eb      	b.n	8002efa <HAL_RCC_OscConfig+0x466>
 8002f22:	2001      	movs	r0, #1
 8002f24:	e7e9      	b.n	8002efa <HAL_RCC_OscConfig+0x466>
 8002f26:	2001      	movs	r0, #1
 8002f28:	e7e7      	b.n	8002efa <HAL_RCC_OscConfig+0x466>
 8002f2a:	46c0      	nop			; (mov r8, r8)
 8002f2c:	40021000 	.word	0x40021000
 8002f30:	feffffff 	.word	0xfeffffff
 8002f34:	effeffff 	.word	0xeffeffff
 8002f38:	efffffff 	.word	0xefffffff
 8002f3c:	1fc1808c 	.word	0x1fc1808c

08002f40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f40:	b510      	push	{r4, lr}
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f42:	4b2a      	ldr	r3, [pc, #168]	; (8002fec <HAL_RCC_GetSysClockFreq+0xac>)
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	2238      	movs	r2, #56	; 0x38
 8002f48:	421a      	tst	r2, r3
 8002f4a:	d107      	bne.n	8002f5c <HAL_RCC_GetSysClockFreq+0x1c>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002f4c:	4b27      	ldr	r3, [pc, #156]	; (8002fec <HAL_RCC_GetSysClockFreq+0xac>)
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	0ad2      	lsrs	r2, r2, #11
 8002f52:	2307      	movs	r3, #7
 8002f54:	4013      	ands	r3, r2

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002f56:	4826      	ldr	r0, [pc, #152]	; (8002ff0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002f58:	40d8      	lsrs	r0, r3
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
}
 8002f5a:	bd10      	pop	{r4, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f5c:	4b23      	ldr	r3, [pc, #140]	; (8002fec <HAL_RCC_GetSysClockFreq+0xac>)
 8002f5e:	689a      	ldr	r2, [r3, #8]
 8002f60:	2338      	movs	r3, #56	; 0x38
 8002f62:	4013      	ands	r3, r2
 8002f64:	2b08      	cmp	r3, #8
 8002f66:	d03b      	beq.n	8002fe0 <HAL_RCC_GetSysClockFreq+0xa0>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f68:	4b20      	ldr	r3, [pc, #128]	; (8002fec <HAL_RCC_GetSysClockFreq+0xac>)
 8002f6a:	689a      	ldr	r2, [r3, #8]
 8002f6c:	2338      	movs	r3, #56	; 0x38
 8002f6e:	4013      	ands	r3, r2
 8002f70:	2b10      	cmp	r3, #16
 8002f72:	d00d      	beq.n	8002f90 <HAL_RCC_GetSysClockFreq+0x50>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002f74:	4b1d      	ldr	r3, [pc, #116]	; (8002fec <HAL_RCC_GetSysClockFreq+0xac>)
 8002f76:	689a      	ldr	r2, [r3, #8]
 8002f78:	2338      	movs	r3, #56	; 0x38
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	2b20      	cmp	r3, #32
 8002f7e:	d031      	beq.n	8002fe4 <HAL_RCC_GetSysClockFreq+0xa4>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002f80:	4b1a      	ldr	r3, [pc, #104]	; (8002fec <HAL_RCC_GetSysClockFreq+0xac>)
 8002f82:	689a      	ldr	r2, [r3, #8]
 8002f84:	2338      	movs	r3, #56	; 0x38
 8002f86:	4013      	ands	r3, r2
 8002f88:	2b18      	cmp	r3, #24
 8002f8a:	d026      	beq.n	8002fda <HAL_RCC_GetSysClockFreq+0x9a>
    sysclockfreq = 0U;
 8002f8c:	2000      	movs	r0, #0
  return sysclockfreq;
 8002f8e:	e7e4      	b.n	8002f5a <HAL_RCC_GetSysClockFreq+0x1a>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002f90:	4a16      	ldr	r2, [pc, #88]	; (8002fec <HAL_RCC_GetSysClockFreq+0xac>)
 8002f92:	68d1      	ldr	r1, [r2, #12]
 8002f94:	3b0d      	subs	r3, #13
 8002f96:	400b      	ands	r3, r1
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f98:	68d2      	ldr	r2, [r2, #12]
 8002f9a:	0912      	lsrs	r2, r2, #4
 8002f9c:	2107      	movs	r1, #7
 8002f9e:	4011      	ands	r1, r2
 8002fa0:	3101      	adds	r1, #1
    switch (pllsource)
 8002fa2:	2b03      	cmp	r3, #3
 8002fa4:	d00f      	beq.n	8002fc6 <HAL_RCC_GetSysClockFreq+0x86>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002fa6:	4812      	ldr	r0, [pc, #72]	; (8002ff0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002fa8:	f7fd f8bc 	bl	8000124 <__udivsi3>
 8002fac:	4b0f      	ldr	r3, [pc, #60]	; (8002fec <HAL_RCC_GetSysClockFreq+0xac>)
 8002fae:	68da      	ldr	r2, [r3, #12]
 8002fb0:	0a12      	lsrs	r2, r2, #8
 8002fb2:	237f      	movs	r3, #127	; 0x7f
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	4358      	muls	r0, r3
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002fb8:	4b0c      	ldr	r3, [pc, #48]	; (8002fec <HAL_RCC_GetSysClockFreq+0xac>)
 8002fba:	68d9      	ldr	r1, [r3, #12]
 8002fbc:	0f49      	lsrs	r1, r1, #29
 8002fbe:	3101      	adds	r1, #1
    sysclockfreq = pllvco / pllr;
 8002fc0:	f7fd f8b0 	bl	8000124 <__udivsi3>
 8002fc4:	e7c9      	b.n	8002f5a <HAL_RCC_GetSysClockFreq+0x1a>
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002fc6:	480b      	ldr	r0, [pc, #44]	; (8002ff4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002fc8:	f7fd f8ac 	bl	8000124 <__udivsi3>
 8002fcc:	4b07      	ldr	r3, [pc, #28]	; (8002fec <HAL_RCC_GetSysClockFreq+0xac>)
 8002fce:	68da      	ldr	r2, [r3, #12]
 8002fd0:	0a12      	lsrs	r2, r2, #8
 8002fd2:	237f      	movs	r3, #127	; 0x7f
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	4358      	muls	r0, r3
        break;
 8002fd8:	e7ee      	b.n	8002fb8 <HAL_RCC_GetSysClockFreq+0x78>
    sysclockfreq = LSI_VALUE;
 8002fda:	20fa      	movs	r0, #250	; 0xfa
 8002fdc:	01c0      	lsls	r0, r0, #7
 8002fde:	e7bc      	b.n	8002f5a <HAL_RCC_GetSysClockFreq+0x1a>
    sysclockfreq = HSE_VALUE;
 8002fe0:	4804      	ldr	r0, [pc, #16]	; (8002ff4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002fe2:	e7ba      	b.n	8002f5a <HAL_RCC_GetSysClockFreq+0x1a>
    sysclockfreq = LSE_VALUE;
 8002fe4:	2080      	movs	r0, #128	; 0x80
 8002fe6:	0200      	lsls	r0, r0, #8
 8002fe8:	e7b7      	b.n	8002f5a <HAL_RCC_GetSysClockFreq+0x1a>
 8002fea:	46c0      	nop			; (mov r8, r8)
 8002fec:	40021000 	.word	0x40021000
 8002ff0:	00f42400 	.word	0x00f42400
 8002ff4:	007a1200 	.word	0x007a1200

08002ff8 <HAL_RCC_ClockConfig>:
{
 8002ff8:	b570      	push	{r4, r5, r6, lr}
 8002ffa:	0004      	movs	r4, r0
 8002ffc:	000d      	movs	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8002ffe:	2800      	cmp	r0, #0
 8003000:	d100      	bne.n	8003004 <HAL_RCC_ClockConfig+0xc>
 8003002:	e0aa      	b.n	800315a <HAL_RCC_ClockConfig+0x162>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003004:	4b57      	ldr	r3, [pc, #348]	; (8003164 <HAL_RCC_ClockConfig+0x16c>)
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	2307      	movs	r3, #7
 800300a:	4013      	ands	r3, r2
 800300c:	428b      	cmp	r3, r1
 800300e:	d321      	bcc.n	8003054 <HAL_RCC_ClockConfig+0x5c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003010:	6823      	ldr	r3, [r4, #0]
 8003012:	079a      	lsls	r2, r3, #30
 8003014:	d50e      	bpl.n	8003034 <HAL_RCC_ClockConfig+0x3c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003016:	075b      	lsls	r3, r3, #29
 8003018:	d505      	bpl.n	8003026 <HAL_RCC_ClockConfig+0x2e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800301a:	4a53      	ldr	r2, [pc, #332]	; (8003168 <HAL_RCC_ClockConfig+0x170>)
 800301c:	6891      	ldr	r1, [r2, #8]
 800301e:	23e0      	movs	r3, #224	; 0xe0
 8003020:	01db      	lsls	r3, r3, #7
 8003022:	430b      	orrs	r3, r1
 8003024:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003026:	4a50      	ldr	r2, [pc, #320]	; (8003168 <HAL_RCC_ClockConfig+0x170>)
 8003028:	6893      	ldr	r3, [r2, #8]
 800302a:	4950      	ldr	r1, [pc, #320]	; (800316c <HAL_RCC_ClockConfig+0x174>)
 800302c:	400b      	ands	r3, r1
 800302e:	68a1      	ldr	r1, [r4, #8]
 8003030:	430b      	orrs	r3, r1
 8003032:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003034:	6823      	ldr	r3, [r4, #0]
 8003036:	07db      	lsls	r3, r3, #31
 8003038:	d554      	bpl.n	80030e4 <HAL_RCC_ClockConfig+0xec>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800303a:	6863      	ldr	r3, [r4, #4]
 800303c:	2b01      	cmp	r3, #1
 800303e:	d020      	beq.n	8003082 <HAL_RCC_ClockConfig+0x8a>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003040:	2b02      	cmp	r3, #2
 8003042:	d03b      	beq.n	80030bc <HAL_RCC_ClockConfig+0xc4>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003044:	2b00      	cmp	r3, #0
 8003046:	d13f      	bne.n	80030c8 <HAL_RCC_ClockConfig+0xd0>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003048:	4a47      	ldr	r2, [pc, #284]	; (8003168 <HAL_RCC_ClockConfig+0x170>)
 800304a:	6812      	ldr	r2, [r2, #0]
 800304c:	0552      	lsls	r2, r2, #21
 800304e:	d41c      	bmi.n	800308a <HAL_RCC_ClockConfig+0x92>
        return HAL_ERROR;
 8003050:	2001      	movs	r0, #1
 8003052:	e06a      	b.n	800312a <HAL_RCC_ClockConfig+0x132>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003054:	4a43      	ldr	r2, [pc, #268]	; (8003164 <HAL_RCC_ClockConfig+0x16c>)
 8003056:	6813      	ldr	r3, [r2, #0]
 8003058:	2107      	movs	r1, #7
 800305a:	438b      	bics	r3, r1
 800305c:	432b      	orrs	r3, r5
 800305e:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003060:	f7fe fd10 	bl	8001a84 <HAL_GetTick>
 8003064:	0006      	movs	r6, r0
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003066:	4b3f      	ldr	r3, [pc, #252]	; (8003164 <HAL_RCC_ClockConfig+0x16c>)
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	2307      	movs	r3, #7
 800306c:	4013      	ands	r3, r2
 800306e:	42ab      	cmp	r3, r5
 8003070:	d0ce      	beq.n	8003010 <HAL_RCC_ClockConfig+0x18>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003072:	f7fe fd07 	bl	8001a84 <HAL_GetTick>
 8003076:	1b80      	subs	r0, r0, r6
 8003078:	4a3d      	ldr	r2, [pc, #244]	; (8003170 <HAL_RCC_ClockConfig+0x178>)
 800307a:	4290      	cmp	r0, r2
 800307c:	d9f3      	bls.n	8003066 <HAL_RCC_ClockConfig+0x6e>
        return HAL_TIMEOUT;
 800307e:	2003      	movs	r0, #3
 8003080:	e053      	b.n	800312a <HAL_RCC_ClockConfig+0x132>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003082:	4a39      	ldr	r2, [pc, #228]	; (8003168 <HAL_RCC_ClockConfig+0x170>)
 8003084:	6812      	ldr	r2, [r2, #0]
 8003086:	0392      	lsls	r2, r2, #14
 8003088:	d569      	bpl.n	800315e <HAL_RCC_ClockConfig+0x166>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800308a:	4937      	ldr	r1, [pc, #220]	; (8003168 <HAL_RCC_ClockConfig+0x170>)
 800308c:	688a      	ldr	r2, [r1, #8]
 800308e:	2007      	movs	r0, #7
 8003090:	4382      	bics	r2, r0
 8003092:	4313      	orrs	r3, r2
 8003094:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8003096:	f7fe fcf5 	bl	8001a84 <HAL_GetTick>
 800309a:	0006      	movs	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800309c:	4b32      	ldr	r3, [pc, #200]	; (8003168 <HAL_RCC_ClockConfig+0x170>)
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	2238      	movs	r2, #56	; 0x38
 80030a2:	401a      	ands	r2, r3
 80030a4:	6863      	ldr	r3, [r4, #4]
 80030a6:	00db      	lsls	r3, r3, #3
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d01b      	beq.n	80030e4 <HAL_RCC_ClockConfig+0xec>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030ac:	f7fe fcea 	bl	8001a84 <HAL_GetTick>
 80030b0:	1b80      	subs	r0, r0, r6
 80030b2:	4b2f      	ldr	r3, [pc, #188]	; (8003170 <HAL_RCC_ClockConfig+0x178>)
 80030b4:	4298      	cmp	r0, r3
 80030b6:	d9f1      	bls.n	800309c <HAL_RCC_ClockConfig+0xa4>
        return HAL_TIMEOUT;
 80030b8:	2003      	movs	r0, #3
 80030ba:	e036      	b.n	800312a <HAL_RCC_ClockConfig+0x132>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030bc:	4a2a      	ldr	r2, [pc, #168]	; (8003168 <HAL_RCC_ClockConfig+0x170>)
 80030be:	6812      	ldr	r2, [r2, #0]
 80030c0:	0192      	lsls	r2, r2, #6
 80030c2:	d4e2      	bmi.n	800308a <HAL_RCC_ClockConfig+0x92>
        return HAL_ERROR;
 80030c4:	2001      	movs	r0, #1
 80030c6:	e030      	b.n	800312a <HAL_RCC_ClockConfig+0x132>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80030c8:	2b03      	cmp	r3, #3
 80030ca:	d005      	beq.n	80030d8 <HAL_RCC_ClockConfig+0xe0>
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030cc:	4a26      	ldr	r2, [pc, #152]	; (8003168 <HAL_RCC_ClockConfig+0x170>)
 80030ce:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80030d0:	0792      	lsls	r2, r2, #30
 80030d2:	d4da      	bmi.n	800308a <HAL_RCC_ClockConfig+0x92>
        return HAL_ERROR;
 80030d4:	2001      	movs	r0, #1
 80030d6:	e028      	b.n	800312a <HAL_RCC_ClockConfig+0x132>
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80030d8:	4a23      	ldr	r2, [pc, #140]	; (8003168 <HAL_RCC_ClockConfig+0x170>)
 80030da:	6e12      	ldr	r2, [r2, #96]	; 0x60
 80030dc:	0792      	lsls	r2, r2, #30
 80030de:	d4d4      	bmi.n	800308a <HAL_RCC_ClockConfig+0x92>
        return HAL_ERROR;
 80030e0:	2001      	movs	r0, #1
 80030e2:	e022      	b.n	800312a <HAL_RCC_ClockConfig+0x132>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80030e4:	4b1f      	ldr	r3, [pc, #124]	; (8003164 <HAL_RCC_ClockConfig+0x16c>)
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	2307      	movs	r3, #7
 80030ea:	4013      	ands	r3, r2
 80030ec:	42ab      	cmp	r3, r5
 80030ee:	d81d      	bhi.n	800312c <HAL_RCC_ClockConfig+0x134>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030f0:	6823      	ldr	r3, [r4, #0]
 80030f2:	075b      	lsls	r3, r3, #29
 80030f4:	d506      	bpl.n	8003104 <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80030f6:	4a1c      	ldr	r2, [pc, #112]	; (8003168 <HAL_RCC_ClockConfig+0x170>)
 80030f8:	6893      	ldr	r3, [r2, #8]
 80030fa:	491e      	ldr	r1, [pc, #120]	; (8003174 <HAL_RCC_ClockConfig+0x17c>)
 80030fc:	400b      	ands	r3, r1
 80030fe:	68e1      	ldr	r1, [r4, #12]
 8003100:	430b      	orrs	r3, r1
 8003102:	6093      	str	r3, [r2, #8]
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003104:	f7ff ff1c 	bl	8002f40 <HAL_RCC_GetSysClockFreq>
 8003108:	4b17      	ldr	r3, [pc, #92]	; (8003168 <HAL_RCC_ClockConfig+0x170>)
 800310a:	689a      	ldr	r2, [r3, #8]
 800310c:	0a12      	lsrs	r2, r2, #8
 800310e:	230f      	movs	r3, #15
 8003110:	4013      	ands	r3, r2
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	4a18      	ldr	r2, [pc, #96]	; (8003178 <HAL_RCC_ClockConfig+0x180>)
 8003116:	589a      	ldr	r2, [r3, r2]
 8003118:	231f      	movs	r3, #31
 800311a:	4013      	ands	r3, r2
 800311c:	40d8      	lsrs	r0, r3
 800311e:	4b17      	ldr	r3, [pc, #92]	; (800317c <HAL_RCC_ClockConfig+0x184>)
 8003120:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 8003122:	4b17      	ldr	r3, [pc, #92]	; (8003180 <HAL_RCC_ClockConfig+0x188>)
 8003124:	6818      	ldr	r0, [r3, #0]
 8003126:	f7fe fc61 	bl	80019ec <HAL_InitTick>
}
 800312a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800312c:	4a0d      	ldr	r2, [pc, #52]	; (8003164 <HAL_RCC_ClockConfig+0x16c>)
 800312e:	6813      	ldr	r3, [r2, #0]
 8003130:	2107      	movs	r1, #7
 8003132:	438b      	bics	r3, r1
 8003134:	432b      	orrs	r3, r5
 8003136:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003138:	f7fe fca4 	bl	8001a84 <HAL_GetTick>
 800313c:	0006      	movs	r6, r0
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800313e:	4b09      	ldr	r3, [pc, #36]	; (8003164 <HAL_RCC_ClockConfig+0x16c>)
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	2307      	movs	r3, #7
 8003144:	4013      	ands	r3, r2
 8003146:	42ab      	cmp	r3, r5
 8003148:	d0d2      	beq.n	80030f0 <HAL_RCC_ClockConfig+0xf8>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800314a:	f7fe fc9b 	bl	8001a84 <HAL_GetTick>
 800314e:	1b80      	subs	r0, r0, r6
 8003150:	4b07      	ldr	r3, [pc, #28]	; (8003170 <HAL_RCC_ClockConfig+0x178>)
 8003152:	4298      	cmp	r0, r3
 8003154:	d9f3      	bls.n	800313e <HAL_RCC_ClockConfig+0x146>
        return HAL_TIMEOUT;
 8003156:	2003      	movs	r0, #3
 8003158:	e7e7      	b.n	800312a <HAL_RCC_ClockConfig+0x132>
    return HAL_ERROR;
 800315a:	2001      	movs	r0, #1
 800315c:	e7e5      	b.n	800312a <HAL_RCC_ClockConfig+0x132>
        return HAL_ERROR;
 800315e:	2001      	movs	r0, #1
 8003160:	e7e3      	b.n	800312a <HAL_RCC_ClockConfig+0x132>
 8003162:	46c0      	nop			; (mov r8, r8)
 8003164:	40022000 	.word	0x40022000
 8003168:	40021000 	.word	0x40021000
 800316c:	fffff0ff 	.word	0xfffff0ff
 8003170:	00001388 	.word	0x00001388
 8003174:	ffff8fff 	.word	0xffff8fff
 8003178:	08004664 	.word	0x08004664
 800317c:	20000000 	.word	0x20000000
 8003180:	20000008 	.word	0x20000008

08003184 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003184:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003186:	b083      	sub	sp, #12
 8003188:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800318a:	6803      	ldr	r3, [r0, #0]
 800318c:	039b      	lsls	r3, r3, #14
 800318e:	d562      	bpl.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0xd2>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003190:	4b53      	ldr	r3, [pc, #332]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003192:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003194:	00db      	lsls	r3, r3, #3
 8003196:	d41e      	bmi.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x52>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003198:	4a51      	ldr	r2, [pc, #324]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800319a:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800319c:	2080      	movs	r0, #128	; 0x80
 800319e:	0540      	lsls	r0, r0, #21
 80031a0:	4301      	orrs	r1, r0
 80031a2:	63d1      	str	r1, [r2, #60]	; 0x3c
 80031a4:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80031a6:	4003      	ands	r3, r0
 80031a8:	9301      	str	r3, [sp, #4]
 80031aa:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80031ac:	2601      	movs	r6, #1
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031ae:	4a4d      	ldr	r2, [pc, #308]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031b0:	6811      	ldr	r1, [r2, #0]
 80031b2:	2380      	movs	r3, #128	; 0x80
 80031b4:	005b      	lsls	r3, r3, #1
 80031b6:	430b      	orrs	r3, r1
 80031b8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80031ba:	f7fe fc63 	bl	8001a84 <HAL_GetTick>
 80031be:	0005      	movs	r5, r0

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80031c0:	4b48      	ldr	r3, [pc, #288]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	05db      	lsls	r3, r3, #23
 80031c6:	d408      	bmi.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031c8:	f7fe fc5c 	bl	8001a84 <HAL_GetTick>
 80031cc:	1b40      	subs	r0, r0, r5
 80031ce:	2802      	cmp	r0, #2
 80031d0:	d9f6      	bls.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x3c>
      {
        ret = HAL_TIMEOUT;
 80031d2:	2503      	movs	r5, #3
 80031d4:	e002      	b.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x58>
    FlagStatus       pwrclkchanged = RESET;
 80031d6:	2600      	movs	r6, #0
 80031d8:	e7e9      	b.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x2a>
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80031da:	2500      	movs	r5, #0
        break;
      }
    }

    if (ret == HAL_OK)
 80031dc:	2d00      	cmp	r5, #0
 80031de:	d123      	bne.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80031e0:	4b3f      	ldr	r3, [pc, #252]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80031e2:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80031e4:	22c0      	movs	r2, #192	; 0xc0
 80031e6:	0092      	lsls	r2, r2, #2
 80031e8:	000b      	movs	r3, r1
 80031ea:	4013      	ands	r3, r2

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80031ec:	4211      	tst	r1, r2
 80031ee:	d010      	beq.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x8e>
 80031f0:	6962      	ldr	r2, [r4, #20]
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d00d      	beq.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80031f6:	4a3a      	ldr	r2, [pc, #232]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80031f8:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 80031fa:	493b      	ldr	r1, [pc, #236]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031fc:	400b      	ands	r3, r1
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80031fe:	6dd0      	ldr	r0, [r2, #92]	; 0x5c
 8003200:	2180      	movs	r1, #128	; 0x80
 8003202:	0249      	lsls	r1, r1, #9
 8003204:	4301      	orrs	r1, r0
 8003206:	65d1      	str	r1, [r2, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003208:	6dd1      	ldr	r1, [r2, #92]	; 0x5c
 800320a:	4838      	ldr	r0, [pc, #224]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800320c:	4001      	ands	r1, r0
 800320e:	65d1      	str	r1, [r2, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003210:	65d3      	str	r3, [r2, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003212:	07db      	lsls	r3, r3, #31
 8003214:	d410      	bmi.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0xb4>
            break;
          }
        }
      }

      if (ret == HAL_OK)
 8003216:	2d00      	cmp	r5, #0
 8003218:	d106      	bne.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800321a:	4a31      	ldr	r2, [pc, #196]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800321c:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 800321e:	4932      	ldr	r1, [pc, #200]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003220:	400b      	ands	r3, r1
 8003222:	6961      	ldr	r1, [r4, #20]
 8003224:	430b      	orrs	r3, r1
 8003226:	65d3      	str	r3, [r2, #92]	; 0x5c
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003228:	2e01      	cmp	r6, #1
 800322a:	d115      	bne.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0xd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800322c:	4a2c      	ldr	r2, [pc, #176]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800322e:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8003230:	492f      	ldr	r1, [pc, #188]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x16c>)
 8003232:	400b      	ands	r3, r1
 8003234:	63d3      	str	r3, [r2, #60]	; 0x3c
 8003236:	e00f      	b.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0xd4>
        tickstart = HAL_GetTick();
 8003238:	f7fe fc24 	bl	8001a84 <HAL_GetTick>
 800323c:	0007      	movs	r7, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800323e:	4b28      	ldr	r3, [pc, #160]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003240:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003242:	079b      	lsls	r3, r3, #30
 8003244:	d4e7      	bmi.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x92>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003246:	f7fe fc1d 	bl	8001a84 <HAL_GetTick>
 800324a:	1bc0      	subs	r0, r0, r7
 800324c:	4b29      	ldr	r3, [pc, #164]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x170>)
 800324e:	4298      	cmp	r0, r3
 8003250:	d9f5      	bls.n	800323e <HAL_RCCEx_PeriphCLKConfig+0xba>
            ret = HAL_TIMEOUT;
 8003252:	2503      	movs	r5, #3
 8003254:	e7df      	b.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x92>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003256:	2500      	movs	r5, #0
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003258:	6823      	ldr	r3, [r4, #0]
 800325a:	07db      	lsls	r3, r3, #31
 800325c:	d506      	bpl.n	800326c <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800325e:	4a20      	ldr	r2, [pc, #128]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003260:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003262:	2103      	movs	r1, #3
 8003264:	438b      	bics	r3, r1
 8003266:	6861      	ldr	r1, [r4, #4]
 8003268:	430b      	orrs	r3, r1
 800326a:	6553      	str	r3, [r2, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800326c:	6823      	ldr	r3, [r4, #0]
 800326e:	069b      	lsls	r3, r3, #26
 8003270:	d506      	bpl.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0xfc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003272:	4a1b      	ldr	r2, [pc, #108]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003274:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003276:	4920      	ldr	r1, [pc, #128]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x174>)
 8003278:	400b      	ands	r3, r1
 800327a:	68a1      	ldr	r1, [r4, #8]
 800327c:	430b      	orrs	r3, r1
 800327e:	6553      	str	r3, [r2, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003280:	6823      	ldr	r3, [r4, #0]
 8003282:	045b      	lsls	r3, r3, #17
 8003284:	d50b      	bpl.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003286:	4a16      	ldr	r2, [pc, #88]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003288:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	089b      	lsrs	r3, r3, #2
 800328e:	6921      	ldr	r1, [r4, #16]
 8003290:	430b      	orrs	r3, r1
 8003292:	6553      	str	r3, [r2, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003294:	2380      	movs	r3, #128	; 0x80
 8003296:	05db      	lsls	r3, r3, #23
 8003298:	6922      	ldr	r2, [r4, #16]
 800329a:	429a      	cmp	r2, r3
 800329c:	d011      	beq.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800329e:	6823      	ldr	r3, [r4, #0]
 80032a0:	051b      	lsls	r3, r3, #20
 80032a2:	d50b      	bpl.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80032a4:	4a0e      	ldr	r2, [pc, #56]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80032a6:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80032a8:	4914      	ldr	r1, [pc, #80]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x178>)
 80032aa:	400b      	ands	r3, r1
 80032ac:	68e1      	ldr	r1, [r4, #12]
 80032ae:	430b      	orrs	r3, r1
 80032b0:	6553      	str	r3, [r2, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80032b2:	68e2      	ldr	r2, [r4, #12]
 80032b4:	2380      	movs	r3, #128	; 0x80
 80032b6:	01db      	lsls	r3, r3, #7
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d009      	beq.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
}
 80032bc:	0028      	movs	r0, r5
 80032be:	b003      	add	sp, #12
 80032c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80032c2:	4a07      	ldr	r2, [pc, #28]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80032c4:	68d1      	ldr	r1, [r2, #12]
 80032c6:	2380      	movs	r3, #128	; 0x80
 80032c8:	025b      	lsls	r3, r3, #9
 80032ca:	430b      	orrs	r3, r1
 80032cc:	60d3      	str	r3, [r2, #12]
 80032ce:	e7e6      	b.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x11a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80032d0:	4a03      	ldr	r2, [pc, #12]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80032d2:	68d1      	ldr	r1, [r2, #12]
 80032d4:	2380      	movs	r3, #128	; 0x80
 80032d6:	025b      	lsls	r3, r3, #9
 80032d8:	430b      	orrs	r3, r1
 80032da:	60d3      	str	r3, [r2, #12]
 80032dc:	e7ee      	b.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x138>
 80032de:	46c0      	nop			; (mov r8, r8)
 80032e0:	40021000 	.word	0x40021000
 80032e4:	40007000 	.word	0x40007000
 80032e8:	fffffcff 	.word	0xfffffcff
 80032ec:	fffeffff 	.word	0xfffeffff
 80032f0:	efffffff 	.word	0xefffffff
 80032f4:	00001388 	.word	0x00001388
 80032f8:	ffffcfff 	.word	0xffffcfff
 80032fc:	ffff3fff 	.word	0xffff3fff

08003300 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003300:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003302:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003304:	6a04      	ldr	r4, [r0, #32]
 8003306:	2501      	movs	r5, #1
 8003308:	43ac      	bics	r4, r5
 800330a:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800330c:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800330e:	35ef      	adds	r5, #239	; 0xef
 8003310:	43ac      	bics	r4, r5
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003312:	0112      	lsls	r2, r2, #4
 8003314:	4322      	orrs	r2, r4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003316:	240a      	movs	r4, #10
 8003318:	43a3      	bics	r3, r4
  tmpccer |= TIM_ICPolarity;
 800331a:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800331c:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800331e:	6203      	str	r3, [r0, #32]
}
 8003320:	bd30      	pop	{r4, r5, pc}
	...

08003324 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003324:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003326:	6a03      	ldr	r3, [r0, #32]
 8003328:	2410      	movs	r4, #16
 800332a:	43a3      	bics	r3, r4
 800332c:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800332e:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8003330:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003332:	4d05      	ldr	r5, [pc, #20]	; (8003348 <TIM_TI2_ConfigInputStage+0x24>)
 8003334:	402c      	ands	r4, r5
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003336:	0312      	lsls	r2, r2, #12
 8003338:	4322      	orrs	r2, r4

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800333a:	24a0      	movs	r4, #160	; 0xa0
 800333c:	43a3      	bics	r3, r4
  tmpccer |= (TIM_ICPolarity << 4U);
 800333e:	0109      	lsls	r1, r1, #4
 8003340:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003342:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003344:	6201      	str	r1, [r0, #32]
}
 8003346:	bd30      	pop	{r4, r5, pc}
 8003348:	ffff0fff 	.word	0xffff0fff

0800334c <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800334c:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800334e:	4a03      	ldr	r2, [pc, #12]	; (800335c <TIM_ITRx_SetConfig+0x10>)
 8003350:	4013      	ands	r3, r2
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003352:	430b      	orrs	r3, r1
 8003354:	2107      	movs	r1, #7
 8003356:	430b      	orrs	r3, r1
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003358:	6083      	str	r3, [r0, #8]
}
 800335a:	4770      	bx	lr
 800335c:	ffcfff8f 	.word	0xffcfff8f

08003360 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8003360:	233d      	movs	r3, #61	; 0x3d
 8003362:	5cc3      	ldrb	r3, [r0, r3]
 8003364:	2b01      	cmp	r3, #1
 8003366:	d122      	bne.n	80033ae <HAL_TIM_Base_Start_IT+0x4e>
  htim->State = HAL_TIM_STATE_BUSY;
 8003368:	333c      	adds	r3, #60	; 0x3c
 800336a:	2202      	movs	r2, #2
 800336c:	54c2      	strb	r2, [r0, r3]
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800336e:	6802      	ldr	r2, [r0, #0]
 8003370:	68d3      	ldr	r3, [r2, #12]
 8003372:	2101      	movs	r1, #1
 8003374:	430b      	orrs	r3, r1
 8003376:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003378:	6803      	ldr	r3, [r0, #0]
 800337a:	4a10      	ldr	r2, [pc, #64]	; (80033bc <HAL_TIM_Base_Start_IT+0x5c>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d008      	beq.n	8003392 <HAL_TIM_Base_Start_IT+0x32>
 8003380:	4a0f      	ldr	r2, [pc, #60]	; (80033c0 <HAL_TIM_Base_Start_IT+0x60>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d005      	beq.n	8003392 <HAL_TIM_Base_Start_IT+0x32>
    __HAL_TIM_ENABLE(htim);
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	2101      	movs	r1, #1
 800338a:	430a      	orrs	r2, r1
 800338c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800338e:	2000      	movs	r0, #0
 8003390:	e00e      	b.n	80033b0 <HAL_TIM_Base_Start_IT+0x50>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003392:	689a      	ldr	r2, [r3, #8]
 8003394:	490b      	ldr	r1, [pc, #44]	; (80033c4 <HAL_TIM_Base_Start_IT+0x64>)
 8003396:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003398:	2a06      	cmp	r2, #6
 800339a:	d00a      	beq.n	80033b2 <HAL_TIM_Base_Start_IT+0x52>
 800339c:	3907      	subs	r1, #7
 800339e:	428a      	cmp	r2, r1
 80033a0:	d009      	beq.n	80033b6 <HAL_TIM_Base_Start_IT+0x56>
      __HAL_TIM_ENABLE(htim);
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	2101      	movs	r1, #1
 80033a6:	430a      	orrs	r2, r1
 80033a8:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80033aa:	2000      	movs	r0, #0
 80033ac:	e000      	b.n	80033b0 <HAL_TIM_Base_Start_IT+0x50>
    return HAL_ERROR;
 80033ae:	2001      	movs	r0, #1
}
 80033b0:	4770      	bx	lr
  return HAL_OK;
 80033b2:	2000      	movs	r0, #0
 80033b4:	e7fc      	b.n	80033b0 <HAL_TIM_Base_Start_IT+0x50>
 80033b6:	2000      	movs	r0, #0
 80033b8:	e7fa      	b.n	80033b0 <HAL_TIM_Base_Start_IT+0x50>
 80033ba:	46c0      	nop			; (mov r8, r8)
 80033bc:	40012c00 	.word	0x40012c00
 80033c0:	40000400 	.word	0x40000400
 80033c4:	00010007 	.word	0x00010007

080033c8 <HAL_TIM_OC_DelayElapsedCallback>:
}
 80033c8:	4770      	bx	lr

080033ca <HAL_TIM_IC_CaptureCallback>:
}
 80033ca:	4770      	bx	lr

080033cc <HAL_TIM_PWM_PulseFinishedCallback>:
}
 80033cc:	4770      	bx	lr

080033ce <HAL_TIM_TriggerCallback>:
}
 80033ce:	4770      	bx	lr

080033d0 <HAL_TIM_IRQHandler>:
{
 80033d0:	b510      	push	{r4, lr}
 80033d2:	0004      	movs	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80033d4:	6803      	ldr	r3, [r0, #0]
 80033d6:	691a      	ldr	r2, [r3, #16]
 80033d8:	0792      	lsls	r2, r2, #30
 80033da:	d50f      	bpl.n	80033fc <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80033dc:	68da      	ldr	r2, [r3, #12]
 80033de:	0792      	lsls	r2, r2, #30
 80033e0:	d50c      	bpl.n	80033fc <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80033e2:	2203      	movs	r2, #3
 80033e4:	4252      	negs	r2, r2
 80033e6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80033e8:	2301      	movs	r3, #1
 80033ea:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80033ec:	6803      	ldr	r3, [r0, #0]
 80033ee:	699b      	ldr	r3, [r3, #24]
 80033f0:	079b      	lsls	r3, r3, #30
 80033f2:	d06a      	beq.n	80034ca <HAL_TIM_IRQHandler+0xfa>
          HAL_TIM_IC_CaptureCallback(htim);
 80033f4:	f7ff ffe9 	bl	80033ca <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033f8:	2300      	movs	r3, #0
 80033fa:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80033fc:	6823      	ldr	r3, [r4, #0]
 80033fe:	691a      	ldr	r2, [r3, #16]
 8003400:	0752      	lsls	r2, r2, #29
 8003402:	d512      	bpl.n	800342a <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003404:	68da      	ldr	r2, [r3, #12]
 8003406:	0752      	lsls	r2, r2, #29
 8003408:	d50f      	bpl.n	800342a <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800340a:	2205      	movs	r2, #5
 800340c:	4252      	negs	r2, r2
 800340e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003410:	2302      	movs	r3, #2
 8003412:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003414:	6823      	ldr	r3, [r4, #0]
 8003416:	699a      	ldr	r2, [r3, #24]
 8003418:	23c0      	movs	r3, #192	; 0xc0
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	421a      	tst	r2, r3
 800341e:	d05a      	beq.n	80034d6 <HAL_TIM_IRQHandler+0x106>
        HAL_TIM_IC_CaptureCallback(htim);
 8003420:	0020      	movs	r0, r4
 8003422:	f7ff ffd2 	bl	80033ca <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003426:	2300      	movs	r3, #0
 8003428:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800342a:	6823      	ldr	r3, [r4, #0]
 800342c:	691a      	ldr	r2, [r3, #16]
 800342e:	0712      	lsls	r2, r2, #28
 8003430:	d510      	bpl.n	8003454 <HAL_TIM_IRQHandler+0x84>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003432:	68da      	ldr	r2, [r3, #12]
 8003434:	0712      	lsls	r2, r2, #28
 8003436:	d50d      	bpl.n	8003454 <HAL_TIM_IRQHandler+0x84>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003438:	2209      	movs	r2, #9
 800343a:	4252      	negs	r2, r2
 800343c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800343e:	2304      	movs	r3, #4
 8003440:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003442:	6823      	ldr	r3, [r4, #0]
 8003444:	69db      	ldr	r3, [r3, #28]
 8003446:	079b      	lsls	r3, r3, #30
 8003448:	d04c      	beq.n	80034e4 <HAL_TIM_IRQHandler+0x114>
        HAL_TIM_IC_CaptureCallback(htim);
 800344a:	0020      	movs	r0, r4
 800344c:	f7ff ffbd 	bl	80033ca <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003450:	2300      	movs	r3, #0
 8003452:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003454:	6823      	ldr	r3, [r4, #0]
 8003456:	691a      	ldr	r2, [r3, #16]
 8003458:	06d2      	lsls	r2, r2, #27
 800345a:	d512      	bpl.n	8003482 <HAL_TIM_IRQHandler+0xb2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800345c:	68da      	ldr	r2, [r3, #12]
 800345e:	06d2      	lsls	r2, r2, #27
 8003460:	d50f      	bpl.n	8003482 <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003462:	2211      	movs	r2, #17
 8003464:	4252      	negs	r2, r2
 8003466:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003468:	2308      	movs	r3, #8
 800346a:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800346c:	6823      	ldr	r3, [r4, #0]
 800346e:	69da      	ldr	r2, [r3, #28]
 8003470:	23c0      	movs	r3, #192	; 0xc0
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	421a      	tst	r2, r3
 8003476:	d03c      	beq.n	80034f2 <HAL_TIM_IRQHandler+0x122>
        HAL_TIM_IC_CaptureCallback(htim);
 8003478:	0020      	movs	r0, r4
 800347a:	f7ff ffa6 	bl	80033ca <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800347e:	2300      	movs	r3, #0
 8003480:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003482:	6823      	ldr	r3, [r4, #0]
 8003484:	691a      	ldr	r2, [r3, #16]
 8003486:	07d2      	lsls	r2, r2, #31
 8003488:	d502      	bpl.n	8003490 <HAL_TIM_IRQHandler+0xc0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800348a:	68da      	ldr	r2, [r3, #12]
 800348c:	07d2      	lsls	r2, r2, #31
 800348e:	d437      	bmi.n	8003500 <HAL_TIM_IRQHandler+0x130>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003490:	6823      	ldr	r3, [r4, #0]
 8003492:	691a      	ldr	r2, [r3, #16]
 8003494:	0612      	lsls	r2, r2, #24
 8003496:	d502      	bpl.n	800349e <HAL_TIM_IRQHandler+0xce>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003498:	68da      	ldr	r2, [r3, #12]
 800349a:	0612      	lsls	r2, r2, #24
 800349c:	d437      	bmi.n	800350e <HAL_TIM_IRQHandler+0x13e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800349e:	6823      	ldr	r3, [r4, #0]
 80034a0:	691a      	ldr	r2, [r3, #16]
 80034a2:	05d2      	lsls	r2, r2, #23
 80034a4:	d502      	bpl.n	80034ac <HAL_TIM_IRQHandler+0xdc>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80034a6:	68da      	ldr	r2, [r3, #12]
 80034a8:	0612      	lsls	r2, r2, #24
 80034aa:	d437      	bmi.n	800351c <HAL_TIM_IRQHandler+0x14c>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80034ac:	6823      	ldr	r3, [r4, #0]
 80034ae:	691a      	ldr	r2, [r3, #16]
 80034b0:	0652      	lsls	r2, r2, #25
 80034b2:	d502      	bpl.n	80034ba <HAL_TIM_IRQHandler+0xea>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80034b4:	68da      	ldr	r2, [r3, #12]
 80034b6:	0652      	lsls	r2, r2, #25
 80034b8:	d436      	bmi.n	8003528 <HAL_TIM_IRQHandler+0x158>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80034ba:	6823      	ldr	r3, [r4, #0]
 80034bc:	691a      	ldr	r2, [r3, #16]
 80034be:	0692      	lsls	r2, r2, #26
 80034c0:	d502      	bpl.n	80034c8 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80034c2:	68da      	ldr	r2, [r3, #12]
 80034c4:	0692      	lsls	r2, r2, #26
 80034c6:	d436      	bmi.n	8003536 <HAL_TIM_IRQHandler+0x166>
}
 80034c8:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80034ca:	f7ff ff7d 	bl	80033c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034ce:	0020      	movs	r0, r4
 80034d0:	f7ff ff7c 	bl	80033cc <HAL_TIM_PWM_PulseFinishedCallback>
 80034d4:	e790      	b.n	80033f8 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034d6:	0020      	movs	r0, r4
 80034d8:	f7ff ff76 	bl	80033c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034dc:	0020      	movs	r0, r4
 80034de:	f7ff ff75 	bl	80033cc <HAL_TIM_PWM_PulseFinishedCallback>
 80034e2:	e7a0      	b.n	8003426 <HAL_TIM_IRQHandler+0x56>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034e4:	0020      	movs	r0, r4
 80034e6:	f7ff ff6f 	bl	80033c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034ea:	0020      	movs	r0, r4
 80034ec:	f7ff ff6e 	bl	80033cc <HAL_TIM_PWM_PulseFinishedCallback>
 80034f0:	e7ae      	b.n	8003450 <HAL_TIM_IRQHandler+0x80>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034f2:	0020      	movs	r0, r4
 80034f4:	f7ff ff68 	bl	80033c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034f8:	0020      	movs	r0, r4
 80034fa:	f7ff ff67 	bl	80033cc <HAL_TIM_PWM_PulseFinishedCallback>
 80034fe:	e7be      	b.n	800347e <HAL_TIM_IRQHandler+0xae>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003500:	2202      	movs	r2, #2
 8003502:	4252      	negs	r2, r2
 8003504:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003506:	0020      	movs	r0, r4
 8003508:	f7fe f82e 	bl	8001568 <HAL_TIM_PeriodElapsedCallback>
 800350c:	e7c0      	b.n	8003490 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800350e:	2281      	movs	r2, #129	; 0x81
 8003510:	4252      	negs	r2, r2
 8003512:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003514:	0020      	movs	r0, r4
 8003516:	f000 f940 	bl	800379a <HAL_TIMEx_BreakCallback>
 800351a:	e7c0      	b.n	800349e <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800351c:	4a09      	ldr	r2, [pc, #36]	; (8003544 <HAL_TIM_IRQHandler+0x174>)
 800351e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8003520:	0020      	movs	r0, r4
 8003522:	f000 f93b 	bl	800379c <HAL_TIMEx_Break2Callback>
 8003526:	e7c1      	b.n	80034ac <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003528:	2241      	movs	r2, #65	; 0x41
 800352a:	4252      	negs	r2, r2
 800352c:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800352e:	0020      	movs	r0, r4
 8003530:	f7ff ff4d 	bl	80033ce <HAL_TIM_TriggerCallback>
 8003534:	e7c1      	b.n	80034ba <HAL_TIM_IRQHandler+0xea>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003536:	2221      	movs	r2, #33	; 0x21
 8003538:	4252      	negs	r2, r2
 800353a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 800353c:	0020      	movs	r0, r4
 800353e:	f000 f92b 	bl	8003798 <HAL_TIMEx_CommutCallback>
}
 8003542:	e7c1      	b.n	80034c8 <HAL_TIM_IRQHandler+0xf8>
 8003544:	fffffeff 	.word	0xfffffeff

08003548 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8003548:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800354a:	4a1a      	ldr	r2, [pc, #104]	; (80035b4 <TIM_Base_SetConfig+0x6c>)
 800354c:	4290      	cmp	r0, r2
 800354e:	d002      	beq.n	8003556 <TIM_Base_SetConfig+0xe>
 8003550:	4a19      	ldr	r2, [pc, #100]	; (80035b8 <TIM_Base_SetConfig+0x70>)
 8003552:	4290      	cmp	r0, r2
 8003554:	d103      	bne.n	800355e <TIM_Base_SetConfig+0x16>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003556:	2270      	movs	r2, #112	; 0x70
 8003558:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 800355a:	684a      	ldr	r2, [r1, #4]
 800355c:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800355e:	4a15      	ldr	r2, [pc, #84]	; (80035b4 <TIM_Base_SetConfig+0x6c>)
 8003560:	4290      	cmp	r0, r2
 8003562:	d00b      	beq.n	800357c <TIM_Base_SetConfig+0x34>
 8003564:	4a14      	ldr	r2, [pc, #80]	; (80035b8 <TIM_Base_SetConfig+0x70>)
 8003566:	4290      	cmp	r0, r2
 8003568:	d008      	beq.n	800357c <TIM_Base_SetConfig+0x34>
 800356a:	4a14      	ldr	r2, [pc, #80]	; (80035bc <TIM_Base_SetConfig+0x74>)
 800356c:	4290      	cmp	r0, r2
 800356e:	d005      	beq.n	800357c <TIM_Base_SetConfig+0x34>
 8003570:	4a13      	ldr	r2, [pc, #76]	; (80035c0 <TIM_Base_SetConfig+0x78>)
 8003572:	4290      	cmp	r0, r2
 8003574:	d002      	beq.n	800357c <TIM_Base_SetConfig+0x34>
 8003576:	4a13      	ldr	r2, [pc, #76]	; (80035c4 <TIM_Base_SetConfig+0x7c>)
 8003578:	4290      	cmp	r0, r2
 800357a:	d103      	bne.n	8003584 <TIM_Base_SetConfig+0x3c>
    tmpcr1 &= ~TIM_CR1_CKD;
 800357c:	4a12      	ldr	r2, [pc, #72]	; (80035c8 <TIM_Base_SetConfig+0x80>)
 800357e:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003580:	68ca      	ldr	r2, [r1, #12]
 8003582:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003584:	2280      	movs	r2, #128	; 0x80
 8003586:	4393      	bics	r3, r2
 8003588:	694a      	ldr	r2, [r1, #20]
 800358a:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800358c:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800358e:	688b      	ldr	r3, [r1, #8]
 8003590:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003592:	680b      	ldr	r3, [r1, #0]
 8003594:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003596:	4b07      	ldr	r3, [pc, #28]	; (80035b4 <TIM_Base_SetConfig+0x6c>)
 8003598:	4298      	cmp	r0, r3
 800359a:	d005      	beq.n	80035a8 <TIM_Base_SetConfig+0x60>
 800359c:	4b08      	ldr	r3, [pc, #32]	; (80035c0 <TIM_Base_SetConfig+0x78>)
 800359e:	4298      	cmp	r0, r3
 80035a0:	d002      	beq.n	80035a8 <TIM_Base_SetConfig+0x60>
 80035a2:	4b08      	ldr	r3, [pc, #32]	; (80035c4 <TIM_Base_SetConfig+0x7c>)
 80035a4:	4298      	cmp	r0, r3
 80035a6:	d101      	bne.n	80035ac <TIM_Base_SetConfig+0x64>
    TIMx->RCR = Structure->RepetitionCounter;
 80035a8:	690b      	ldr	r3, [r1, #16]
 80035aa:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80035ac:	2301      	movs	r3, #1
 80035ae:	6143      	str	r3, [r0, #20]
}
 80035b0:	4770      	bx	lr
 80035b2:	46c0      	nop			; (mov r8, r8)
 80035b4:	40012c00 	.word	0x40012c00
 80035b8:	40000400 	.word	0x40000400
 80035bc:	40002000 	.word	0x40002000
 80035c0:	40014400 	.word	0x40014400
 80035c4:	40014800 	.word	0x40014800
 80035c8:	fffffcff 	.word	0xfffffcff

080035cc <HAL_TIM_Base_Init>:
{
 80035cc:	b570      	push	{r4, r5, r6, lr}
 80035ce:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 80035d0:	d02a      	beq.n	8003628 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 80035d2:	233d      	movs	r3, #61	; 0x3d
 80035d4:	5cc3      	ldrb	r3, [r0, r3]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d020      	beq.n	800361c <HAL_TIM_Base_Init+0x50>
  htim->State = HAL_TIM_STATE_BUSY;
 80035da:	253d      	movs	r5, #61	; 0x3d
 80035dc:	2302      	movs	r3, #2
 80035de:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035e0:	0021      	movs	r1, r4
 80035e2:	c901      	ldmia	r1!, {r0}
 80035e4:	f7ff ffb0 	bl	8003548 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035e8:	2301      	movs	r3, #1
 80035ea:	2248      	movs	r2, #72	; 0x48
 80035ec:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035ee:	3a0a      	subs	r2, #10
 80035f0:	54a3      	strb	r3, [r4, r2]
 80035f2:	3201      	adds	r2, #1
 80035f4:	54a3      	strb	r3, [r4, r2]
 80035f6:	3201      	adds	r2, #1
 80035f8:	54a3      	strb	r3, [r4, r2]
 80035fa:	3201      	adds	r2, #1
 80035fc:	54a3      	strb	r3, [r4, r2]
 80035fe:	3201      	adds	r2, #1
 8003600:	54a3      	strb	r3, [r4, r2]
 8003602:	3201      	adds	r2, #1
 8003604:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003606:	3201      	adds	r2, #1
 8003608:	54a3      	strb	r3, [r4, r2]
 800360a:	3201      	adds	r2, #1
 800360c:	54a3      	strb	r3, [r4, r2]
 800360e:	3201      	adds	r2, #1
 8003610:	54a3      	strb	r3, [r4, r2]
 8003612:	3201      	adds	r2, #1
 8003614:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8003616:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8003618:	2000      	movs	r0, #0
}
 800361a:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 800361c:	333c      	adds	r3, #60	; 0x3c
 800361e:	2200      	movs	r2, #0
 8003620:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 8003622:	f7fe f943 	bl	80018ac <HAL_TIM_Base_MspInit>
 8003626:	e7d8      	b.n	80035da <HAL_TIM_Base_Init+0xe>
    return HAL_ERROR;
 8003628:	2001      	movs	r0, #1
 800362a:	e7f6      	b.n	800361a <HAL_TIM_Base_Init+0x4e>

0800362c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800362c:	b530      	push	{r4, r5, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800362e:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003630:	4d03      	ldr	r5, [pc, #12]	; (8003640 <TIM_ETR_SetConfig+0x14>)
 8003632:	402c      	ands	r4, r5

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003634:	021b      	lsls	r3, r3, #8
 8003636:	4313      	orrs	r3, r2
 8003638:	430b      	orrs	r3, r1
 800363a:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800363c:	6083      	str	r3, [r0, #8]
}
 800363e:	bd30      	pop	{r4, r5, pc}
 8003640:	ffff00ff 	.word	0xffff00ff

08003644 <HAL_TIM_ConfigClockSource>:
{
 8003644:	b510      	push	{r4, lr}
 8003646:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 8003648:	233c      	movs	r3, #60	; 0x3c
 800364a:	5cc3      	ldrb	r3, [r0, r3]
 800364c:	2b01      	cmp	r3, #1
 800364e:	d066      	beq.n	800371e <HAL_TIM_ConfigClockSource+0xda>
 8003650:	233c      	movs	r3, #60	; 0x3c
 8003652:	2201      	movs	r2, #1
 8003654:	54c2      	strb	r2, [r0, r3]
  htim->State = HAL_TIM_STATE_BUSY;
 8003656:	3301      	adds	r3, #1
 8003658:	3201      	adds	r2, #1
 800365a:	54c2      	strb	r2, [r0, r3]
  tmpsmcr = htim->Instance->SMCR;
 800365c:	6802      	ldr	r2, [r0, #0]
 800365e:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003660:	4830      	ldr	r0, [pc, #192]	; (8003724 <HAL_TIM_ConfigClockSource+0xe0>)
 8003662:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 8003664:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8003666:	680b      	ldr	r3, [r1, #0]
 8003668:	2b60      	cmp	r3, #96	; 0x60
 800366a:	d044      	beq.n	80036f6 <HAL_TIM_ConfigClockSource+0xb2>
 800366c:	d824      	bhi.n	80036b8 <HAL_TIM_ConfigClockSource+0x74>
 800366e:	2b40      	cmp	r3, #64	; 0x40
 8003670:	d04b      	beq.n	800370a <HAL_TIM_ConfigClockSource+0xc6>
 8003672:	d90b      	bls.n	800368c <HAL_TIM_ConfigClockSource+0x48>
 8003674:	2b50      	cmp	r3, #80	; 0x50
 8003676:	d10e      	bne.n	8003696 <HAL_TIM_ConfigClockSource+0x52>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003678:	68ca      	ldr	r2, [r1, #12]
 800367a:	6849      	ldr	r1, [r1, #4]
 800367c:	6820      	ldr	r0, [r4, #0]
 800367e:	f7ff fe3f 	bl	8003300 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003682:	2150      	movs	r1, #80	; 0x50
 8003684:	6820      	ldr	r0, [r4, #0]
 8003686:	f7ff fe61 	bl	800334c <TIM_ITRx_SetConfig>
      break;
 800368a:	e004      	b.n	8003696 <HAL_TIM_ConfigClockSource+0x52>
  switch (sClockSourceConfig->ClockSource)
 800368c:	2b20      	cmp	r3, #32
 800368e:	d00e      	beq.n	80036ae <HAL_TIM_ConfigClockSource+0x6a>
 8003690:	d909      	bls.n	80036a6 <HAL_TIM_ConfigClockSource+0x62>
 8003692:	2b30      	cmp	r3, #48	; 0x30
 8003694:	d00b      	beq.n	80036ae <HAL_TIM_ConfigClockSource+0x6a>
  htim->State = HAL_TIM_STATE_READY;
 8003696:	233d      	movs	r3, #61	; 0x3d
 8003698:	2201      	movs	r2, #1
 800369a:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(htim);
 800369c:	3b01      	subs	r3, #1
 800369e:	2200      	movs	r2, #0
 80036a0:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 80036a2:	2000      	movs	r0, #0
}
 80036a4:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d001      	beq.n	80036ae <HAL_TIM_ConfigClockSource+0x6a>
 80036aa:	2b10      	cmp	r3, #16
 80036ac:	d1f3      	bne.n	8003696 <HAL_TIM_ConfigClockSource+0x52>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80036ae:	0019      	movs	r1, r3
 80036b0:	6820      	ldr	r0, [r4, #0]
 80036b2:	f7ff fe4b 	bl	800334c <TIM_ITRx_SetConfig>
        break;
 80036b6:	e7ee      	b.n	8003696 <HAL_TIM_ConfigClockSource+0x52>
  switch (sClockSourceConfig->ClockSource)
 80036b8:	2b70      	cmp	r3, #112	; 0x70
 80036ba:	d010      	beq.n	80036de <HAL_TIM_ConfigClockSource+0x9a>
 80036bc:	2280      	movs	r2, #128	; 0x80
 80036be:	0192      	lsls	r2, r2, #6
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d1e8      	bne.n	8003696 <HAL_TIM_ConfigClockSource+0x52>
      TIM_ETR_SetConfig(htim->Instance,
 80036c4:	68cb      	ldr	r3, [r1, #12]
 80036c6:	684a      	ldr	r2, [r1, #4]
 80036c8:	6889      	ldr	r1, [r1, #8]
 80036ca:	6820      	ldr	r0, [r4, #0]
 80036cc:	f7ff ffae 	bl	800362c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80036d0:	6822      	ldr	r2, [r4, #0]
 80036d2:	6891      	ldr	r1, [r2, #8]
 80036d4:	2380      	movs	r3, #128	; 0x80
 80036d6:	01db      	lsls	r3, r3, #7
 80036d8:	430b      	orrs	r3, r1
 80036da:	6093      	str	r3, [r2, #8]
      break;
 80036dc:	e7db      	b.n	8003696 <HAL_TIM_ConfigClockSource+0x52>
      TIM_ETR_SetConfig(htim->Instance,
 80036de:	68cb      	ldr	r3, [r1, #12]
 80036e0:	684a      	ldr	r2, [r1, #4]
 80036e2:	6889      	ldr	r1, [r1, #8]
 80036e4:	6820      	ldr	r0, [r4, #0]
 80036e6:	f7ff ffa1 	bl	800362c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80036ea:	6822      	ldr	r2, [r4, #0]
 80036ec:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80036ee:	2177      	movs	r1, #119	; 0x77
 80036f0:	430b      	orrs	r3, r1
      htim->Instance->SMCR = tmpsmcr;
 80036f2:	6093      	str	r3, [r2, #8]
      break;
 80036f4:	e7cf      	b.n	8003696 <HAL_TIM_ConfigClockSource+0x52>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80036f6:	68ca      	ldr	r2, [r1, #12]
 80036f8:	6849      	ldr	r1, [r1, #4]
 80036fa:	6820      	ldr	r0, [r4, #0]
 80036fc:	f7ff fe12 	bl	8003324 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003700:	2160      	movs	r1, #96	; 0x60
 8003702:	6820      	ldr	r0, [r4, #0]
 8003704:	f7ff fe22 	bl	800334c <TIM_ITRx_SetConfig>
      break;
 8003708:	e7c5      	b.n	8003696 <HAL_TIM_ConfigClockSource+0x52>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800370a:	68ca      	ldr	r2, [r1, #12]
 800370c:	6849      	ldr	r1, [r1, #4]
 800370e:	6820      	ldr	r0, [r4, #0]
 8003710:	f7ff fdf6 	bl	8003300 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003714:	2140      	movs	r1, #64	; 0x40
 8003716:	6820      	ldr	r0, [r4, #0]
 8003718:	f7ff fe18 	bl	800334c <TIM_ITRx_SetConfig>
      break;
 800371c:	e7bb      	b.n	8003696 <HAL_TIM_ConfigClockSource+0x52>
  __HAL_LOCK(htim);
 800371e:	2002      	movs	r0, #2
 8003720:	e7c0      	b.n	80036a4 <HAL_TIM_ConfigClockSource+0x60>
 8003722:	46c0      	nop			; (mov r8, r8)
 8003724:	ffce0088 	.word	0xffce0088

08003728 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003728:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800372a:	233c      	movs	r3, #60	; 0x3c
 800372c:	5cc3      	ldrb	r3, [r0, r3]
 800372e:	2b01      	cmp	r3, #1
 8003730:	d029      	beq.n	8003786 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8003732:	233c      	movs	r3, #60	; 0x3c
 8003734:	2201      	movs	r2, #1
 8003736:	54c2      	strb	r2, [r0, r3]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003738:	3301      	adds	r3, #1
 800373a:	3201      	adds	r2, #1
 800373c:	54c2      	strb	r2, [r0, r3]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800373e:	6802      	ldr	r2, [r0, #0]
 8003740:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003742:	6894      	ldr	r4, [r2, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003744:	4d11      	ldr	r5, [pc, #68]	; (800378c <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 8003746:	42aa      	cmp	r2, r5
 8003748:	d018      	beq.n	800377c <HAL_TIMEx_MasterConfigSynchronization+0x54>
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800374a:	2570      	movs	r5, #112	; 0x70
 800374c:	43ab      	bics	r3, r5
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800374e:	680d      	ldr	r5, [r1, #0]
 8003750:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003752:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003754:	6803      	ldr	r3, [r0, #0]
 8003756:	4a0d      	ldr	r2, [pc, #52]	; (800378c <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d002      	beq.n	8003762 <HAL_TIMEx_MasterConfigSynchronization+0x3a>
 800375c:	4a0c      	ldr	r2, [pc, #48]	; (8003790 <HAL_TIMEx_MasterConfigSynchronization+0x68>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d104      	bne.n	800376c <HAL_TIMEx_MasterConfigSynchronization+0x44>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003762:	2280      	movs	r2, #128	; 0x80
 8003764:	4394      	bics	r4, r2
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003766:	688a      	ldr	r2, [r1, #8]
 8003768:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800376a:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800376c:	233d      	movs	r3, #61	; 0x3d
 800376e:	2201      	movs	r2, #1
 8003770:	54c2      	strb	r2, [r0, r3]

  __HAL_UNLOCK(htim);
 8003772:	3b01      	subs	r3, #1
 8003774:	2200      	movs	r2, #0
 8003776:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 8003778:	2000      	movs	r0, #0
}
 800377a:	bd30      	pop	{r4, r5, pc}
    tmpcr2 &= ~TIM_CR2_MMS2;
 800377c:	4d05      	ldr	r5, [pc, #20]	; (8003794 <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 800377e:	402b      	ands	r3, r5
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003780:	684d      	ldr	r5, [r1, #4]
 8003782:	432b      	orrs	r3, r5
 8003784:	e7e1      	b.n	800374a <HAL_TIMEx_MasterConfigSynchronization+0x22>
  __HAL_LOCK(htim);
 8003786:	2002      	movs	r0, #2
 8003788:	e7f7      	b.n	800377a <HAL_TIMEx_MasterConfigSynchronization+0x52>
 800378a:	46c0      	nop			; (mov r8, r8)
 800378c:	40012c00 	.word	0x40012c00
 8003790:	40000400 	.word	0x40000400
 8003794:	ff0fffff 	.word	0xff0fffff

08003798 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003798:	4770      	bx	lr

0800379a <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800379a:	4770      	bx	lr

0800379c <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800379c:	4770      	bx	lr

0800379e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800379e:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 80037a0:	2200      	movs	r2, #0

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80037a2:	e026      	b.n	80037f2 <LL_GPIO_Init+0x54>
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 80037a4:	6883      	ldr	r3, [r0, #8]
 80037a6:	002c      	movs	r4, r5
 80037a8:	436c      	muls	r4, r5
 80037aa:	0066      	lsls	r6, r4, #1
 80037ac:	1936      	adds	r6, r6, r4
 80037ae:	43b3      	bics	r3, r6
 80037b0:	688e      	ldr	r6, [r1, #8]
 80037b2:	4374      	muls	r4, r6
 80037b4:	4323      	orrs	r3, r4
 80037b6:	6083      	str	r3, [r0, #8]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80037b8:	6843      	ldr	r3, [r0, #4]
 80037ba:	43ab      	bics	r3, r5
 80037bc:	68cc      	ldr	r4, [r1, #12]
 80037be:	436c      	muls	r4, r5
 80037c0:	4323      	orrs	r3, r4
 80037c2:	6043      	str	r3, [r0, #4]
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80037c4:	68c6      	ldr	r6, [r0, #12]
 80037c6:	002b      	movs	r3, r5
 80037c8:	436b      	muls	r3, r5
 80037ca:	005f      	lsls	r7, r3, #1
 80037cc:	18ff      	adds	r7, r7, r3
 80037ce:	43fc      	mvns	r4, r7
 80037d0:	46a4      	mov	ip, r4
 80037d2:	43be      	bics	r6, r7
 80037d4:	690f      	ldr	r7, [r1, #16]
 80037d6:	435f      	muls	r7, r3
 80037d8:	433e      	orrs	r6, r7
 80037da:	60c6      	str	r6, [r0, #12]
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80037dc:	684c      	ldr	r4, [r1, #4]
 80037de:	2c02      	cmp	r4, #2
 80037e0:	d016      	beq.n	8003810 <LL_GPIO_Init+0x72>
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80037e2:	6804      	ldr	r4, [r0, #0]
 80037e4:	4665      	mov	r5, ip
 80037e6:	402c      	ands	r4, r5
 80037e8:	684d      	ldr	r5, [r1, #4]
 80037ea:	436b      	muls	r3, r5
 80037ec:	4323      	orrs	r3, r4
 80037ee:	6003      	str	r3, [r0, #0]
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
    }
    pinpos++;
 80037f0:	3201      	adds	r2, #1
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80037f2:	680c      	ldr	r4, [r1, #0]
 80037f4:	0023      	movs	r3, r4
 80037f6:	40d3      	lsrs	r3, r2
 80037f8:	d026      	beq.n	8003848 <LL_GPIO_Init+0xaa>
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 80037fa:	2301      	movs	r3, #1
 80037fc:	4093      	lsls	r3, r2
 80037fe:	0025      	movs	r5, r4
 8003800:	401d      	ands	r5, r3
    if (currentpin != 0x00u)
 8003802:	421c      	tst	r4, r3
 8003804:	d0f4      	beq.n	80037f0 <LL_GPIO_Init+0x52>
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8003806:	684b      	ldr	r3, [r1, #4]
 8003808:	3b01      	subs	r3, #1
 800380a:	2b01      	cmp	r3, #1
 800380c:	d8da      	bhi.n	80037c4 <LL_GPIO_Init+0x26>
 800380e:	e7c9      	b.n	80037a4 <LL_GPIO_Init+0x6>
        if (currentpin < LL_GPIO_PIN_8)
 8003810:	2dff      	cmp	r5, #255	; 0xff
 8003812:	d80b      	bhi.n	800382c <LL_GPIO_Init+0x8e>
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8003814:	6a06      	ldr	r6, [r0, #32]
 8003816:	001c      	movs	r4, r3
 8003818:	436c      	muls	r4, r5
 800381a:	4365      	muls	r5, r4
 800381c:	012c      	lsls	r4, r5, #4
 800381e:	1b64      	subs	r4, r4, r5
 8003820:	43a6      	bics	r6, r4
 8003822:	694c      	ldr	r4, [r1, #20]
 8003824:	4365      	muls	r5, r4
 8003826:	4335      	orrs	r5, r6
 8003828:	6205      	str	r5, [r0, #32]
             ((((Pin * Pin) * Pin) * Pin) * Alternate));
}
 800382a:	e7da      	b.n	80037e2 <LL_GPIO_Init+0x44>
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 800382c:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800382e:	0a2d      	lsrs	r5, r5, #8
 8003830:	002c      	movs	r4, r5
 8003832:	436c      	muls	r4, r5
 8003834:	436c      	muls	r4, r5
 8003836:	4365      	muls	r5, r4
 8003838:	012c      	lsls	r4, r5, #4
 800383a:	1b64      	subs	r4, r4, r5
 800383c:	43a6      	bics	r6, r4
 800383e:	694c      	ldr	r4, [r1, #20]
 8003840:	4365      	muls	r5, r4
 8003842:	4335      	orrs	r5, r6
 8003844:	6245      	str	r5, [r0, #36]	; 0x24
             (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * Alternate));
}
 8003846:	e7cc      	b.n	80037e2 <LL_GPIO_Init+0x44>
  }

  return (SUCCESS);
}
 8003848:	2000      	movs	r0, #0
 800384a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800384c <RCC_GetHCLKClockFreq>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800384c:	4b05      	ldr	r3, [pc, #20]	; (8003864 <RCC_GetHCLKClockFreq+0x18>)
 800384e:	689a      	ldr	r2, [r3, #8]
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8003850:	0a12      	lsrs	r2, r2, #8
 8003852:	230f      	movs	r3, #15
 8003854:	4013      	ands	r3, r2
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	4a03      	ldr	r2, [pc, #12]	; (8003868 <RCC_GetHCLKClockFreq+0x1c>)
 800385a:	589a      	ldr	r2, [r3, r2]
 800385c:	231f      	movs	r3, #31
 800385e:	4013      	ands	r3, r2
 8003860:	40d8      	lsrs	r0, r3
}
 8003862:	4770      	bx	lr
 8003864:	40021000 	.word	0x40021000
 8003868:	08004664 	.word	0x08004664

0800386c <RCC_GetPCLK1ClockFreq>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800386c:	4b05      	ldr	r3, [pc, #20]	; (8003884 <RCC_GetPCLK1ClockFreq+0x18>)
 800386e:	689a      	ldr	r2, [r3, #8]
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8003870:	0b12      	lsrs	r2, r2, #12
 8003872:	2307      	movs	r3, #7
 8003874:	4013      	ands	r3, r2
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	4a03      	ldr	r2, [pc, #12]	; (8003888 <RCC_GetPCLK1ClockFreq+0x1c>)
 800387a:	589a      	ldr	r2, [r3, r2]
 800387c:	231f      	movs	r3, #31
 800387e:	4013      	ands	r3, r2
 8003880:	40d8      	lsrs	r0, r3
}
 8003882:	4770      	bx	lr
 8003884:	40021000 	.word	0x40021000
 8003888:	080046a4 	.word	0x080046a4

0800388c <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 800388c:	b510      	push	{r4, lr}
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800388e:	4b0e      	ldr	r3, [pc, #56]	; (80038c8 <RCC_PLL_GetFreqDomain_SYS+0x3c>)
 8003890:	68da      	ldr	r2, [r3, #12]
 8003892:	2303      	movs	r3, #3
 8003894:	4013      	ands	r3, r2
  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();

  switch (pllsource)
 8003896:	2b03      	cmp	r3, #3
 8003898:	d013      	beq.n	80038c2 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800389a:	4a0c      	ldr	r2, [pc, #48]	; (80038cc <RCC_PLL_GetFreqDomain_SYS+0x40>)
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800389c:	4c0a      	ldr	r4, [pc, #40]	; (80038c8 <RCC_PLL_GetFreqDomain_SYS+0x3c>)
 800389e:	68e3      	ldr	r3, [r4, #12]
 80038a0:	0a1b      	lsrs	r3, r3, #8
 80038a2:	207f      	movs	r0, #127	; 0x7f
 80038a4:	4018      	ands	r0, r3

    default:
      pllinputfreq = HSI_VALUE;
      break;
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80038a6:	4350      	muls	r0, r2
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80038a8:	68e3      	ldr	r3, [r4, #12]
 80038aa:	091b      	lsrs	r3, r3, #4
 80038ac:	2107      	movs	r1, #7
 80038ae:	4019      	ands	r1, r3
 80038b0:	3101      	adds	r1, #1
 80038b2:	f7fc fc37 	bl	8000124 <__udivsi3>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80038b6:	68e1      	ldr	r1, [r4, #12]
 80038b8:	0f49      	lsrs	r1, r1, #29
 80038ba:	3101      	adds	r1, #1
 80038bc:	f7fc fc32 	bl	8000124 <__udivsi3>
                                   LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 80038c0:	bd10      	pop	{r4, pc}
      pllinputfreq = HSE_VALUE;
 80038c2:	4a03      	ldr	r2, [pc, #12]	; (80038d0 <RCC_PLL_GetFreqDomain_SYS+0x44>)
 80038c4:	e7ea      	b.n	800389c <RCC_PLL_GetFreqDomain_SYS+0x10>
 80038c6:	46c0      	nop			; (mov r8, r8)
 80038c8:	40021000 	.word	0x40021000
 80038cc:	00f42400 	.word	0x00f42400
 80038d0:	007a1200 	.word	0x007a1200

080038d4 <RCC_GetSystemClockFreq>:
{
 80038d4:	b510      	push	{r4, lr}
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80038d6:	4b0a      	ldr	r3, [pc, #40]	; (8003900 <RCC_GetSystemClockFreq+0x2c>)
 80038d8:	689a      	ldr	r2, [r3, #8]
 80038da:	2338      	movs	r3, #56	; 0x38
 80038dc:	4013      	ands	r3, r2
  switch (LL_RCC_GetSysClkSource())
 80038de:	2b08      	cmp	r3, #8
 80038e0:	d00c      	beq.n	80038fc <RCC_GetSystemClockFreq+0x28>
 80038e2:	2b10      	cmp	r3, #16
 80038e4:	d102      	bne.n	80038ec <RCC_GetSystemClockFreq+0x18>
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80038e6:	f7ff ffd1 	bl	800388c <RCC_PLL_GetFreqDomain_SYS>
      break;
 80038ea:	e008      	b.n	80038fe <RCC_GetSystemClockFreq+0x2a>
      hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80038ec:	4b04      	ldr	r3, [pc, #16]	; (8003900 <RCC_GetSystemClockFreq+0x2c>)
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	0ad2      	lsrs	r2, r2, #11
 80038f2:	2307      	movs	r3, #7
 80038f4:	4013      	ands	r3, r2
      frequency = (HSI_VALUE / hsidiv);
 80038f6:	4803      	ldr	r0, [pc, #12]	; (8003904 <RCC_GetSystemClockFreq+0x30>)
 80038f8:	40d8      	lsrs	r0, r3
      break;
 80038fa:	e000      	b.n	80038fe <RCC_GetSystemClockFreq+0x2a>
  switch (LL_RCC_GetSysClkSource())
 80038fc:	4802      	ldr	r0, [pc, #8]	; (8003908 <RCC_GetSystemClockFreq+0x34>)
}
 80038fe:	bd10      	pop	{r4, pc}
 8003900:	40021000 	.word	0x40021000
 8003904:	00f42400 	.word	0x00f42400
 8003908:	007a1200 	.word	0x007a1200

0800390c <LL_RCC_GetSystemClocksFreq>:
{
 800390c:	b510      	push	{r4, lr}
 800390e:	0004      	movs	r4, r0
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8003910:	f7ff ffe0 	bl	80038d4 <RCC_GetSystemClockFreq>
 8003914:	6020      	str	r0, [r4, #0]
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8003916:	f7ff ff99 	bl	800384c <RCC_GetHCLKClockFreq>
 800391a:	6060      	str	r0, [r4, #4]
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800391c:	f7ff ffa6 	bl	800386c <RCC_GetPCLK1ClockFreq>
 8003920:	60a0      	str	r0, [r4, #8]
}
 8003922:	bd10      	pop	{r4, pc}

08003924 <LL_RCC_GetUSARTClockFreq>:
{
 8003924:	b510      	push	{r4, lr}
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8003926:	2803      	cmp	r0, #3
 8003928:	d001      	beq.n	800392e <LL_RCC_GetUSARTClockFreq+0xa>
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800392a:	2000      	movs	r0, #0
}
 800392c:	bd10      	pop	{r4, pc}
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 800392e:	4b16      	ldr	r3, [pc, #88]	; (8003988 <LL_RCC_GetUSARTClockFreq+0x64>)
 8003930:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003932:	4003      	ands	r3, r0
 8003934:	0400      	lsls	r0, r0, #16
 8003936:	4318      	orrs	r0, r3
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8003938:	4b14      	ldr	r3, [pc, #80]	; (800398c <LL_RCC_GetUSARTClockFreq+0x68>)
 800393a:	4298      	cmp	r0, r3
 800393c:	d00f      	beq.n	800395e <LL_RCC_GetUSARTClockFreq+0x3a>
 800393e:	4b14      	ldr	r3, [pc, #80]	; (8003990 <LL_RCC_GetUSARTClockFreq+0x6c>)
 8003940:	4298      	cmp	r0, r3
 8003942:	d016      	beq.n	8003972 <LL_RCC_GetUSARTClockFreq+0x4e>
 8003944:	4b13      	ldr	r3, [pc, #76]	; (8003994 <LL_RCC_GetUSARTClockFreq+0x70>)
 8003946:	4298      	cmp	r0, r3
 8003948:	d006      	beq.n	8003958 <LL_RCC_GetUSARTClockFreq+0x34>
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800394a:	f7ff ffc3 	bl	80038d4 <RCC_GetSystemClockFreq>
 800394e:	f7ff ff7d 	bl	800384c <RCC_GetHCLKClockFreq>
 8003952:	f7ff ff8b 	bl	800386c <RCC_GetPCLK1ClockFreq>
        break;
 8003956:	e7e9      	b.n	800392c <LL_RCC_GetUSARTClockFreq+0x8>
        usart_frequency = RCC_GetSystemClockFreq();
 8003958:	f7ff ffbc 	bl	80038d4 <RCC_GetSystemClockFreq>
        break;
 800395c:	e7e6      	b.n	800392c <LL_RCC_GetUSARTClockFreq+0x8>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800395e:	4b0a      	ldr	r3, [pc, #40]	; (8003988 <LL_RCC_GetUSARTClockFreq+0x64>)
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	2380      	movs	r3, #128	; 0x80
 8003964:	00db      	lsls	r3, r3, #3
 8003966:	0010      	movs	r0, r2
 8003968:	4018      	ands	r0, r3
 800396a:	421a      	tst	r2, r3
 800396c:	d0de      	beq.n	800392c <LL_RCC_GetUSARTClockFreq+0x8>
          usart_frequency = HSI_VALUE;
 800396e:	480a      	ldr	r0, [pc, #40]	; (8003998 <LL_RCC_GetUSARTClockFreq+0x74>)
 8003970:	e7dc      	b.n	800392c <LL_RCC_GetUSARTClockFreq+0x8>
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003972:	4b05      	ldr	r3, [pc, #20]	; (8003988 <LL_RCC_GetUSARTClockFreq+0x64>)
 8003974:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003976:	2202      	movs	r2, #2
 8003978:	0010      	movs	r0, r2
 800397a:	4018      	ands	r0, r3
 800397c:	421a      	tst	r2, r3
 800397e:	d0d5      	beq.n	800392c <LL_RCC_GetUSARTClockFreq+0x8>
          usart_frequency = LSE_VALUE;
 8003980:	2080      	movs	r0, #128	; 0x80
 8003982:	0200      	lsls	r0, r0, #8
  return usart_frequency;
 8003984:	e7d2      	b.n	800392c <LL_RCC_GetUSARTClockFreq+0x8>
 8003986:	46c0      	nop			; (mov r8, r8)
 8003988:	40021000 	.word	0x40021000
 800398c:	00030002 	.word	0x00030002
 8003990:	00030003 	.word	0x00030003
 8003994:	00030001 	.word	0x00030001
 8003998:	00f42400 	.word	0x00f42400

0800399c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 800399c:	b570      	push	{r4, r5, r6, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	0004      	movs	r4, r0
 80039a2:	000d      	movs	r5, r1
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 80039a4:	6803      	ldr	r3, [r0, #0]
 80039a6:	07db      	lsls	r3, r3, #31
 80039a8:	d467      	bmi.n	8003a7a <LL_USART_Init+0xde>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80039aa:	6803      	ldr	r3, [r0, #0]
 80039ac:	4a34      	ldr	r2, [pc, #208]	; (8003a80 <LL_USART_Init+0xe4>)
 80039ae:	401a      	ands	r2, r3
 80039b0:	688b      	ldr	r3, [r1, #8]
 80039b2:	6909      	ldr	r1, [r1, #16]
 80039b4:	430b      	orrs	r3, r1
 80039b6:	6969      	ldr	r1, [r5, #20]
 80039b8:	430b      	orrs	r3, r1
 80039ba:	69e9      	ldr	r1, [r5, #28]
 80039bc:	430b      	orrs	r3, r1
 80039be:	4313      	orrs	r3, r2
 80039c0:	6003      	str	r3, [r0, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80039c2:	6843      	ldr	r3, [r0, #4]
 80039c4:	4a2f      	ldr	r2, [pc, #188]	; (8003a84 <LL_USART_Init+0xe8>)
 80039c6:	4013      	ands	r3, r2
 80039c8:	68ea      	ldr	r2, [r5, #12]
 80039ca:	4313      	orrs	r3, r2
 80039cc:	6043      	str	r3, [r0, #4]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80039ce:	6883      	ldr	r3, [r0, #8]
 80039d0:	4a2d      	ldr	r2, [pc, #180]	; (8003a88 <LL_USART_Init+0xec>)
 80039d2:	4013      	ands	r3, r2
 80039d4:	69aa      	ldr	r2, [r5, #24]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	6083      	str	r3, [r0, #8]
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 80039da:	4b2c      	ldr	r3, [pc, #176]	; (8003a8c <LL_USART_Init+0xf0>)
 80039dc:	4298      	cmp	r0, r3
 80039de:	d00d      	beq.n	80039fc <LL_USART_Init+0x60>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
    }
    else if (USARTx == USART2)
 80039e0:	4b2b      	ldr	r3, [pc, #172]	; (8003a90 <LL_USART_Init+0xf4>)
 80039e2:	4298      	cmp	r0, r3
 80039e4:	d014      	beq.n	8003a10 <LL_USART_Init+0x74>
  ErrorStatus status = ERROR;
 80039e6:	2001      	movs	r0, #1

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 80039e8:	682b      	ldr	r3, [r5, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 80039ea:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80039ec:	210f      	movs	r1, #15
 80039ee:	438a      	bics	r2, r1
 80039f0:	041b      	lsls	r3, r3, #16
 80039f2:	0c1b      	lsrs	r3, r3, #16
 80039f4:	4313      	orrs	r3, r2
 80039f6:	62e3      	str	r3, [r4, #44]	; 0x2c
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
}
 80039f8:	b004      	add	sp, #16
 80039fa:	bd70      	pop	{r4, r5, r6, pc}
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 80039fc:	2003      	movs	r0, #3
 80039fe:	f7ff ff91 	bl	8003924 <LL_RCC_GetUSARTClockFreq>
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8003a02:	2800      	cmp	r0, #0
 8003a04:	d037      	beq.n	8003a76 <LL_USART_Init+0xda>
        && (USART_InitStruct->BaudRate != 0U))
 8003a06:	686e      	ldr	r6, [r5, #4]
 8003a08:	2e00      	cmp	r6, #0
 8003a0a:	d106      	bne.n	8003a1a <LL_USART_Init+0x7e>
  ErrorStatus status = ERROR;
 8003a0c:	2001      	movs	r0, #1
 8003a0e:	e7eb      	b.n	80039e8 <LL_USART_Init+0x4c>
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8003a10:	a801      	add	r0, sp, #4
 8003a12:	f7ff ff7b 	bl	800390c <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8003a16:	9803      	ldr	r0, [sp, #12]
 8003a18:	e7f3      	b.n	8003a02 <LL_USART_Init+0x66>
      LL_USART_SetBaudRate(USARTx,
 8003a1a:	682b      	ldr	r3, [r5, #0]
 8003a1c:	69ea      	ldr	r2, [r5, #28]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 8003a1e:	2b0b      	cmp	r3, #11
 8003a20:	d812      	bhi.n	8003a48 <LL_USART_Init+0xac>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 8003a22:	2180      	movs	r1, #128	; 0x80
 8003a24:	0209      	lsls	r1, r1, #8
 8003a26:	428a      	cmp	r2, r1
 8003a28:	d010      	beq.n	8003a4c <LL_USART_Init+0xb0>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8003a2a:	22ff      	movs	r2, #255	; 0xff
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	4a18      	ldr	r2, [pc, #96]	; (8003a94 <LL_USART_Init+0xf8>)
 8003a32:	5899      	ldr	r1, [r3, r2]
 8003a34:	f7fc fb76 	bl	8000124 <__udivsi3>
 8003a38:	0873      	lsrs	r3, r6, #1
 8003a3a:	18c0      	adds	r0, r0, r3
 8003a3c:	0031      	movs	r1, r6
 8003a3e:	f7fc fb71 	bl	8000124 <__udivsi3>
 8003a42:	0400      	lsls	r0, r0, #16
 8003a44:	0c00      	lsrs	r0, r0, #16
 8003a46:	60e0      	str	r0, [r4, #12]
      status = SUCCESS;
 8003a48:	2000      	movs	r0, #0
}
 8003a4a:	e7cd      	b.n	80039e8 <LL_USART_Init+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8003a4c:	22ff      	movs	r2, #255	; 0xff
 8003a4e:	4013      	ands	r3, r2
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	4a10      	ldr	r2, [pc, #64]	; (8003a94 <LL_USART_Init+0xf8>)
 8003a54:	5899      	ldr	r1, [r3, r2]
 8003a56:	f7fc fb65 	bl	8000124 <__udivsi3>
 8003a5a:	0040      	lsls	r0, r0, #1
 8003a5c:	0873      	lsrs	r3, r6, #1
 8003a5e:	18c0      	adds	r0, r0, r3
 8003a60:	0031      	movs	r1, r6
 8003a62:	f7fc fb5f 	bl	8000124 <__udivsi3>
    brrtemp = usartdiv & 0xFFF0U;
 8003a66:	4b0c      	ldr	r3, [pc, #48]	; (8003a98 <LL_USART_Init+0xfc>)
 8003a68:	4003      	ands	r3, r0
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a6a:	0840      	lsrs	r0, r0, #1
 8003a6c:	2207      	movs	r2, #7
 8003a6e:	4010      	ands	r0, r2
 8003a70:	4318      	orrs	r0, r3
    USARTx->BRR = brrtemp;
 8003a72:	60e0      	str	r0, [r4, #12]
 8003a74:	e7e8      	b.n	8003a48 <LL_USART_Init+0xac>
  ErrorStatus status = ERROR;
 8003a76:	2001      	movs	r0, #1
 8003a78:	e7b6      	b.n	80039e8 <LL_USART_Init+0x4c>
 8003a7a:	2001      	movs	r0, #1
 8003a7c:	e7bc      	b.n	80039f8 <LL_USART_Init+0x5c>
 8003a7e:	46c0      	nop			; (mov r8, r8)
 8003a80:	efff69f3 	.word	0xefff69f3
 8003a84:	ffffcfff 	.word	0xffffcfff
 8003a88:	fffffcff 	.word	0xfffffcff
 8003a8c:	40013800 	.word	0x40013800
 8003a90:	40004400 	.word	0x40004400
 8003a94:	080046c4 	.word	0x080046c4
 8003a98:	0000fff0 	.word	0x0000fff0

08003a9c <__errno>:
 8003a9c:	4b01      	ldr	r3, [pc, #4]	; (8003aa4 <__errno+0x8>)
 8003a9e:	6818      	ldr	r0, [r3, #0]
 8003aa0:	4770      	bx	lr
 8003aa2:	46c0      	nop			; (mov r8, r8)
 8003aa4:	2000000c 	.word	0x2000000c

08003aa8 <__libc_init_array>:
 8003aa8:	b570      	push	{r4, r5, r6, lr}
 8003aaa:	2600      	movs	r6, #0
 8003aac:	4d0c      	ldr	r5, [pc, #48]	; (8003ae0 <__libc_init_array+0x38>)
 8003aae:	4c0d      	ldr	r4, [pc, #52]	; (8003ae4 <__libc_init_array+0x3c>)
 8003ab0:	1b64      	subs	r4, r4, r5
 8003ab2:	10a4      	asrs	r4, r4, #2
 8003ab4:	42a6      	cmp	r6, r4
 8003ab6:	d109      	bne.n	8003acc <__libc_init_array+0x24>
 8003ab8:	2600      	movs	r6, #0
 8003aba:	f000 fc8f 	bl	80043dc <_init>
 8003abe:	4d0a      	ldr	r5, [pc, #40]	; (8003ae8 <__libc_init_array+0x40>)
 8003ac0:	4c0a      	ldr	r4, [pc, #40]	; (8003aec <__libc_init_array+0x44>)
 8003ac2:	1b64      	subs	r4, r4, r5
 8003ac4:	10a4      	asrs	r4, r4, #2
 8003ac6:	42a6      	cmp	r6, r4
 8003ac8:	d105      	bne.n	8003ad6 <__libc_init_array+0x2e>
 8003aca:	bd70      	pop	{r4, r5, r6, pc}
 8003acc:	00b3      	lsls	r3, r6, #2
 8003ace:	58eb      	ldr	r3, [r5, r3]
 8003ad0:	4798      	blx	r3
 8003ad2:	3601      	adds	r6, #1
 8003ad4:	e7ee      	b.n	8003ab4 <__libc_init_array+0xc>
 8003ad6:	00b3      	lsls	r3, r6, #2
 8003ad8:	58eb      	ldr	r3, [r5, r3]
 8003ada:	4798      	blx	r3
 8003adc:	3601      	adds	r6, #1
 8003ade:	e7f2      	b.n	8003ac6 <__libc_init_array+0x1e>
 8003ae0:	08004728 	.word	0x08004728
 8003ae4:	08004728 	.word	0x08004728
 8003ae8:	08004728 	.word	0x08004728
 8003aec:	0800472c 	.word	0x0800472c

08003af0 <memcpy>:
 8003af0:	2300      	movs	r3, #0
 8003af2:	b510      	push	{r4, lr}
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d100      	bne.n	8003afa <memcpy+0xa>
 8003af8:	bd10      	pop	{r4, pc}
 8003afa:	5ccc      	ldrb	r4, [r1, r3]
 8003afc:	54c4      	strb	r4, [r0, r3]
 8003afe:	3301      	adds	r3, #1
 8003b00:	e7f8      	b.n	8003af4 <memcpy+0x4>

08003b02 <memset>:
 8003b02:	0003      	movs	r3, r0
 8003b04:	1882      	adds	r2, r0, r2
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d100      	bne.n	8003b0c <memset+0xa>
 8003b0a:	4770      	bx	lr
 8003b0c:	7019      	strb	r1, [r3, #0]
 8003b0e:	3301      	adds	r3, #1
 8003b10:	e7f9      	b.n	8003b06 <memset+0x4>
	...

08003b14 <sniprintf>:
 8003b14:	b40c      	push	{r2, r3}
 8003b16:	b530      	push	{r4, r5, lr}
 8003b18:	4b17      	ldr	r3, [pc, #92]	; (8003b78 <sniprintf+0x64>)
 8003b1a:	000c      	movs	r4, r1
 8003b1c:	681d      	ldr	r5, [r3, #0]
 8003b1e:	b09d      	sub	sp, #116	; 0x74
 8003b20:	2900      	cmp	r1, #0
 8003b22:	da08      	bge.n	8003b36 <sniprintf+0x22>
 8003b24:	238b      	movs	r3, #139	; 0x8b
 8003b26:	2001      	movs	r0, #1
 8003b28:	602b      	str	r3, [r5, #0]
 8003b2a:	4240      	negs	r0, r0
 8003b2c:	b01d      	add	sp, #116	; 0x74
 8003b2e:	bc30      	pop	{r4, r5}
 8003b30:	bc08      	pop	{r3}
 8003b32:	b002      	add	sp, #8
 8003b34:	4718      	bx	r3
 8003b36:	2382      	movs	r3, #130	; 0x82
 8003b38:	466a      	mov	r2, sp
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	8293      	strh	r3, [r2, #20]
 8003b3e:	2300      	movs	r3, #0
 8003b40:	9002      	str	r0, [sp, #8]
 8003b42:	9006      	str	r0, [sp, #24]
 8003b44:	4299      	cmp	r1, r3
 8003b46:	d000      	beq.n	8003b4a <sniprintf+0x36>
 8003b48:	1e4b      	subs	r3, r1, #1
 8003b4a:	9304      	str	r3, [sp, #16]
 8003b4c:	9307      	str	r3, [sp, #28]
 8003b4e:	2301      	movs	r3, #1
 8003b50:	466a      	mov	r2, sp
 8003b52:	425b      	negs	r3, r3
 8003b54:	82d3      	strh	r3, [r2, #22]
 8003b56:	0028      	movs	r0, r5
 8003b58:	ab21      	add	r3, sp, #132	; 0x84
 8003b5a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003b5c:	a902      	add	r1, sp, #8
 8003b5e:	9301      	str	r3, [sp, #4]
 8003b60:	f000 f8a2 	bl	8003ca8 <_svfiprintf_r>
 8003b64:	1c43      	adds	r3, r0, #1
 8003b66:	da01      	bge.n	8003b6c <sniprintf+0x58>
 8003b68:	238b      	movs	r3, #139	; 0x8b
 8003b6a:	602b      	str	r3, [r5, #0]
 8003b6c:	2c00      	cmp	r4, #0
 8003b6e:	d0dd      	beq.n	8003b2c <sniprintf+0x18>
 8003b70:	2300      	movs	r3, #0
 8003b72:	9a02      	ldr	r2, [sp, #8]
 8003b74:	7013      	strb	r3, [r2, #0]
 8003b76:	e7d9      	b.n	8003b2c <sniprintf+0x18>
 8003b78:	2000000c 	.word	0x2000000c

08003b7c <siprintf>:
 8003b7c:	b40e      	push	{r1, r2, r3}
 8003b7e:	b500      	push	{lr}
 8003b80:	490b      	ldr	r1, [pc, #44]	; (8003bb0 <siprintf+0x34>)
 8003b82:	b09c      	sub	sp, #112	; 0x70
 8003b84:	ab1d      	add	r3, sp, #116	; 0x74
 8003b86:	9002      	str	r0, [sp, #8]
 8003b88:	9006      	str	r0, [sp, #24]
 8003b8a:	9107      	str	r1, [sp, #28]
 8003b8c:	9104      	str	r1, [sp, #16]
 8003b8e:	4809      	ldr	r0, [pc, #36]	; (8003bb4 <siprintf+0x38>)
 8003b90:	4909      	ldr	r1, [pc, #36]	; (8003bb8 <siprintf+0x3c>)
 8003b92:	cb04      	ldmia	r3!, {r2}
 8003b94:	9105      	str	r1, [sp, #20]
 8003b96:	6800      	ldr	r0, [r0, #0]
 8003b98:	a902      	add	r1, sp, #8
 8003b9a:	9301      	str	r3, [sp, #4]
 8003b9c:	f000 f884 	bl	8003ca8 <_svfiprintf_r>
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	9a02      	ldr	r2, [sp, #8]
 8003ba4:	7013      	strb	r3, [r2, #0]
 8003ba6:	b01c      	add	sp, #112	; 0x70
 8003ba8:	bc08      	pop	{r3}
 8003baa:	b003      	add	sp, #12
 8003bac:	4718      	bx	r3
 8003bae:	46c0      	nop			; (mov r8, r8)
 8003bb0:	7fffffff 	.word	0x7fffffff
 8003bb4:	2000000c 	.word	0x2000000c
 8003bb8:	ffff0208 	.word	0xffff0208

08003bbc <strncpy>:
 8003bbc:	0003      	movs	r3, r0
 8003bbe:	b530      	push	{r4, r5, lr}
 8003bc0:	001d      	movs	r5, r3
 8003bc2:	2a00      	cmp	r2, #0
 8003bc4:	d006      	beq.n	8003bd4 <strncpy+0x18>
 8003bc6:	780c      	ldrb	r4, [r1, #0]
 8003bc8:	3a01      	subs	r2, #1
 8003bca:	3301      	adds	r3, #1
 8003bcc:	702c      	strb	r4, [r5, #0]
 8003bce:	3101      	adds	r1, #1
 8003bd0:	2c00      	cmp	r4, #0
 8003bd2:	d1f5      	bne.n	8003bc0 <strncpy+0x4>
 8003bd4:	2100      	movs	r1, #0
 8003bd6:	189a      	adds	r2, r3, r2
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d100      	bne.n	8003bde <strncpy+0x22>
 8003bdc:	bd30      	pop	{r4, r5, pc}
 8003bde:	7019      	strb	r1, [r3, #0]
 8003be0:	3301      	adds	r3, #1
 8003be2:	e7f9      	b.n	8003bd8 <strncpy+0x1c>

08003be4 <__ssputs_r>:
 8003be4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003be6:	688e      	ldr	r6, [r1, #8]
 8003be8:	b085      	sub	sp, #20
 8003bea:	0007      	movs	r7, r0
 8003bec:	000c      	movs	r4, r1
 8003bee:	9203      	str	r2, [sp, #12]
 8003bf0:	9301      	str	r3, [sp, #4]
 8003bf2:	429e      	cmp	r6, r3
 8003bf4:	d83c      	bhi.n	8003c70 <__ssputs_r+0x8c>
 8003bf6:	2390      	movs	r3, #144	; 0x90
 8003bf8:	898a      	ldrh	r2, [r1, #12]
 8003bfa:	00db      	lsls	r3, r3, #3
 8003bfc:	421a      	tst	r2, r3
 8003bfe:	d034      	beq.n	8003c6a <__ssputs_r+0x86>
 8003c00:	2503      	movs	r5, #3
 8003c02:	6909      	ldr	r1, [r1, #16]
 8003c04:	6823      	ldr	r3, [r4, #0]
 8003c06:	1a5b      	subs	r3, r3, r1
 8003c08:	9302      	str	r3, [sp, #8]
 8003c0a:	6963      	ldr	r3, [r4, #20]
 8003c0c:	9802      	ldr	r0, [sp, #8]
 8003c0e:	435d      	muls	r5, r3
 8003c10:	0feb      	lsrs	r3, r5, #31
 8003c12:	195d      	adds	r5, r3, r5
 8003c14:	9b01      	ldr	r3, [sp, #4]
 8003c16:	106d      	asrs	r5, r5, #1
 8003c18:	3301      	adds	r3, #1
 8003c1a:	181b      	adds	r3, r3, r0
 8003c1c:	42ab      	cmp	r3, r5
 8003c1e:	d900      	bls.n	8003c22 <__ssputs_r+0x3e>
 8003c20:	001d      	movs	r5, r3
 8003c22:	0553      	lsls	r3, r2, #21
 8003c24:	d532      	bpl.n	8003c8c <__ssputs_r+0xa8>
 8003c26:	0029      	movs	r1, r5
 8003c28:	0038      	movs	r0, r7
 8003c2a:	f000 fb27 	bl	800427c <_malloc_r>
 8003c2e:	1e06      	subs	r6, r0, #0
 8003c30:	d109      	bne.n	8003c46 <__ssputs_r+0x62>
 8003c32:	230c      	movs	r3, #12
 8003c34:	603b      	str	r3, [r7, #0]
 8003c36:	2340      	movs	r3, #64	; 0x40
 8003c38:	2001      	movs	r0, #1
 8003c3a:	89a2      	ldrh	r2, [r4, #12]
 8003c3c:	4240      	negs	r0, r0
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	81a3      	strh	r3, [r4, #12]
 8003c42:	b005      	add	sp, #20
 8003c44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c46:	9a02      	ldr	r2, [sp, #8]
 8003c48:	6921      	ldr	r1, [r4, #16]
 8003c4a:	f7ff ff51 	bl	8003af0 <memcpy>
 8003c4e:	89a3      	ldrh	r3, [r4, #12]
 8003c50:	4a14      	ldr	r2, [pc, #80]	; (8003ca4 <__ssputs_r+0xc0>)
 8003c52:	401a      	ands	r2, r3
 8003c54:	2380      	movs	r3, #128	; 0x80
 8003c56:	4313      	orrs	r3, r2
 8003c58:	81a3      	strh	r3, [r4, #12]
 8003c5a:	9b02      	ldr	r3, [sp, #8]
 8003c5c:	6126      	str	r6, [r4, #16]
 8003c5e:	18f6      	adds	r6, r6, r3
 8003c60:	6026      	str	r6, [r4, #0]
 8003c62:	6165      	str	r5, [r4, #20]
 8003c64:	9e01      	ldr	r6, [sp, #4]
 8003c66:	1aed      	subs	r5, r5, r3
 8003c68:	60a5      	str	r5, [r4, #8]
 8003c6a:	9b01      	ldr	r3, [sp, #4]
 8003c6c:	429e      	cmp	r6, r3
 8003c6e:	d900      	bls.n	8003c72 <__ssputs_r+0x8e>
 8003c70:	9e01      	ldr	r6, [sp, #4]
 8003c72:	0032      	movs	r2, r6
 8003c74:	9903      	ldr	r1, [sp, #12]
 8003c76:	6820      	ldr	r0, [r4, #0]
 8003c78:	f000 faa3 	bl	80041c2 <memmove>
 8003c7c:	68a3      	ldr	r3, [r4, #8]
 8003c7e:	2000      	movs	r0, #0
 8003c80:	1b9b      	subs	r3, r3, r6
 8003c82:	60a3      	str	r3, [r4, #8]
 8003c84:	6823      	ldr	r3, [r4, #0]
 8003c86:	199e      	adds	r6, r3, r6
 8003c88:	6026      	str	r6, [r4, #0]
 8003c8a:	e7da      	b.n	8003c42 <__ssputs_r+0x5e>
 8003c8c:	002a      	movs	r2, r5
 8003c8e:	0038      	movs	r0, r7
 8003c90:	f000 fb52 	bl	8004338 <_realloc_r>
 8003c94:	1e06      	subs	r6, r0, #0
 8003c96:	d1e0      	bne.n	8003c5a <__ssputs_r+0x76>
 8003c98:	0038      	movs	r0, r7
 8003c9a:	6921      	ldr	r1, [r4, #16]
 8003c9c:	f000 faa4 	bl	80041e8 <_free_r>
 8003ca0:	e7c7      	b.n	8003c32 <__ssputs_r+0x4e>
 8003ca2:	46c0      	nop			; (mov r8, r8)
 8003ca4:	fffffb7f 	.word	0xfffffb7f

08003ca8 <_svfiprintf_r>:
 8003ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003caa:	b0a1      	sub	sp, #132	; 0x84
 8003cac:	9003      	str	r0, [sp, #12]
 8003cae:	001d      	movs	r5, r3
 8003cb0:	898b      	ldrh	r3, [r1, #12]
 8003cb2:	000f      	movs	r7, r1
 8003cb4:	0016      	movs	r6, r2
 8003cb6:	061b      	lsls	r3, r3, #24
 8003cb8:	d511      	bpl.n	8003cde <_svfiprintf_r+0x36>
 8003cba:	690b      	ldr	r3, [r1, #16]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d10e      	bne.n	8003cde <_svfiprintf_r+0x36>
 8003cc0:	2140      	movs	r1, #64	; 0x40
 8003cc2:	f000 fadb 	bl	800427c <_malloc_r>
 8003cc6:	6038      	str	r0, [r7, #0]
 8003cc8:	6138      	str	r0, [r7, #16]
 8003cca:	2800      	cmp	r0, #0
 8003ccc:	d105      	bne.n	8003cda <_svfiprintf_r+0x32>
 8003cce:	230c      	movs	r3, #12
 8003cd0:	9a03      	ldr	r2, [sp, #12]
 8003cd2:	3801      	subs	r0, #1
 8003cd4:	6013      	str	r3, [r2, #0]
 8003cd6:	b021      	add	sp, #132	; 0x84
 8003cd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003cda:	2340      	movs	r3, #64	; 0x40
 8003cdc:	617b      	str	r3, [r7, #20]
 8003cde:	2300      	movs	r3, #0
 8003ce0:	ac08      	add	r4, sp, #32
 8003ce2:	6163      	str	r3, [r4, #20]
 8003ce4:	3320      	adds	r3, #32
 8003ce6:	7663      	strb	r3, [r4, #25]
 8003ce8:	3310      	adds	r3, #16
 8003cea:	76a3      	strb	r3, [r4, #26]
 8003cec:	9507      	str	r5, [sp, #28]
 8003cee:	0035      	movs	r5, r6
 8003cf0:	782b      	ldrb	r3, [r5, #0]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d001      	beq.n	8003cfa <_svfiprintf_r+0x52>
 8003cf6:	2b25      	cmp	r3, #37	; 0x25
 8003cf8:	d147      	bne.n	8003d8a <_svfiprintf_r+0xe2>
 8003cfa:	1bab      	subs	r3, r5, r6
 8003cfc:	9305      	str	r3, [sp, #20]
 8003cfe:	42b5      	cmp	r5, r6
 8003d00:	d00c      	beq.n	8003d1c <_svfiprintf_r+0x74>
 8003d02:	0032      	movs	r2, r6
 8003d04:	0039      	movs	r1, r7
 8003d06:	9803      	ldr	r0, [sp, #12]
 8003d08:	f7ff ff6c 	bl	8003be4 <__ssputs_r>
 8003d0c:	1c43      	adds	r3, r0, #1
 8003d0e:	d100      	bne.n	8003d12 <_svfiprintf_r+0x6a>
 8003d10:	e0ae      	b.n	8003e70 <_svfiprintf_r+0x1c8>
 8003d12:	6962      	ldr	r2, [r4, #20]
 8003d14:	9b05      	ldr	r3, [sp, #20]
 8003d16:	4694      	mov	ip, r2
 8003d18:	4463      	add	r3, ip
 8003d1a:	6163      	str	r3, [r4, #20]
 8003d1c:	782b      	ldrb	r3, [r5, #0]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d100      	bne.n	8003d24 <_svfiprintf_r+0x7c>
 8003d22:	e0a5      	b.n	8003e70 <_svfiprintf_r+0x1c8>
 8003d24:	2201      	movs	r2, #1
 8003d26:	2300      	movs	r3, #0
 8003d28:	4252      	negs	r2, r2
 8003d2a:	6062      	str	r2, [r4, #4]
 8003d2c:	a904      	add	r1, sp, #16
 8003d2e:	3254      	adds	r2, #84	; 0x54
 8003d30:	1852      	adds	r2, r2, r1
 8003d32:	1c6e      	adds	r6, r5, #1
 8003d34:	6023      	str	r3, [r4, #0]
 8003d36:	60e3      	str	r3, [r4, #12]
 8003d38:	60a3      	str	r3, [r4, #8]
 8003d3a:	7013      	strb	r3, [r2, #0]
 8003d3c:	65a3      	str	r3, [r4, #88]	; 0x58
 8003d3e:	2205      	movs	r2, #5
 8003d40:	7831      	ldrb	r1, [r6, #0]
 8003d42:	4854      	ldr	r0, [pc, #336]	; (8003e94 <_svfiprintf_r+0x1ec>)
 8003d44:	f000 fa32 	bl	80041ac <memchr>
 8003d48:	1c75      	adds	r5, r6, #1
 8003d4a:	2800      	cmp	r0, #0
 8003d4c:	d11f      	bne.n	8003d8e <_svfiprintf_r+0xe6>
 8003d4e:	6822      	ldr	r2, [r4, #0]
 8003d50:	06d3      	lsls	r3, r2, #27
 8003d52:	d504      	bpl.n	8003d5e <_svfiprintf_r+0xb6>
 8003d54:	2353      	movs	r3, #83	; 0x53
 8003d56:	a904      	add	r1, sp, #16
 8003d58:	185b      	adds	r3, r3, r1
 8003d5a:	2120      	movs	r1, #32
 8003d5c:	7019      	strb	r1, [r3, #0]
 8003d5e:	0713      	lsls	r3, r2, #28
 8003d60:	d504      	bpl.n	8003d6c <_svfiprintf_r+0xc4>
 8003d62:	2353      	movs	r3, #83	; 0x53
 8003d64:	a904      	add	r1, sp, #16
 8003d66:	185b      	adds	r3, r3, r1
 8003d68:	212b      	movs	r1, #43	; 0x2b
 8003d6a:	7019      	strb	r1, [r3, #0]
 8003d6c:	7833      	ldrb	r3, [r6, #0]
 8003d6e:	2b2a      	cmp	r3, #42	; 0x2a
 8003d70:	d016      	beq.n	8003da0 <_svfiprintf_r+0xf8>
 8003d72:	0035      	movs	r5, r6
 8003d74:	2100      	movs	r1, #0
 8003d76:	200a      	movs	r0, #10
 8003d78:	68e3      	ldr	r3, [r4, #12]
 8003d7a:	782a      	ldrb	r2, [r5, #0]
 8003d7c:	1c6e      	adds	r6, r5, #1
 8003d7e:	3a30      	subs	r2, #48	; 0x30
 8003d80:	2a09      	cmp	r2, #9
 8003d82:	d94e      	bls.n	8003e22 <_svfiprintf_r+0x17a>
 8003d84:	2900      	cmp	r1, #0
 8003d86:	d111      	bne.n	8003dac <_svfiprintf_r+0x104>
 8003d88:	e017      	b.n	8003dba <_svfiprintf_r+0x112>
 8003d8a:	3501      	adds	r5, #1
 8003d8c:	e7b0      	b.n	8003cf0 <_svfiprintf_r+0x48>
 8003d8e:	4b41      	ldr	r3, [pc, #260]	; (8003e94 <_svfiprintf_r+0x1ec>)
 8003d90:	6822      	ldr	r2, [r4, #0]
 8003d92:	1ac0      	subs	r0, r0, r3
 8003d94:	2301      	movs	r3, #1
 8003d96:	4083      	lsls	r3, r0
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	002e      	movs	r6, r5
 8003d9c:	6023      	str	r3, [r4, #0]
 8003d9e:	e7ce      	b.n	8003d3e <_svfiprintf_r+0x96>
 8003da0:	9b07      	ldr	r3, [sp, #28]
 8003da2:	1d19      	adds	r1, r3, #4
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	9107      	str	r1, [sp, #28]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	db01      	blt.n	8003db0 <_svfiprintf_r+0x108>
 8003dac:	930b      	str	r3, [sp, #44]	; 0x2c
 8003dae:	e004      	b.n	8003dba <_svfiprintf_r+0x112>
 8003db0:	425b      	negs	r3, r3
 8003db2:	60e3      	str	r3, [r4, #12]
 8003db4:	2302      	movs	r3, #2
 8003db6:	4313      	orrs	r3, r2
 8003db8:	6023      	str	r3, [r4, #0]
 8003dba:	782b      	ldrb	r3, [r5, #0]
 8003dbc:	2b2e      	cmp	r3, #46	; 0x2e
 8003dbe:	d10a      	bne.n	8003dd6 <_svfiprintf_r+0x12e>
 8003dc0:	786b      	ldrb	r3, [r5, #1]
 8003dc2:	2b2a      	cmp	r3, #42	; 0x2a
 8003dc4:	d135      	bne.n	8003e32 <_svfiprintf_r+0x18a>
 8003dc6:	9b07      	ldr	r3, [sp, #28]
 8003dc8:	3502      	adds	r5, #2
 8003dca:	1d1a      	adds	r2, r3, #4
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	9207      	str	r2, [sp, #28]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	db2b      	blt.n	8003e2c <_svfiprintf_r+0x184>
 8003dd4:	9309      	str	r3, [sp, #36]	; 0x24
 8003dd6:	4e30      	ldr	r6, [pc, #192]	; (8003e98 <_svfiprintf_r+0x1f0>)
 8003dd8:	2203      	movs	r2, #3
 8003dda:	0030      	movs	r0, r6
 8003ddc:	7829      	ldrb	r1, [r5, #0]
 8003dde:	f000 f9e5 	bl	80041ac <memchr>
 8003de2:	2800      	cmp	r0, #0
 8003de4:	d006      	beq.n	8003df4 <_svfiprintf_r+0x14c>
 8003de6:	2340      	movs	r3, #64	; 0x40
 8003de8:	1b80      	subs	r0, r0, r6
 8003dea:	4083      	lsls	r3, r0
 8003dec:	6822      	ldr	r2, [r4, #0]
 8003dee:	3501      	adds	r5, #1
 8003df0:	4313      	orrs	r3, r2
 8003df2:	6023      	str	r3, [r4, #0]
 8003df4:	7829      	ldrb	r1, [r5, #0]
 8003df6:	2206      	movs	r2, #6
 8003df8:	4828      	ldr	r0, [pc, #160]	; (8003e9c <_svfiprintf_r+0x1f4>)
 8003dfa:	1c6e      	adds	r6, r5, #1
 8003dfc:	7621      	strb	r1, [r4, #24]
 8003dfe:	f000 f9d5 	bl	80041ac <memchr>
 8003e02:	2800      	cmp	r0, #0
 8003e04:	d03c      	beq.n	8003e80 <_svfiprintf_r+0x1d8>
 8003e06:	4b26      	ldr	r3, [pc, #152]	; (8003ea0 <_svfiprintf_r+0x1f8>)
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d125      	bne.n	8003e58 <_svfiprintf_r+0x1b0>
 8003e0c:	2207      	movs	r2, #7
 8003e0e:	9b07      	ldr	r3, [sp, #28]
 8003e10:	3307      	adds	r3, #7
 8003e12:	4393      	bics	r3, r2
 8003e14:	3308      	adds	r3, #8
 8003e16:	9307      	str	r3, [sp, #28]
 8003e18:	6963      	ldr	r3, [r4, #20]
 8003e1a:	9a04      	ldr	r2, [sp, #16]
 8003e1c:	189b      	adds	r3, r3, r2
 8003e1e:	6163      	str	r3, [r4, #20]
 8003e20:	e765      	b.n	8003cee <_svfiprintf_r+0x46>
 8003e22:	4343      	muls	r3, r0
 8003e24:	0035      	movs	r5, r6
 8003e26:	2101      	movs	r1, #1
 8003e28:	189b      	adds	r3, r3, r2
 8003e2a:	e7a6      	b.n	8003d7a <_svfiprintf_r+0xd2>
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	425b      	negs	r3, r3
 8003e30:	e7d0      	b.n	8003dd4 <_svfiprintf_r+0x12c>
 8003e32:	2300      	movs	r3, #0
 8003e34:	200a      	movs	r0, #10
 8003e36:	001a      	movs	r2, r3
 8003e38:	3501      	adds	r5, #1
 8003e3a:	6063      	str	r3, [r4, #4]
 8003e3c:	7829      	ldrb	r1, [r5, #0]
 8003e3e:	1c6e      	adds	r6, r5, #1
 8003e40:	3930      	subs	r1, #48	; 0x30
 8003e42:	2909      	cmp	r1, #9
 8003e44:	d903      	bls.n	8003e4e <_svfiprintf_r+0x1a6>
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d0c5      	beq.n	8003dd6 <_svfiprintf_r+0x12e>
 8003e4a:	9209      	str	r2, [sp, #36]	; 0x24
 8003e4c:	e7c3      	b.n	8003dd6 <_svfiprintf_r+0x12e>
 8003e4e:	4342      	muls	r2, r0
 8003e50:	0035      	movs	r5, r6
 8003e52:	2301      	movs	r3, #1
 8003e54:	1852      	adds	r2, r2, r1
 8003e56:	e7f1      	b.n	8003e3c <_svfiprintf_r+0x194>
 8003e58:	ab07      	add	r3, sp, #28
 8003e5a:	9300      	str	r3, [sp, #0]
 8003e5c:	003a      	movs	r2, r7
 8003e5e:	0021      	movs	r1, r4
 8003e60:	4b10      	ldr	r3, [pc, #64]	; (8003ea4 <_svfiprintf_r+0x1fc>)
 8003e62:	9803      	ldr	r0, [sp, #12]
 8003e64:	e000      	b.n	8003e68 <_svfiprintf_r+0x1c0>
 8003e66:	bf00      	nop
 8003e68:	9004      	str	r0, [sp, #16]
 8003e6a:	9b04      	ldr	r3, [sp, #16]
 8003e6c:	3301      	adds	r3, #1
 8003e6e:	d1d3      	bne.n	8003e18 <_svfiprintf_r+0x170>
 8003e70:	89bb      	ldrh	r3, [r7, #12]
 8003e72:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003e74:	065b      	lsls	r3, r3, #25
 8003e76:	d400      	bmi.n	8003e7a <_svfiprintf_r+0x1d2>
 8003e78:	e72d      	b.n	8003cd6 <_svfiprintf_r+0x2e>
 8003e7a:	2001      	movs	r0, #1
 8003e7c:	4240      	negs	r0, r0
 8003e7e:	e72a      	b.n	8003cd6 <_svfiprintf_r+0x2e>
 8003e80:	ab07      	add	r3, sp, #28
 8003e82:	9300      	str	r3, [sp, #0]
 8003e84:	003a      	movs	r2, r7
 8003e86:	0021      	movs	r1, r4
 8003e88:	4b06      	ldr	r3, [pc, #24]	; (8003ea4 <_svfiprintf_r+0x1fc>)
 8003e8a:	9803      	ldr	r0, [sp, #12]
 8003e8c:	f000 f87c 	bl	8003f88 <_printf_i>
 8003e90:	e7ea      	b.n	8003e68 <_svfiprintf_r+0x1c0>
 8003e92:	46c0      	nop			; (mov r8, r8)
 8003e94:	080046f4 	.word	0x080046f4
 8003e98:	080046fa 	.word	0x080046fa
 8003e9c:	080046fe 	.word	0x080046fe
 8003ea0:	00000000 	.word	0x00000000
 8003ea4:	08003be5 	.word	0x08003be5

08003ea8 <_printf_common>:
 8003ea8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003eaa:	0015      	movs	r5, r2
 8003eac:	9301      	str	r3, [sp, #4]
 8003eae:	688a      	ldr	r2, [r1, #8]
 8003eb0:	690b      	ldr	r3, [r1, #16]
 8003eb2:	000c      	movs	r4, r1
 8003eb4:	9000      	str	r0, [sp, #0]
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	da00      	bge.n	8003ebc <_printf_common+0x14>
 8003eba:	0013      	movs	r3, r2
 8003ebc:	0022      	movs	r2, r4
 8003ebe:	602b      	str	r3, [r5, #0]
 8003ec0:	3243      	adds	r2, #67	; 0x43
 8003ec2:	7812      	ldrb	r2, [r2, #0]
 8003ec4:	2a00      	cmp	r2, #0
 8003ec6:	d001      	beq.n	8003ecc <_printf_common+0x24>
 8003ec8:	3301      	adds	r3, #1
 8003eca:	602b      	str	r3, [r5, #0]
 8003ecc:	6823      	ldr	r3, [r4, #0]
 8003ece:	069b      	lsls	r3, r3, #26
 8003ed0:	d502      	bpl.n	8003ed8 <_printf_common+0x30>
 8003ed2:	682b      	ldr	r3, [r5, #0]
 8003ed4:	3302      	adds	r3, #2
 8003ed6:	602b      	str	r3, [r5, #0]
 8003ed8:	6822      	ldr	r2, [r4, #0]
 8003eda:	2306      	movs	r3, #6
 8003edc:	0017      	movs	r7, r2
 8003ede:	401f      	ands	r7, r3
 8003ee0:	421a      	tst	r2, r3
 8003ee2:	d027      	beq.n	8003f34 <_printf_common+0x8c>
 8003ee4:	0023      	movs	r3, r4
 8003ee6:	3343      	adds	r3, #67	; 0x43
 8003ee8:	781b      	ldrb	r3, [r3, #0]
 8003eea:	1e5a      	subs	r2, r3, #1
 8003eec:	4193      	sbcs	r3, r2
 8003eee:	6822      	ldr	r2, [r4, #0]
 8003ef0:	0692      	lsls	r2, r2, #26
 8003ef2:	d430      	bmi.n	8003f56 <_printf_common+0xae>
 8003ef4:	0022      	movs	r2, r4
 8003ef6:	9901      	ldr	r1, [sp, #4]
 8003ef8:	9800      	ldr	r0, [sp, #0]
 8003efa:	9e08      	ldr	r6, [sp, #32]
 8003efc:	3243      	adds	r2, #67	; 0x43
 8003efe:	47b0      	blx	r6
 8003f00:	1c43      	adds	r3, r0, #1
 8003f02:	d025      	beq.n	8003f50 <_printf_common+0xa8>
 8003f04:	2306      	movs	r3, #6
 8003f06:	6820      	ldr	r0, [r4, #0]
 8003f08:	682a      	ldr	r2, [r5, #0]
 8003f0a:	68e1      	ldr	r1, [r4, #12]
 8003f0c:	2500      	movs	r5, #0
 8003f0e:	4003      	ands	r3, r0
 8003f10:	2b04      	cmp	r3, #4
 8003f12:	d103      	bne.n	8003f1c <_printf_common+0x74>
 8003f14:	1a8d      	subs	r5, r1, r2
 8003f16:	43eb      	mvns	r3, r5
 8003f18:	17db      	asrs	r3, r3, #31
 8003f1a:	401d      	ands	r5, r3
 8003f1c:	68a3      	ldr	r3, [r4, #8]
 8003f1e:	6922      	ldr	r2, [r4, #16]
 8003f20:	4293      	cmp	r3, r2
 8003f22:	dd01      	ble.n	8003f28 <_printf_common+0x80>
 8003f24:	1a9b      	subs	r3, r3, r2
 8003f26:	18ed      	adds	r5, r5, r3
 8003f28:	2700      	movs	r7, #0
 8003f2a:	42bd      	cmp	r5, r7
 8003f2c:	d120      	bne.n	8003f70 <_printf_common+0xc8>
 8003f2e:	2000      	movs	r0, #0
 8003f30:	e010      	b.n	8003f54 <_printf_common+0xac>
 8003f32:	3701      	adds	r7, #1
 8003f34:	68e3      	ldr	r3, [r4, #12]
 8003f36:	682a      	ldr	r2, [r5, #0]
 8003f38:	1a9b      	subs	r3, r3, r2
 8003f3a:	42bb      	cmp	r3, r7
 8003f3c:	ddd2      	ble.n	8003ee4 <_printf_common+0x3c>
 8003f3e:	0022      	movs	r2, r4
 8003f40:	2301      	movs	r3, #1
 8003f42:	9901      	ldr	r1, [sp, #4]
 8003f44:	9800      	ldr	r0, [sp, #0]
 8003f46:	9e08      	ldr	r6, [sp, #32]
 8003f48:	3219      	adds	r2, #25
 8003f4a:	47b0      	blx	r6
 8003f4c:	1c43      	adds	r3, r0, #1
 8003f4e:	d1f0      	bne.n	8003f32 <_printf_common+0x8a>
 8003f50:	2001      	movs	r0, #1
 8003f52:	4240      	negs	r0, r0
 8003f54:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003f56:	2030      	movs	r0, #48	; 0x30
 8003f58:	18e1      	adds	r1, r4, r3
 8003f5a:	3143      	adds	r1, #67	; 0x43
 8003f5c:	7008      	strb	r0, [r1, #0]
 8003f5e:	0021      	movs	r1, r4
 8003f60:	1c5a      	adds	r2, r3, #1
 8003f62:	3145      	adds	r1, #69	; 0x45
 8003f64:	7809      	ldrb	r1, [r1, #0]
 8003f66:	18a2      	adds	r2, r4, r2
 8003f68:	3243      	adds	r2, #67	; 0x43
 8003f6a:	3302      	adds	r3, #2
 8003f6c:	7011      	strb	r1, [r2, #0]
 8003f6e:	e7c1      	b.n	8003ef4 <_printf_common+0x4c>
 8003f70:	0022      	movs	r2, r4
 8003f72:	2301      	movs	r3, #1
 8003f74:	9901      	ldr	r1, [sp, #4]
 8003f76:	9800      	ldr	r0, [sp, #0]
 8003f78:	9e08      	ldr	r6, [sp, #32]
 8003f7a:	321a      	adds	r2, #26
 8003f7c:	47b0      	blx	r6
 8003f7e:	1c43      	adds	r3, r0, #1
 8003f80:	d0e6      	beq.n	8003f50 <_printf_common+0xa8>
 8003f82:	3701      	adds	r7, #1
 8003f84:	e7d1      	b.n	8003f2a <_printf_common+0x82>
	...

08003f88 <_printf_i>:
 8003f88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f8a:	b08b      	sub	sp, #44	; 0x2c
 8003f8c:	9206      	str	r2, [sp, #24]
 8003f8e:	000a      	movs	r2, r1
 8003f90:	3243      	adds	r2, #67	; 0x43
 8003f92:	9307      	str	r3, [sp, #28]
 8003f94:	9005      	str	r0, [sp, #20]
 8003f96:	9204      	str	r2, [sp, #16]
 8003f98:	7e0a      	ldrb	r2, [r1, #24]
 8003f9a:	000c      	movs	r4, r1
 8003f9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003f9e:	2a78      	cmp	r2, #120	; 0x78
 8003fa0:	d806      	bhi.n	8003fb0 <_printf_i+0x28>
 8003fa2:	2a62      	cmp	r2, #98	; 0x62
 8003fa4:	d808      	bhi.n	8003fb8 <_printf_i+0x30>
 8003fa6:	2a00      	cmp	r2, #0
 8003fa8:	d100      	bne.n	8003fac <_printf_i+0x24>
 8003faa:	e0c0      	b.n	800412e <_printf_i+0x1a6>
 8003fac:	2a58      	cmp	r2, #88	; 0x58
 8003fae:	d052      	beq.n	8004056 <_printf_i+0xce>
 8003fb0:	0026      	movs	r6, r4
 8003fb2:	3642      	adds	r6, #66	; 0x42
 8003fb4:	7032      	strb	r2, [r6, #0]
 8003fb6:	e022      	b.n	8003ffe <_printf_i+0x76>
 8003fb8:	0010      	movs	r0, r2
 8003fba:	3863      	subs	r0, #99	; 0x63
 8003fbc:	2815      	cmp	r0, #21
 8003fbe:	d8f7      	bhi.n	8003fb0 <_printf_i+0x28>
 8003fc0:	f7fc f8a6 	bl	8000110 <__gnu_thumb1_case_shi>
 8003fc4:	001f0016 	.word	0x001f0016
 8003fc8:	fff6fff6 	.word	0xfff6fff6
 8003fcc:	fff6fff6 	.word	0xfff6fff6
 8003fd0:	fff6001f 	.word	0xfff6001f
 8003fd4:	fff6fff6 	.word	0xfff6fff6
 8003fd8:	00a8fff6 	.word	0x00a8fff6
 8003fdc:	009a0036 	.word	0x009a0036
 8003fe0:	fff6fff6 	.word	0xfff6fff6
 8003fe4:	fff600b9 	.word	0xfff600b9
 8003fe8:	fff60036 	.word	0xfff60036
 8003fec:	009efff6 	.word	0x009efff6
 8003ff0:	0026      	movs	r6, r4
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	3642      	adds	r6, #66	; 0x42
 8003ff6:	1d11      	adds	r1, r2, #4
 8003ff8:	6019      	str	r1, [r3, #0]
 8003ffa:	6813      	ldr	r3, [r2, #0]
 8003ffc:	7033      	strb	r3, [r6, #0]
 8003ffe:	2301      	movs	r3, #1
 8004000:	e0a7      	b.n	8004152 <_printf_i+0x1ca>
 8004002:	6808      	ldr	r0, [r1, #0]
 8004004:	6819      	ldr	r1, [r3, #0]
 8004006:	1d0a      	adds	r2, r1, #4
 8004008:	0605      	lsls	r5, r0, #24
 800400a:	d50b      	bpl.n	8004024 <_printf_i+0x9c>
 800400c:	680d      	ldr	r5, [r1, #0]
 800400e:	601a      	str	r2, [r3, #0]
 8004010:	2d00      	cmp	r5, #0
 8004012:	da03      	bge.n	800401c <_printf_i+0x94>
 8004014:	232d      	movs	r3, #45	; 0x2d
 8004016:	9a04      	ldr	r2, [sp, #16]
 8004018:	426d      	negs	r5, r5
 800401a:	7013      	strb	r3, [r2, #0]
 800401c:	4b61      	ldr	r3, [pc, #388]	; (80041a4 <_printf_i+0x21c>)
 800401e:	270a      	movs	r7, #10
 8004020:	9303      	str	r3, [sp, #12]
 8004022:	e032      	b.n	800408a <_printf_i+0x102>
 8004024:	680d      	ldr	r5, [r1, #0]
 8004026:	601a      	str	r2, [r3, #0]
 8004028:	0641      	lsls	r1, r0, #25
 800402a:	d5f1      	bpl.n	8004010 <_printf_i+0x88>
 800402c:	b22d      	sxth	r5, r5
 800402e:	e7ef      	b.n	8004010 <_printf_i+0x88>
 8004030:	680d      	ldr	r5, [r1, #0]
 8004032:	6819      	ldr	r1, [r3, #0]
 8004034:	1d08      	adds	r0, r1, #4
 8004036:	6018      	str	r0, [r3, #0]
 8004038:	062e      	lsls	r6, r5, #24
 800403a:	d501      	bpl.n	8004040 <_printf_i+0xb8>
 800403c:	680d      	ldr	r5, [r1, #0]
 800403e:	e003      	b.n	8004048 <_printf_i+0xc0>
 8004040:	066d      	lsls	r5, r5, #25
 8004042:	d5fb      	bpl.n	800403c <_printf_i+0xb4>
 8004044:	680d      	ldr	r5, [r1, #0]
 8004046:	b2ad      	uxth	r5, r5
 8004048:	4b56      	ldr	r3, [pc, #344]	; (80041a4 <_printf_i+0x21c>)
 800404a:	270a      	movs	r7, #10
 800404c:	9303      	str	r3, [sp, #12]
 800404e:	2a6f      	cmp	r2, #111	; 0x6f
 8004050:	d117      	bne.n	8004082 <_printf_i+0xfa>
 8004052:	2708      	movs	r7, #8
 8004054:	e015      	b.n	8004082 <_printf_i+0xfa>
 8004056:	3145      	adds	r1, #69	; 0x45
 8004058:	700a      	strb	r2, [r1, #0]
 800405a:	4a52      	ldr	r2, [pc, #328]	; (80041a4 <_printf_i+0x21c>)
 800405c:	9203      	str	r2, [sp, #12]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	6821      	ldr	r1, [r4, #0]
 8004062:	ca20      	ldmia	r2!, {r5}
 8004064:	601a      	str	r2, [r3, #0]
 8004066:	0608      	lsls	r0, r1, #24
 8004068:	d550      	bpl.n	800410c <_printf_i+0x184>
 800406a:	07cb      	lsls	r3, r1, #31
 800406c:	d502      	bpl.n	8004074 <_printf_i+0xec>
 800406e:	2320      	movs	r3, #32
 8004070:	4319      	orrs	r1, r3
 8004072:	6021      	str	r1, [r4, #0]
 8004074:	2710      	movs	r7, #16
 8004076:	2d00      	cmp	r5, #0
 8004078:	d103      	bne.n	8004082 <_printf_i+0xfa>
 800407a:	2320      	movs	r3, #32
 800407c:	6822      	ldr	r2, [r4, #0]
 800407e:	439a      	bics	r2, r3
 8004080:	6022      	str	r2, [r4, #0]
 8004082:	0023      	movs	r3, r4
 8004084:	2200      	movs	r2, #0
 8004086:	3343      	adds	r3, #67	; 0x43
 8004088:	701a      	strb	r2, [r3, #0]
 800408a:	6863      	ldr	r3, [r4, #4]
 800408c:	60a3      	str	r3, [r4, #8]
 800408e:	2b00      	cmp	r3, #0
 8004090:	db03      	blt.n	800409a <_printf_i+0x112>
 8004092:	2204      	movs	r2, #4
 8004094:	6821      	ldr	r1, [r4, #0]
 8004096:	4391      	bics	r1, r2
 8004098:	6021      	str	r1, [r4, #0]
 800409a:	2d00      	cmp	r5, #0
 800409c:	d102      	bne.n	80040a4 <_printf_i+0x11c>
 800409e:	9e04      	ldr	r6, [sp, #16]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d00c      	beq.n	80040be <_printf_i+0x136>
 80040a4:	9e04      	ldr	r6, [sp, #16]
 80040a6:	0028      	movs	r0, r5
 80040a8:	0039      	movs	r1, r7
 80040aa:	f7fc f8c1 	bl	8000230 <__aeabi_uidivmod>
 80040ae:	9b03      	ldr	r3, [sp, #12]
 80040b0:	3e01      	subs	r6, #1
 80040b2:	5c5b      	ldrb	r3, [r3, r1]
 80040b4:	7033      	strb	r3, [r6, #0]
 80040b6:	002b      	movs	r3, r5
 80040b8:	0005      	movs	r5, r0
 80040ba:	429f      	cmp	r7, r3
 80040bc:	d9f3      	bls.n	80040a6 <_printf_i+0x11e>
 80040be:	2f08      	cmp	r7, #8
 80040c0:	d109      	bne.n	80040d6 <_printf_i+0x14e>
 80040c2:	6823      	ldr	r3, [r4, #0]
 80040c4:	07db      	lsls	r3, r3, #31
 80040c6:	d506      	bpl.n	80040d6 <_printf_i+0x14e>
 80040c8:	6863      	ldr	r3, [r4, #4]
 80040ca:	6922      	ldr	r2, [r4, #16]
 80040cc:	4293      	cmp	r3, r2
 80040ce:	dc02      	bgt.n	80040d6 <_printf_i+0x14e>
 80040d0:	2330      	movs	r3, #48	; 0x30
 80040d2:	3e01      	subs	r6, #1
 80040d4:	7033      	strb	r3, [r6, #0]
 80040d6:	9b04      	ldr	r3, [sp, #16]
 80040d8:	1b9b      	subs	r3, r3, r6
 80040da:	6123      	str	r3, [r4, #16]
 80040dc:	9b07      	ldr	r3, [sp, #28]
 80040de:	0021      	movs	r1, r4
 80040e0:	9300      	str	r3, [sp, #0]
 80040e2:	9805      	ldr	r0, [sp, #20]
 80040e4:	9b06      	ldr	r3, [sp, #24]
 80040e6:	aa09      	add	r2, sp, #36	; 0x24
 80040e8:	f7ff fede 	bl	8003ea8 <_printf_common>
 80040ec:	1c43      	adds	r3, r0, #1
 80040ee:	d135      	bne.n	800415c <_printf_i+0x1d4>
 80040f0:	2001      	movs	r0, #1
 80040f2:	4240      	negs	r0, r0
 80040f4:	b00b      	add	sp, #44	; 0x2c
 80040f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040f8:	2220      	movs	r2, #32
 80040fa:	6809      	ldr	r1, [r1, #0]
 80040fc:	430a      	orrs	r2, r1
 80040fe:	6022      	str	r2, [r4, #0]
 8004100:	0022      	movs	r2, r4
 8004102:	2178      	movs	r1, #120	; 0x78
 8004104:	3245      	adds	r2, #69	; 0x45
 8004106:	7011      	strb	r1, [r2, #0]
 8004108:	4a27      	ldr	r2, [pc, #156]	; (80041a8 <_printf_i+0x220>)
 800410a:	e7a7      	b.n	800405c <_printf_i+0xd4>
 800410c:	0648      	lsls	r0, r1, #25
 800410e:	d5ac      	bpl.n	800406a <_printf_i+0xe2>
 8004110:	b2ad      	uxth	r5, r5
 8004112:	e7aa      	b.n	800406a <_printf_i+0xe2>
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	680d      	ldr	r5, [r1, #0]
 8004118:	1d10      	adds	r0, r2, #4
 800411a:	6949      	ldr	r1, [r1, #20]
 800411c:	6018      	str	r0, [r3, #0]
 800411e:	6813      	ldr	r3, [r2, #0]
 8004120:	062e      	lsls	r6, r5, #24
 8004122:	d501      	bpl.n	8004128 <_printf_i+0x1a0>
 8004124:	6019      	str	r1, [r3, #0]
 8004126:	e002      	b.n	800412e <_printf_i+0x1a6>
 8004128:	066d      	lsls	r5, r5, #25
 800412a:	d5fb      	bpl.n	8004124 <_printf_i+0x19c>
 800412c:	8019      	strh	r1, [r3, #0]
 800412e:	2300      	movs	r3, #0
 8004130:	9e04      	ldr	r6, [sp, #16]
 8004132:	6123      	str	r3, [r4, #16]
 8004134:	e7d2      	b.n	80040dc <_printf_i+0x154>
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	1d11      	adds	r1, r2, #4
 800413a:	6019      	str	r1, [r3, #0]
 800413c:	6816      	ldr	r6, [r2, #0]
 800413e:	2100      	movs	r1, #0
 8004140:	0030      	movs	r0, r6
 8004142:	6862      	ldr	r2, [r4, #4]
 8004144:	f000 f832 	bl	80041ac <memchr>
 8004148:	2800      	cmp	r0, #0
 800414a:	d001      	beq.n	8004150 <_printf_i+0x1c8>
 800414c:	1b80      	subs	r0, r0, r6
 800414e:	6060      	str	r0, [r4, #4]
 8004150:	6863      	ldr	r3, [r4, #4]
 8004152:	6123      	str	r3, [r4, #16]
 8004154:	2300      	movs	r3, #0
 8004156:	9a04      	ldr	r2, [sp, #16]
 8004158:	7013      	strb	r3, [r2, #0]
 800415a:	e7bf      	b.n	80040dc <_printf_i+0x154>
 800415c:	6923      	ldr	r3, [r4, #16]
 800415e:	0032      	movs	r2, r6
 8004160:	9906      	ldr	r1, [sp, #24]
 8004162:	9805      	ldr	r0, [sp, #20]
 8004164:	9d07      	ldr	r5, [sp, #28]
 8004166:	47a8      	blx	r5
 8004168:	1c43      	adds	r3, r0, #1
 800416a:	d0c1      	beq.n	80040f0 <_printf_i+0x168>
 800416c:	6823      	ldr	r3, [r4, #0]
 800416e:	079b      	lsls	r3, r3, #30
 8004170:	d415      	bmi.n	800419e <_printf_i+0x216>
 8004172:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004174:	68e0      	ldr	r0, [r4, #12]
 8004176:	4298      	cmp	r0, r3
 8004178:	dabc      	bge.n	80040f4 <_printf_i+0x16c>
 800417a:	0018      	movs	r0, r3
 800417c:	e7ba      	b.n	80040f4 <_printf_i+0x16c>
 800417e:	0022      	movs	r2, r4
 8004180:	2301      	movs	r3, #1
 8004182:	9906      	ldr	r1, [sp, #24]
 8004184:	9805      	ldr	r0, [sp, #20]
 8004186:	9e07      	ldr	r6, [sp, #28]
 8004188:	3219      	adds	r2, #25
 800418a:	47b0      	blx	r6
 800418c:	1c43      	adds	r3, r0, #1
 800418e:	d0af      	beq.n	80040f0 <_printf_i+0x168>
 8004190:	3501      	adds	r5, #1
 8004192:	68e3      	ldr	r3, [r4, #12]
 8004194:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004196:	1a9b      	subs	r3, r3, r2
 8004198:	42ab      	cmp	r3, r5
 800419a:	dcf0      	bgt.n	800417e <_printf_i+0x1f6>
 800419c:	e7e9      	b.n	8004172 <_printf_i+0x1ea>
 800419e:	2500      	movs	r5, #0
 80041a0:	e7f7      	b.n	8004192 <_printf_i+0x20a>
 80041a2:	46c0      	nop			; (mov r8, r8)
 80041a4:	08004705 	.word	0x08004705
 80041a8:	08004716 	.word	0x08004716

080041ac <memchr>:
 80041ac:	b2c9      	uxtb	r1, r1
 80041ae:	1882      	adds	r2, r0, r2
 80041b0:	4290      	cmp	r0, r2
 80041b2:	d101      	bne.n	80041b8 <memchr+0xc>
 80041b4:	2000      	movs	r0, #0
 80041b6:	4770      	bx	lr
 80041b8:	7803      	ldrb	r3, [r0, #0]
 80041ba:	428b      	cmp	r3, r1
 80041bc:	d0fb      	beq.n	80041b6 <memchr+0xa>
 80041be:	3001      	adds	r0, #1
 80041c0:	e7f6      	b.n	80041b0 <memchr+0x4>

080041c2 <memmove>:
 80041c2:	b510      	push	{r4, lr}
 80041c4:	4288      	cmp	r0, r1
 80041c6:	d902      	bls.n	80041ce <memmove+0xc>
 80041c8:	188b      	adds	r3, r1, r2
 80041ca:	4298      	cmp	r0, r3
 80041cc:	d303      	bcc.n	80041d6 <memmove+0x14>
 80041ce:	2300      	movs	r3, #0
 80041d0:	e007      	b.n	80041e2 <memmove+0x20>
 80041d2:	5c8b      	ldrb	r3, [r1, r2]
 80041d4:	5483      	strb	r3, [r0, r2]
 80041d6:	3a01      	subs	r2, #1
 80041d8:	d2fb      	bcs.n	80041d2 <memmove+0x10>
 80041da:	bd10      	pop	{r4, pc}
 80041dc:	5ccc      	ldrb	r4, [r1, r3]
 80041de:	54c4      	strb	r4, [r0, r3]
 80041e0:	3301      	adds	r3, #1
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d1fa      	bne.n	80041dc <memmove+0x1a>
 80041e6:	e7f8      	b.n	80041da <memmove+0x18>

080041e8 <_free_r>:
 80041e8:	b570      	push	{r4, r5, r6, lr}
 80041ea:	0005      	movs	r5, r0
 80041ec:	2900      	cmp	r1, #0
 80041ee:	d010      	beq.n	8004212 <_free_r+0x2a>
 80041f0:	1f0c      	subs	r4, r1, #4
 80041f2:	6823      	ldr	r3, [r4, #0]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	da00      	bge.n	80041fa <_free_r+0x12>
 80041f8:	18e4      	adds	r4, r4, r3
 80041fa:	0028      	movs	r0, r5
 80041fc:	f000 f8d4 	bl	80043a8 <__malloc_lock>
 8004200:	4a1d      	ldr	r2, [pc, #116]	; (8004278 <_free_r+0x90>)
 8004202:	6813      	ldr	r3, [r2, #0]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d105      	bne.n	8004214 <_free_r+0x2c>
 8004208:	6063      	str	r3, [r4, #4]
 800420a:	6014      	str	r4, [r2, #0]
 800420c:	0028      	movs	r0, r5
 800420e:	f000 f8d3 	bl	80043b8 <__malloc_unlock>
 8004212:	bd70      	pop	{r4, r5, r6, pc}
 8004214:	42a3      	cmp	r3, r4
 8004216:	d908      	bls.n	800422a <_free_r+0x42>
 8004218:	6821      	ldr	r1, [r4, #0]
 800421a:	1860      	adds	r0, r4, r1
 800421c:	4283      	cmp	r3, r0
 800421e:	d1f3      	bne.n	8004208 <_free_r+0x20>
 8004220:	6818      	ldr	r0, [r3, #0]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	1841      	adds	r1, r0, r1
 8004226:	6021      	str	r1, [r4, #0]
 8004228:	e7ee      	b.n	8004208 <_free_r+0x20>
 800422a:	001a      	movs	r2, r3
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d001      	beq.n	8004236 <_free_r+0x4e>
 8004232:	42a3      	cmp	r3, r4
 8004234:	d9f9      	bls.n	800422a <_free_r+0x42>
 8004236:	6811      	ldr	r1, [r2, #0]
 8004238:	1850      	adds	r0, r2, r1
 800423a:	42a0      	cmp	r0, r4
 800423c:	d10b      	bne.n	8004256 <_free_r+0x6e>
 800423e:	6820      	ldr	r0, [r4, #0]
 8004240:	1809      	adds	r1, r1, r0
 8004242:	1850      	adds	r0, r2, r1
 8004244:	6011      	str	r1, [r2, #0]
 8004246:	4283      	cmp	r3, r0
 8004248:	d1e0      	bne.n	800420c <_free_r+0x24>
 800424a:	6818      	ldr	r0, [r3, #0]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	1841      	adds	r1, r0, r1
 8004250:	6011      	str	r1, [r2, #0]
 8004252:	6053      	str	r3, [r2, #4]
 8004254:	e7da      	b.n	800420c <_free_r+0x24>
 8004256:	42a0      	cmp	r0, r4
 8004258:	d902      	bls.n	8004260 <_free_r+0x78>
 800425a:	230c      	movs	r3, #12
 800425c:	602b      	str	r3, [r5, #0]
 800425e:	e7d5      	b.n	800420c <_free_r+0x24>
 8004260:	6821      	ldr	r1, [r4, #0]
 8004262:	1860      	adds	r0, r4, r1
 8004264:	4283      	cmp	r3, r0
 8004266:	d103      	bne.n	8004270 <_free_r+0x88>
 8004268:	6818      	ldr	r0, [r3, #0]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	1841      	adds	r1, r0, r1
 800426e:	6021      	str	r1, [r4, #0]
 8004270:	6063      	str	r3, [r4, #4]
 8004272:	6054      	str	r4, [r2, #4]
 8004274:	e7ca      	b.n	800420c <_free_r+0x24>
 8004276:	46c0      	nop			; (mov r8, r8)
 8004278:	200000a8 	.word	0x200000a8

0800427c <_malloc_r>:
 800427c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800427e:	2303      	movs	r3, #3
 8004280:	1ccd      	adds	r5, r1, #3
 8004282:	439d      	bics	r5, r3
 8004284:	3508      	adds	r5, #8
 8004286:	0006      	movs	r6, r0
 8004288:	2d0c      	cmp	r5, #12
 800428a:	d21f      	bcs.n	80042cc <_malloc_r+0x50>
 800428c:	250c      	movs	r5, #12
 800428e:	42a9      	cmp	r1, r5
 8004290:	d81e      	bhi.n	80042d0 <_malloc_r+0x54>
 8004292:	0030      	movs	r0, r6
 8004294:	f000 f888 	bl	80043a8 <__malloc_lock>
 8004298:	4925      	ldr	r1, [pc, #148]	; (8004330 <_malloc_r+0xb4>)
 800429a:	680a      	ldr	r2, [r1, #0]
 800429c:	0014      	movs	r4, r2
 800429e:	2c00      	cmp	r4, #0
 80042a0:	d11a      	bne.n	80042d8 <_malloc_r+0x5c>
 80042a2:	4f24      	ldr	r7, [pc, #144]	; (8004334 <_malloc_r+0xb8>)
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d104      	bne.n	80042b4 <_malloc_r+0x38>
 80042aa:	0021      	movs	r1, r4
 80042ac:	0030      	movs	r0, r6
 80042ae:	f000 f869 	bl	8004384 <_sbrk_r>
 80042b2:	6038      	str	r0, [r7, #0]
 80042b4:	0029      	movs	r1, r5
 80042b6:	0030      	movs	r0, r6
 80042b8:	f000 f864 	bl	8004384 <_sbrk_r>
 80042bc:	1c43      	adds	r3, r0, #1
 80042be:	d12b      	bne.n	8004318 <_malloc_r+0x9c>
 80042c0:	230c      	movs	r3, #12
 80042c2:	0030      	movs	r0, r6
 80042c4:	6033      	str	r3, [r6, #0]
 80042c6:	f000 f877 	bl	80043b8 <__malloc_unlock>
 80042ca:	e003      	b.n	80042d4 <_malloc_r+0x58>
 80042cc:	2d00      	cmp	r5, #0
 80042ce:	dade      	bge.n	800428e <_malloc_r+0x12>
 80042d0:	230c      	movs	r3, #12
 80042d2:	6033      	str	r3, [r6, #0]
 80042d4:	2000      	movs	r0, #0
 80042d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80042d8:	6823      	ldr	r3, [r4, #0]
 80042da:	1b5b      	subs	r3, r3, r5
 80042dc:	d419      	bmi.n	8004312 <_malloc_r+0x96>
 80042de:	2b0b      	cmp	r3, #11
 80042e0:	d903      	bls.n	80042ea <_malloc_r+0x6e>
 80042e2:	6023      	str	r3, [r4, #0]
 80042e4:	18e4      	adds	r4, r4, r3
 80042e6:	6025      	str	r5, [r4, #0]
 80042e8:	e003      	b.n	80042f2 <_malloc_r+0x76>
 80042ea:	6863      	ldr	r3, [r4, #4]
 80042ec:	42a2      	cmp	r2, r4
 80042ee:	d10e      	bne.n	800430e <_malloc_r+0x92>
 80042f0:	600b      	str	r3, [r1, #0]
 80042f2:	0030      	movs	r0, r6
 80042f4:	f000 f860 	bl	80043b8 <__malloc_unlock>
 80042f8:	0020      	movs	r0, r4
 80042fa:	2207      	movs	r2, #7
 80042fc:	300b      	adds	r0, #11
 80042fe:	1d23      	adds	r3, r4, #4
 8004300:	4390      	bics	r0, r2
 8004302:	1ac2      	subs	r2, r0, r3
 8004304:	4298      	cmp	r0, r3
 8004306:	d0e6      	beq.n	80042d6 <_malloc_r+0x5a>
 8004308:	1a1b      	subs	r3, r3, r0
 800430a:	50a3      	str	r3, [r4, r2]
 800430c:	e7e3      	b.n	80042d6 <_malloc_r+0x5a>
 800430e:	6053      	str	r3, [r2, #4]
 8004310:	e7ef      	b.n	80042f2 <_malloc_r+0x76>
 8004312:	0022      	movs	r2, r4
 8004314:	6864      	ldr	r4, [r4, #4]
 8004316:	e7c2      	b.n	800429e <_malloc_r+0x22>
 8004318:	2303      	movs	r3, #3
 800431a:	1cc4      	adds	r4, r0, #3
 800431c:	439c      	bics	r4, r3
 800431e:	42a0      	cmp	r0, r4
 8004320:	d0e1      	beq.n	80042e6 <_malloc_r+0x6a>
 8004322:	1a21      	subs	r1, r4, r0
 8004324:	0030      	movs	r0, r6
 8004326:	f000 f82d 	bl	8004384 <_sbrk_r>
 800432a:	1c43      	adds	r3, r0, #1
 800432c:	d1db      	bne.n	80042e6 <_malloc_r+0x6a>
 800432e:	e7c7      	b.n	80042c0 <_malloc_r+0x44>
 8004330:	200000a8 	.word	0x200000a8
 8004334:	200000ac 	.word	0x200000ac

08004338 <_realloc_r>:
 8004338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800433a:	0007      	movs	r7, r0
 800433c:	000d      	movs	r5, r1
 800433e:	0016      	movs	r6, r2
 8004340:	2900      	cmp	r1, #0
 8004342:	d105      	bne.n	8004350 <_realloc_r+0x18>
 8004344:	0011      	movs	r1, r2
 8004346:	f7ff ff99 	bl	800427c <_malloc_r>
 800434a:	0004      	movs	r4, r0
 800434c:	0020      	movs	r0, r4
 800434e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004350:	2a00      	cmp	r2, #0
 8004352:	d103      	bne.n	800435c <_realloc_r+0x24>
 8004354:	f7ff ff48 	bl	80041e8 <_free_r>
 8004358:	0034      	movs	r4, r6
 800435a:	e7f7      	b.n	800434c <_realloc_r+0x14>
 800435c:	f000 f834 	bl	80043c8 <_malloc_usable_size_r>
 8004360:	002c      	movs	r4, r5
 8004362:	42b0      	cmp	r0, r6
 8004364:	d2f2      	bcs.n	800434c <_realloc_r+0x14>
 8004366:	0031      	movs	r1, r6
 8004368:	0038      	movs	r0, r7
 800436a:	f7ff ff87 	bl	800427c <_malloc_r>
 800436e:	1e04      	subs	r4, r0, #0
 8004370:	d0ec      	beq.n	800434c <_realloc_r+0x14>
 8004372:	0029      	movs	r1, r5
 8004374:	0032      	movs	r2, r6
 8004376:	f7ff fbbb 	bl	8003af0 <memcpy>
 800437a:	0029      	movs	r1, r5
 800437c:	0038      	movs	r0, r7
 800437e:	f7ff ff33 	bl	80041e8 <_free_r>
 8004382:	e7e3      	b.n	800434c <_realloc_r+0x14>

08004384 <_sbrk_r>:
 8004384:	2300      	movs	r3, #0
 8004386:	b570      	push	{r4, r5, r6, lr}
 8004388:	4d06      	ldr	r5, [pc, #24]	; (80043a4 <_sbrk_r+0x20>)
 800438a:	0004      	movs	r4, r0
 800438c:	0008      	movs	r0, r1
 800438e:	602b      	str	r3, [r5, #0]
 8004390:	f7fd fadc 	bl	800194c <_sbrk>
 8004394:	1c43      	adds	r3, r0, #1
 8004396:	d103      	bne.n	80043a0 <_sbrk_r+0x1c>
 8004398:	682b      	ldr	r3, [r5, #0]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d000      	beq.n	80043a0 <_sbrk_r+0x1c>
 800439e:	6023      	str	r3, [r4, #0]
 80043a0:	bd70      	pop	{r4, r5, r6, pc}
 80043a2:	46c0      	nop			; (mov r8, r8)
 80043a4:	20000384 	.word	0x20000384

080043a8 <__malloc_lock>:
 80043a8:	b510      	push	{r4, lr}
 80043aa:	4802      	ldr	r0, [pc, #8]	; (80043b4 <__malloc_lock+0xc>)
 80043ac:	f000 f814 	bl	80043d8 <__retarget_lock_acquire_recursive>
 80043b0:	bd10      	pop	{r4, pc}
 80043b2:	46c0      	nop			; (mov r8, r8)
 80043b4:	2000038c 	.word	0x2000038c

080043b8 <__malloc_unlock>:
 80043b8:	b510      	push	{r4, lr}
 80043ba:	4802      	ldr	r0, [pc, #8]	; (80043c4 <__malloc_unlock+0xc>)
 80043bc:	f000 f80d 	bl	80043da <__retarget_lock_release_recursive>
 80043c0:	bd10      	pop	{r4, pc}
 80043c2:	46c0      	nop			; (mov r8, r8)
 80043c4:	2000038c 	.word	0x2000038c

080043c8 <_malloc_usable_size_r>:
 80043c8:	1f0b      	subs	r3, r1, #4
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	1f18      	subs	r0, r3, #4
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	da01      	bge.n	80043d6 <_malloc_usable_size_r+0xe>
 80043d2:	580b      	ldr	r3, [r1, r0]
 80043d4:	18c0      	adds	r0, r0, r3
 80043d6:	4770      	bx	lr

080043d8 <__retarget_lock_acquire_recursive>:
 80043d8:	4770      	bx	lr

080043da <__retarget_lock_release_recursive>:
 80043da:	4770      	bx	lr

080043dc <_init>:
 80043dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043de:	46c0      	nop			; (mov r8, r8)
 80043e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043e2:	bc08      	pop	{r3}
 80043e4:	469e      	mov	lr, r3
 80043e6:	4770      	bx	lr

080043e8 <_fini>:
 80043e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043ea:	46c0      	nop			; (mov r8, r8)
 80043ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043ee:	bc08      	pop	{r3}
 80043f0:	469e      	mov	lr, r3
 80043f2:	4770      	bx	lr
